{"version":3,"sources":["sustainability_shop_fe/map.cljs"],"mappings":"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","names":["sustainability-shop-fe.map/r","cognitect.transit.reader","sustainability-shop-fe.map/yh","sustainability-shop-fe.map/geoJsonData","reagent.core.atom","sustainability-shop-fe.map/mapBox","sustainability-shop-fe.map/selectedLocation","sustainability-shop-fe.map/allLocations","alandipert.storage-atom/local-storage","sustainability-shop-fe.map/locationsInMap","sustainability-shop-fe.map/search-value","sustainability-shop-fe.map/includes-search-string","search","str","matches","cljs.core/re-matches","cljs.core/re-pattern","clojure.string/includes?","clojure.string/blank?","cljs.core/empty?","sustainability-shop-fe.map/locations-in-search","search-value","cljs.core/deref","js/JSON","cljs.core/clj->js","p1__35609#","cljs.core.filter","cljs.core.js__GT_clj","p1__35610#","cljs.core/first","sustainability-shop-fe.map/switch","mode","modeR","cljs.core/reset!","cljs.core._EQ_","cljs.core/add-watch","_","v","sustainability-shop-fe.map/reset-map-to-point","latlng","mapbox","sustainability-shop-fe.map/fetch-link!","c__26215__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26216__auto__","switch__26130__auto__","state_35630","state_val_35631","inst_35619","inst_35621","inst_35622","cljs.core/PersistentHashMap","inst_35623","cljs.core.async.impl.ioc-helpers/take!","inst_35625","inst_35626","inst_35627","inst_35628","cljs.core.async.impl.ioc-helpers/return-chan","statearr-35641","state-machine__26131__auto__","ret-value__26132__auto__","result__26133__auto__","cljs.core/keyword-identical?","ex__26134__auto__","e35645","statearr-35646","cljs.core/seq","statearr-35650","state__26217__auto__","statearr-35651","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","sustainability-shop-fe.map/slick-slider","locations-in-map-view","reagent.core/adapt-react-class","js/shadow.js.shim.module$react_slick.default","cljs.core.map","f","sustainability-shop-fe.map/global-geojsonLayer","sustainability-shop-fe.map/initialize-geo","geoJsonData","removeLayer","markers","js/shadow.js.shim.module$leaflet.markerClusterGroup","geojsonLayer","js/shadow.js.shim.module$leaflet.geoJson","feature","js/shadow.js.shim.module$leaflet.marker","js/console.log","sustainability-shop-fe.map/initialize-features-in-view-selection","cljs.core.mapv","feat","js/shadow.js.shim.module$leaflet.latLng","cljs.core.nth","sustainability-shop-fe.map/map-render","mapContainer","el","sustainability-shop-fe.map/list-render","listContainer","iter__4611__auto__","s__35671","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__35673","cljs.core/chunk-buffer","i__35672","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35670","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","item","sustainability-shop-fe.ui/brand-modal","sustainability-shop-fe.map/turn-realtime-db-to-geojson","flat-data","i","cljs.core/keys","p1__35680#","p2__35681#","cljs.core.sort_by","cljs.core/compare","and__4210__auto__","cljs.core/map?","sustainability-shop-fe.map/list-of-brands","reagent.core/create-class","sustainability-shop-fe.map/initialize-location-handling","control","js/L.Control","BackToList","map","p","js/L.DomUtil","text","js/document","di","div","sustainability-shop-fe.map/mode","MyGeolocation","image","bi","bii","js/navigator","geolocation","position","latitude","longitude","accuracy","myIcon","js/shadow.js.shim.module$leaflet.divIcon","e","MyGeolocationControl","BackToListControl","sustainability-shop-fe.map/map-component","js/shadow.js.shim.module$leaflet.map","sustainability-shop-fe.map-utils/initialize-map","sustainability-shop-fe.openroute/directionCol","sustainability-shop-fe.map/filter-locations","locations","p1__35705#","p1__35706#","p1__35707#","sustainability-shop-fe.map/map-page","evt","sustainability-shop-fe.ui/selected-location","sustainability-shop-fe.map/drawmap","snapshot","cljs.core/chunk-first"],"sourcesContent":["(ns sustainability-shop-fe.map\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [sustainability-shop-fe.ui :refer [brand-modal selected-location]]\n            [sustainability-shop-fe.map-utils :refer [initialize-map]]\n            [reagent.core :as reagent :refer [atom]]\n            [sustainability-shop-fe.openroute :refer [directionCol]]\n            [\"leaflet\" :as leaflet]\n            [\"leaflet.locatecontrol\" :as leaflet.locatecontrol]\n            [\"leaflet.markercluster\" :as leaflet.markercluster]\n            [cljs-http.client :as http]\n            [alandipert.storage-atom :refer [local-storage]]\n            [cognitect.transit :as t]\n            [cljs.core.async :refer [<!]]\n            [\"react-slick\" :as rs :default Slider]\n            [sustainability-shop-fe.ui :refer [h2]])\n  (:use [jayq.core :only [$ css html]]))\n\n ;; https://gist.githubusercontent.com/marharyta/fa3213c1cc4a31526efba46bb1da04b3/raw/55d3bb0850bc32500e222c8e776b4c9d22c97d46/test.geojson\n\n(def r (t/reader :json))\n(def yh \"[{\n  \\\"type\\\": \\\"FeatureCollection\\\",\n  \\\"features\\\": [\n    {\n      \\\"type\\\": \\\"Feature\\\",\n      \\\"properties\\\": {\n        \\\"name\\\": \\\"Test\\\"\n      },\n      \\\"geometry\\\": {\n        \\\"type\\\": \\\"Point\\\",\n        \\\"coordinates\\\": [\n          24.9384, 60.1699 \n        ]\n      }\n    }\n  ]\n}]\")\n\n(def geoJsonData (atom []))\n(def mapBox (atom nil))\n(def selectedLocation (atom nil))\n(def allLocations (local-storage (atom []) :allLocations))\n(def locationsInMap (atom []))\n(def search-value (reagent/atom \"\"))\n\n(defn includes-search-string [search str]\n  (let [matches (re-matches (re-pattern search) str)]\n    (if (or (clojure.string/includes?\n             str\n             search)\n            (not (clojure.string/blank? matches))\n            (not (empty? matches)))\n      true\n      false)))\n\n\n\n\n(defn locations-in-search [search-value]\n  (if-not (empty? (.parse js/JSON @geoJsonData))\n    (.stringify js/JSON (clj->js (filter\n                                  #(clojure.string/includes?\n                                    (:name (:properties (js->clj % :keywordize-keys true)))\n                                    search-value)\n                                  (filter\n                                   #(not (nil? %))\n                                   (. (first (.parse js/JSON @geoJsonData)) -features)))))\n    []))\n\n(defn switch [mode modeR]\n  [:div.row.switch\n   [:button {:onClick (fn [] (reset! mode \"list\"))\n             :type \"button\"\n             :class (str \"btn \" (when-not (= modeR \"map\") \"bold\"))} \"List\"]\n   \"/\"\n   [:button {:onClick (fn [] (reset! mode \"map\"))\n             :type \"button\"\n             :class (str \"btn \" (when (= modeR \"map\") \"bold\"))} \"Map (eco-friendly stores nearby)\"]])\n\n(add-watch allLocations\n           :new\n           (fn [_ _ _ v]\n             ;; (.log js/console \"new preference\" v)\n             ))\n\n(defn reset-map-to-point [latlng mapbox]\n  (. mapbox (flyTo latlng 18)))\n\n(defn fetch-link! []\n  (go (reset! geoJsonData\n              (js->clj (:body\n                        (<! (http/get \"https://gist.githubusercontent.com/marharyta/fa3213c1cc4a31526efba46bb1da04b3/raw/55d3bb0850bc32500e222c8e776b4c9d22c97d46/test.geojson\"\n                                      {:with-credentials? false})))))))\n\n\n;; (defn initialize-location-handling [mapbox]\n;;   (.. leaflet/control (locate) (addTo mapbox))\n;;   (. L.Map (addInitHook \"addHandler\" \"gestureHandling\" GestureHandling)))\n\n(defn slick-slider [locations-in-map-view]\n  [(reagent/adapt-react-class Slider)\n   {:slidesToShow 1.5\n    :infinite false}\n   (map\n    (fn [f]\n      [:div {:class \"h-24 bg-white p-6 mr-3\"}\n       [:h2 {:class \"text-xl font-medium text-blue-600\"}\n        (str (. (. f -properties) -name))]])\n    locations-in-map-view)])\n\n(def global-geojsonLayer (reagent/atom nil))\n\n\n(defn initialize-geo [mapbox geoJsonData removeLayer]\n  (let [markers (leaflet/markerClusterGroup)\n        ;; myIcon  (leaflet/divIcon #js {:className \"my-div-icon\"\n        ;;                               :html \" test \"})\n        geojsonLayer (leaflet/geoJson\n                      (.parse js/JSON geoJsonData)\n                      #js {:pointToLayer\n                           (fn [feature latlng]\n                            ;;  #js {:icon myIcon}\n                             (. markers\n                                (addLayer\n                                 (. (leaflet/marker latlng)\n                                    (addEventListener \"click\"\n                                                      (fn []\n                                                        ;; (js/console.log \"feature\" feature latlng)\n                                                        (reset-map-to-point latlng mapbox)\n                                                        (reset! selectedLocation (js->clj feature :keywordize-keys true)))))))\n                            ;;  (js/console.log (:name (:properties\n                            ;;                          (js->clj feature :keywordize-keys true))))\n                            ;;  (.. markers (bindPopup (:name (:properties\n                            ;;                                  (js->clj feature :keywordize-keys true)))) openPopup)\n                             )\n                          ;;  :onEachFeature (fn [feature featureLayer])\n                           :filter (fn [feature]\n                                     (if (clojure.string/blank? @search-value)\n                                       true\n                                       (when (includes-search-string @search-value (:name (:properties (js->clj feature :keywordize-keys true))))\n                                        ;; (clojure.string/includes?\n                                        ;;               (:name (:properties (js->clj feature :keywordize-keys true))) \n                                        ;;               @search-value )\n                                         true))\n                                      ;;  (when (not (nil? feature))\n\n                                      ;;      true))\n                                    ;;   (when (clojure.string/includes? \n                                    ;; (:name (:properties (js->clj feature :keywordize-keys true)))\n                                    ;; @search-value\n                                    ;; )\n                                    ;; true\n                                    ;; )\n                                     )})]\n    (js/console.log \"layer\" (clj->js geojsonLayer))\n    (reset! global-geojsonLayer geojsonLayer)\n    ;; (let [group \n\n    ;;      ( geojsonLayer)\n    ;;       ])\n    ;; (when removeLayer\n    ;;   )\n    (. geojsonLayer\n       (addTo mapbox))))\n\n ;; (reset! locationsInMap\n  ;;         (mapv\n  ;;          (fn [feat]\n  ;;            (let [f (leaflet/latLng (nth (. (. feat -geometry) -coordinates) 1)\n  ;;                                    (nth (. (. feat -geometry) -coordinates) 0))]\n  ;;              (when (. (. mapbox getBounds)\n  ;;                       (contains\n  ;;                        f))\n  ;;                feat)))\n  ;;          (. (first (.parse js/JSON geoJsonData)) -features)))\n\n(defn initialize-features-in-view-selection [mapbox geoJsonData]\n  (. mapbox (addEventListener \"moveend\" (fn []\n                                          (reset! locationsInMap\n                                                  (mapv\n                                                   (fn [feat]\n                                                     (let [f (leaflet/latLng (nth (. (. feat -geometry) -coordinates) 1)\n                                                                             (nth (. (. feat -geometry) -coordinates) 0))]\n                                                       (when (. (. mapbox getBounds)\n                                                                (contains\n                                                                 f))\n                                                         feat)))\n                                                   (. (first (.parse js/JSON geoJsonData)) -features))))))\n  (. mapbox (addEventListener \"zoomend\" (fn []\n                                          (reset! locationsInMap\n                                                  (mapv\n                                                   (fn [feat]\n                                                     (let [f (leaflet/latLng (nth (. (. feat -geometry) -coordinates) 1)\n                                                                             (nth (. (. feat -geometry) -coordinates) 0))]\n                                                       (when (. (. mapbox getBounds)\n                                                                (contains\n                                                                 f))\n                                                         feat)))\n                                                   (. (first (.parse js/JSON geoJsonData)) -features)))))))\n\n\n(defn map-render []\n  (let [mapContainer (atom nil)]\n    (fn []\n      [:div {:class \"absolute top-0 z-0\"\n             :id \"mapid\"\n             :ref (fn [el]\n                    (reset! mapContainer el))}])))\n\n(defn list-render []\n  (let [listContainer (atom nil)]\n    (fn [] [:div.row {:id \"listid\"\n                      :ref (fn [el]\n                             (reset! listContainer el))}\n            (for [item (:features (nth (js->clj\n                                        (.parse js/JSON @geoJsonData)\n                                        :keywordize-keys true) 0))]\n              ^{:key (clj->js (:id (:properties item)))}\n              [:div.col-12.col-sm-6.col-md-4.col-lg-3\n               [:button.item-btn\n                {:onClick (fn []\n                            (reset! selectedLocation (js->clj item))\n                          ;; (reset-map-to-point feature latlng mapbox)\n                            )}\n                (brand-modal item)]])])))\n\n\n\n(defn turn-realtime-db-to-geojson [flat-data]\n  (clj->js\n   [{:type \"FeatureCollection\"\n     :features (map (fn [i]\n                      {:type \"Feature\"\n                       :properties {:id (:id i)\n                                    :name (:name i)\n                                    :country (:country i)\n                                    :city (:city i)\n                                    :address (:address i)\n                                    :location (:location i)\n                                    :isBrickAndMortar (:isBrickAndMortar i)\n                                    :hours (:hours i)\n                                    :phone (:phone i)\n                                    :image (:image i)\n                                    :website (:website i)\n                                    :design (:design i)\n                                    :production (:production i)\n                                    :materials (:materials i)\n                                    :tags (:tags i)\n                                    :keys (keys i)}\n                       :geometry {:type \"Point\"\n                                  :coordinates [(:long i)\n                                                (:lat i)]}})\n                    (sort-by :name #(compare (. %1 toLowerCase) (. %2 toLowerCase))\n                             (map (fn [i] (nth i 1))\n                                  (filter (fn [i] (when (and (map? (nth i 1)) (:name (nth i 1)))\n                                                    (nth i 1)))\n                                          (js->clj  flat-data :keywordize-keys true)))))}]))\n\n\n\n\n(defn list-of-brands []\n  (reagent/create-class {:reagent-render list-render}))\n\n\n(defn initialize-location-handling [mapbox]\n  (let [control (L.Control.)\n        BackToList  (. L.Control (extend #js{:onAdd (fn [map]\n                                                      (let [p (. L.DomUtil (create \"p\"))\n                                                            text (. js/document (createTextNode \"List\"))\n                                                            di (. p (appendChild text))\n\n                                                            div (. p (addEventListener \"click\"\n                                                                                       (fn []\n                                                                                         (reset! mode \"list\")\n                                                                                             ;; list\n                                                                                         )))]\n                                                        p))\n                                             :onRemove (fn [map]\n                                                         (js/console.log \"onRemove\"))}))\n        MyGeolocation  (. L.Control (extend #js{:onAdd (fn [map]\n                                                         (let [image (. L.DomUtil (create \"img\"))\n                                                              ;; text (. js/document (createTextNode \"Hi there and greetings!\"))\n                                                               di (. image (setAttribute \"src\" \"./img/GroupS.png\"))\n                                                               bi (. image (setAttribute \"width\" \"30px\"))\n                                                               bii (. image (setAttribute \"height\" \"30px\"))\n                                                               div (. image (addEventListener \"click\"\n                                                                                              (fn []\n                                                                                                (if (. js/navigator -geolocation)\n                                                                                                  (let [geolocation (. js/navigator -geolocation)]\n                                                                                                    (. geolocation (getCurrentPosition\n                                                                                                                    (fn [position]\n                                                                                                                      (let [latitude (.. position -coords -latitude)\n                                                                                                                            longitude (.. position -coords -longitude)\n                                                                                                                            latlng #js {:lat latitude :lng longitude}\n                                                                                                                            accuracy (.. position -coords -accuracy)\n                                                                                                                            myIcon  (leaflet/divIcon #js {:className \"my-div-icon\"\n                                                                                                                                                          :html \" test \"})]\n\n                                                                                                                        (when mapbox\n\n                                                                                                                          (. (leaflet/marker latlng #js {:icon myIcon}) (addTo @mapBox))\n                                                                                                                          (. mapbox (flyTo latlng)))))\n                                                                                                                    (fn [e] e)\n                                                                                                                    #js {:enableHighAccuracy true})))\n                        ;; navigator.geolocation.getCurrentPosition (success, error);\n                                                                                                  (js/console.log \"Geolocation is not supported by your browser\")))))]\n                                                           image))\n                                                :onRemove (fn [map]\n                                                            (js/console.log \"onRemove\"))}))\n        MyGeolocationControl (MyGeolocation.)\n        BackToListControl (BackToList.)]\n    ;; (.. leaflet/control (locate) (addTo mapbox))\n    (. (. mapbox -zoomControl) (setPosition \"bottomright\"))\n    (..  MyGeolocationControl (setPosition \"bottomright\") (addTo mapbox))\n    (..  BackToListControl (setPosition \"bottomright\") (addTo mapbox))\n    ;; (. mapbox (addInitHook \"addHandler\" \"gestureHandling\" GestureHandling))\n    ))\n\n(defn map-component []\n  (reagent/create-class\n   {:component-did-mount (fn []\n                           (let [mapbox (leaflet/map \"mapid\" {:gestureHandling true})]\n                             (reset! mapBox mapbox)\n                             (initialize-map mapbox)\n                             (initialize-location-handling mapbox)\n                             (js/console.log \"component-did-mount\" (.parse js/JSON @geoJsonData))\n\n                             (if-not (empty? @geoJsonData)\n                               (do\n                                 (initialize-geo  @mapBox @geoJsonData false)\n                                 (initialize-features-in-view-selection @mapBox @geoJsonData))\n                               (initialize-geo @mapBox yh true))\n\n                                ;;  (initialize-geo @mapBox @directionCol false)\n                             ))\n    :component-did-update (fn []\n                            (js/console.log \"component-did-update\" (.parse js/JSON @geoJsonData) (.parse js/JSON @directionCol))\n\n                            ;; (if-not (clojure.string/blank? @search-value)\n                            ;;   (do\n                            ;;     ;; remove old layer\n                            ;;     (js/console.log (clj->js @mapBox) (clj->js (locations-in-search @search-value)))\n\n                            ;;     ;; (initialize-geo @mapBox (locations-in-search @search-value) true)\n                            ;;     )\n                            ;; (do \n                            ;;     (initialize-features-in-view-selection @mapBox @geoJsonData))\n                            (js/console.log \"@mapBox\" (clj->js @mapBox))\n                            (. @global-geojsonLayer remove)\n\n                            (do\n                              (initialize-geo @mapBox @geoJsonData false)\n                              (initialize-features-in-view-selection @mapBox @geoJsonData))\n                                ;; (initialize-geo @mapBox @directionCol false)\n                            )\n    :reagent-render map-render}))\n\n(defn filter-locations [locations]\n  (if (clojure.string/blank? @search-value)\n    (filter\n     #(not (nil? %))\n     locations)\n\n    (filter\n     #(includes-search-string @search-value\n                              (:name\n                               (:properties\n                                (js->clj % :keywordize-keys true))))\n     (filter\n      #(not (nil? %))\n      locations))))\n\n(defn map-page []\n  (let [mode (atom \"map\")\n        locations-in-map-view (filter-locations @locationsInMap)]\n    [:div {:class \"block relative py-16 h-full\"}\n     [:div {:class \"block relative h-full\"}\n      ;; [switch mode @mode]\n      (if  (= @mode \"map\")\n        [:<>\n         [map-component (map @geoJsonData) @search-value]\n         [:div {:class \"absolute block w-full bottom-6\"}\n          [:div {:class \"h-24 z-10\"}\n           (when-not (empty? locations-in-map-view)\n             [slick-slider locations-in-map-view])]\n          [:input {:class \" block absolute w-full h-10 border-2 border-solid border-blue-600 text-blue-600 rounded-full py-1 px-4 font-medium mt-3 z-50 bg-white\"\n                   :type \"text\"\n                  ;; :value @search-value\n                   :on-change (fn [evt]\n                                (reset! search-value (-> evt .-target .-value))\n                                ;; (when-not (clojure.string/blank? @search-value)\n                                ;; ;;  (js/console.log\n                                ;; ;;   (clj->js locations-in-map-view)\n                                ;; ;;   (clj->js (locations-in-search @search-value))\n                                ;; ;;   (clj->js @search-value))\n                                ;;  ;; trigger search\n                                ;;   )\n                              ;; change on search query\n                                )}]]]\n        [list-of-brands (map @geoJsonData)])]\n     [:div\n      [selected-location @selectedLocation selectedLocation]]]))\n\n(defn drawmap [snapshot]\n  (reset! geoJsonData (.stringify js/JSON (turn-realtime-db-to-geojson (.val snapshot)))))"]}