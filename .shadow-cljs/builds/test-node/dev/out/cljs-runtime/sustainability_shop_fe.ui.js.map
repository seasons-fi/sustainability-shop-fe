{"version":3,"sources":["sustainability_shop_fe/ui.cljs"],"mappings":";AAMA,+BAAA,/BAAMA,sEAAIC;AAAV,AAAA,0FAAA,kDACOA;;AAEP,+BAAA,/BAAMC,sEAAID,MAAME;AAAhB,AAAA,0FAAA,iDAAA,2CAAA,wDACeA,eAAOF;;AAEtB,+BAAA,/BAAMG,sEAAIH;AAAV,AAAA,0FAAA,iDACOA;;AAEP,iCAAA,jCAAMI,0EAAMC;AAAZ,AAAA,0FAAA,yDACWA;;AAIX,mCAAA,nCAAMC,8EAAQC;AAAd,AAAA,0FAAA,yFAAA,2CAAA,qEAAA,IAAA,6DAAA,3NACMC,wOAEHD;;AAEH,oCAAA,pCAAME,gFAASC;AAAf,AAAA,0FAAA,2DAEG,+BAAA,mFAAA,mDAAA,2CAAA,oDAAA,6KAAA,mFAAA,mDAAA,2CAAA,hmBAAI,AAACC,uBAAOD,6nBAEEA;;AAEjB,wCAAA,xCAAME,wFAAaC;AAAnB,AAAA,0FAAA,6QAAA,mFAAA,/SAEG,AAACJ,kCACA,AAAA,oFAAQ,AAAA,8FAAaI,oKACL,AAACC,qBAAQ,AAAA,mFAAO,AAAA,8FAAaD;;AAEjD,8CAAA,9CAAME,oGAAmBC,iBAAiBC;AAA1C,AACE,iCAAA,2CAAA,rEAACC,2JAA4C;AAAA,AAAA;GAA7C,yEAIuC,WAAKF,qBAAiBC;AAAtB,AACE,oBAAMD;AAAN,AAAA,0FAAA,iGAAA,2CAAA,wGAAA,mFAAA,yDAAA,2CAAA,vOACwC,mSAClB;AAAA,AAAO,mDAAA,5CAACG,sBAAOF;GAFrC,qDAAA,SAAA,wDAAA,eAAA,sEAAA,QAAA,gEAAA,gBAAA,gBAAA,mFAAA,mDAAA,2CAAA,wDAAA,eAAA,ypBAAA,mFAAA,uEAAA,wTAAA,6BAAA,mFAAA,yGAAA,mFAAA,sSAAA,mFAAA,mSAAA,mFAAA,iFAAA,mFAAA,8PAAA,mFAAA,gQAAA,mFAAA,qRAAA,mFAAA,lwGAQe,ubAAA,rbAAI,GAAK,AAACG,4BAAsB,AAAA,oFAAQ,AAAA,8FAAaJ,2BACnD,AAAA,oFAAQ,AAAA,8FAAaA,kbAGjCf,6BAAG,AAAA,mFAAO,AAAA,8FAAae,oZAEH,AAAA,wFAAU,AAAA,8FAAaA,mMAKvB,AAAA,qFAAQ,AAAA,8FAAaA,uUAEpB,AAAA,wFAAU,AAAA,8FAAaA,kKAEvB,AAAA,mFAAO,AAAA,8FAAaA,kKAEpB,AAAA,wFAAU,AAAA,8FAAaA,2MACxB,AAAA,mFAAQ,AAAA,8FAAaA;;AA1B9C","names":["sustainability-shop-fe.ui/h1","title","sustainability-shop-fe.ui/h2","class","sustainability-shop-fe.ui/h3","sustainability-shop-fe.ui/info","text","sustainability-shop-fe.ui/slider","children","js/shadow.js.shim.module$react_slick.default","sustainability-shop-fe.ui/picture","src","cljs.core/empty?","sustainability-shop-fe.ui/brand-modal","item","cljs.core/clj->js","sustainability-shop-fe.ui/selected-location","selectedLocation","selectedLocationR","reagent.core/create-class","cljs.core/reset!","clojure.string/blank?"],"sourcesContent":["(ns sustainability-shop-fe.ui\n  (:require [\"react-slick\" :as rs :default Slider]\n            [reagent.core :as reagent :refer [atom]]\n            [\"leaflet\" :as leaflet]\n            [sustainability-shop-fe.map-utils :refer [initialize-map]]))\n\n(defn h1 [title]\n  [:h1 title])\n\n(defn h2 [title class]\n  [:h2 {:class class} title])\n\n(defn h3 [title]\n  [:h3 title])\n\n(defn info [text]\n  [:p.info text])\n\n\n\n(defn slider [children]\n  [:> Slider {:slidesToShow 2\n              :infinite true}\n   children])\n\n(defn picture [src]\n  [:picture\n   (if (empty? src)\n     [:img {:src \"https://images.unsplash.com/photo-1504198458649-3128b932f49e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\"}]\n     [:img {:src src}])])\n\n(defn brand-modal [item]\n  [:<>\n   (picture\n    (:image (:properties item)))\n   [:h3.bottom-text (clj->js (:name (:properties item)))]])\n\n(defn selected-location [selectedLocation selectedLocationR]\n  (reagent/create-class {:component-did-update (fn []\n                                                ;;  (js/console.log \"smallMapContainer\" @smallMapContainer)\n                                                ;;  (initialize-map (leaflet/map \"smallmapid\"))\n                                                 )\n                         :reagent-render (fn [selectedLocation selectedLocationR]\n                                           (when selectedLocation\n                                             [:div.card.selected-location {:class  (str \"animate__animated animate__fadeInDown\")}\n                                              [:button {:onClick (fn [] (reset! selectedLocationR nil))\n                                                        :type \"button\"\n                                                        :class \"btn btn-dark\"\n                                                        :data-dismiss \"modal\"\n                                                        :aria-label \"Close\"} \"Close\"]\n                                              [:img {:class \"card-img-top\"\n                                                     :src (if (not (clojure.string/blank? (:image (:properties selectedLocation))))\n                                                            (:image (:properties selectedLocation))\n                                                            \"https://images.unsplash.com/photo-1504198458649-3128b932f49e?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80\")}]\n                                              [:div.card-body\n                                               [h2 (:name (:properties selectedLocation)) \"card-title\"]]\n                                              [:ul.list-group.list-group-flush\n                                               [:li.list-group-item (:website (:properties selectedLocation))]\n                                              ;;  [:li.list-group-item [:div {:id \"smallmapid\"\n                                              ;;                              :ref (fn [el]\n                                              ;;                                     (js/console.log el)\n                                              ;;                                     (reset! smallMapContainer el))}]]\n                                               [:li.list-group-item (:phone (:properties selectedLocation))]\n                                               [:li.list-group-item [:<>\n                                                                     (:address (:properties selectedLocation))\n                                                                     [:br]\n                                                                     (:city (:properties selectedLocation))\n                                                                     [:br]\n                                                                     (:country (:properties selectedLocation))]]\n                                               [:li.list-group-item (:hours (:properties selectedLocation))]]]))}))\n\n\n\n"]}