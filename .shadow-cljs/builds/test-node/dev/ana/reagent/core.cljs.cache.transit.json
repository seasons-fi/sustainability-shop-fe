["^ ","~:output",["^ ","~:js","goog.provide('reagent.core');\nreagent.core.is_client = reagent.impl.util.is_client;\n/**\n * Create a native React element, by calling React.createElement directly.\n * \n *   That means the second argument must be a javascript object (or nil), and\n *   that any Reagent hiccup forms must be processed with as-element. For example\n *   like this:\n * \n *   ```cljs\n *   (r/create-element \"div\" #js{:className \"foo\"}\n *  \"Hi \" (r/as-element [:strong \"world!\"])\n *   ```\n * \n *   which is equivalent to\n * \n *   ```cljs\n *   [:div.foo \"Hi\" [:strong \"world!\"]]\n *   ```\n */\nreagent.core.create_element = (function reagent$core$create_element(var_args){\nvar G__32046 = arguments.length;\nswitch (G__32046) {\ncase 1:\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___32187 = arguments.length;\nvar i__4819__auto___32188 = (0);\nwhile(true){\nif((i__4819__auto___32188 < len__4818__auto___32187)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___32188]));\n\nvar G__32189 = (i__4819__auto___32188 + (1));\ni__4819__auto___32188 = G__32189;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((3)),(0),null));\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4840__auto__);\n\n}\n});\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$1 = (function (type){\nreturn reagent.core.create_element.cljs$core$IFn$_invoke$arity$2(type,null);\n}));\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$2 = (function (type,props){\nif((!(cljs.core.map_QMARK_(props)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a JS object, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([props], 0))].join(''),\"\\n\",\"(clojure.core/not (clojure.core/map? props))\"].join('')));\n}\n\nreturn shadow.js.shim.module$react.createElement(type,props);\n}));\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$3 = (function (type,props,child){\nif((!(cljs.core.map_QMARK_(props)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a JS object, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([props], 0))].join(''),\"\\n\",\"(clojure.core/not (clojure.core/map? props))\"].join('')));\n}\n\nreturn shadow.js.shim.module$react.createElement(type,props,child);\n}));\n\n(reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic = (function (type,props,child,children){\nif((!(cljs.core.map_QMARK_(props)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a JS object, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([props], 0))].join(''),\"\\n\",\"(clojure.core/not (clojure.core/map? props))\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(shadow.js.shim.module$react.createElement,type,props,child,children);\n}));\n\n/** @this {Function} */\n(reagent.core.create_element.cljs$lang$applyTo = (function (seq32042){\nvar G__32043 = cljs.core.first(seq32042);\nvar seq32042__$1 = cljs.core.next(seq32042);\nvar G__32044 = cljs.core.first(seq32042__$1);\nvar seq32042__$2 = cljs.core.next(seq32042__$1);\nvar G__32045 = cljs.core.first(seq32042__$2);\nvar seq32042__$3 = cljs.core.next(seq32042__$2);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32043,G__32044,G__32045,seq32042__$3);\n}));\n\n(reagent.core.create_element.cljs$lang$maxFixedArity = (3));\n\n/**\n * Turns a vector of Hiccup syntax into a React element. Returns form\n *   unchanged if it is not a vector.\n */\nreagent.core.as_element = (function reagent$core$as_element(form){\nreturn reagent.impl.template.as_element(form);\n});\n/**\n * Returns an adapter for a native React class, that may be used\n *   just like a Reagent component function or class in Hiccup forms.\n */\nreagent.core.adapt_react_class = (function reagent$core$adapt_react_class(c){\nif(cljs.core.truth_(c)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Component\",\" must not be nil\"].join(''),\"\\n\",\"c\"].join('')));\n}\n\nreturn reagent.impl.template.adapt_react_class(c);\n});\n/**\n * Returns an adapter for a Reagent component, that may be used from\n *   React, for example in JSX. A single argument, props, is passed to\n *   the component, converted to a map.\n */\nreagent.core.reactify_component = (function reagent$core$reactify_component(c){\nif(cljs.core.truth_(c)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Component\",\" must not be nil\"].join(''),\"\\n\",\"c\"].join('')));\n}\n\nreturn reagent.impl.component.reactify_component(c);\n});\n/**\n * Render a Reagent component into the DOM. The first argument may be\n *   either a vector (using Reagent's Hiccup syntax), or a React element.\n *   The second argument should be a DOM node.\n * \n *   Optionally takes a callback that is called when the component is in place.\n * \n *   Returns the mounted component instance.\n */\nreagent.core.render = (function reagent$core$render(var_args){\nvar G__32067 = arguments.length;\nswitch (G__32067) {\ncase 2:\nreturn reagent.core.render.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn reagent.core.render.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(reagent.core.render.cljs$core$IFn$_invoke$arity$2 = (function (comp,container){\nreturn reagent.dom.render.cljs$core$IFn$_invoke$arity$2(comp,container);\n}));\n\n(reagent.core.render.cljs$core$IFn$_invoke$arity$3 = (function (comp,container,callback){\nreturn reagent.dom.render.cljs$core$IFn$_invoke$arity$3(comp,container,callback);\n}));\n\n(reagent.core.render.cljs$lang$maxFixedArity = 3);\n\n/**\n * Remove a component from the given DOM node.\n */\nreagent.core.unmount_component_at_node = (function reagent$core$unmount_component_at_node(container){\nreturn reagent.dom.unmount_component_at_node(container);\n});\n/**\n * Force re-rendering of all mounted Reagent components. This is\n *   probably only useful in a development environment, when you want to\n *   update components in response to some dynamic changes to code.\n * \n *   Note that force-update-all may not update root components. This\n *   happens if a component 'foo' is mounted with `(render [foo])` (since\n *   functions are passed by value, and not by reference, in\n *   ClojureScript). To get around this you'll have to introduce a layer\n *   of indirection, for example by using `(render [#'foo])` instead.\n */\nreagent.core.force_update_all = (function reagent$core$force_update_all(){\nreagent.ratom.flush_BANG_();\n\nreagent.dom.force_update_all();\n\nreturn reagent.impl.batching.flush_after_render();\n});\n/**\n * Creates JS class based on provided Clojure map, for example:\n * \n *   ```cljs\n *   {;; Constructor\n * :constructor (fn [this props])\n * :get-initial-state (fn [this])\n * ;; Static methods\n * :get-derived-state-from-props (fn [props state] partial-state)\n * :get-derived-state-from-error (fn [error] partial-state)\n * ;; Methods\n * :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n * :should-component-update (fn [this old-argv new-argv])\n * :component-did-mount (fn [this])\n * :component-did-update (fn [this old-argv old-state snapshot])\n * :component-will-unmount (fn [this])\n * :component-did-catch (fn [this error info])\n * :reagent-render (fn [args....])\n * ;; Or alternatively:\n * :render (fn [this])\n * ;; Deprecated methods:\n * :UNSAFE_component-will-receive-props (fn [this new-argv])\n * :UNSAFE_component-will-update (fn [this new-argv new-state])\n * :UNSAFE_component-will-mount (fn [this])}\n *   ```\n * \n *   Everything is optional, except either :reagent-render or :render.\n * \n *   Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n *   and can be provided in snake-case or camelCase.\n * \n *   State can be initialized using constructor, which matches React.Component class,\n *   or using getInitialState which matches old React createClass function and is\n *   now implemented by Reagent for compatibility.\n * \n *   State can usually be anything, e.g. Cljs object. But if using getDerivedState\n *   methods, the state has to be plain JS object as React implementation uses\n *   Object.assign to merge partial state into the current state.\n * \n *   React built-in static methods or properties are automatically defined as statics.\n */\nreagent.core.create_class = (function reagent$core$create_class(spec){\nreturn reagent.impl.component.create_class(spec);\n});\n/**\n * Returns the current React component (a.k.a `this`) in a component\n *   function.\n */\nreagent.core.current_component = (function reagent$core$current_component(){\nreturn reagent.impl.component._STAR_current_component_STAR_;\n});\n/**\n * Returns an atom containing a components state.\n */\nreagent.core.state_atom = (function reagent$core$state_atom(this$){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nreturn reagent.impl.component.state_atom(this$);\n});\n/**\n * Returns the state of a component, as set with replace-state or set-state.\n *   Equivalent to `(deref (r/state-atom this))`\n */\nreagent.core.state = (function reagent$core$state(this$){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nreturn cljs.core.deref(reagent.core.state_atom(this$));\n});\n/**\n * Set state of a component.\n *   Equivalent to `(reset! (state-atom this) new-state)`\n */\nreagent.core.replace_state = (function reagent$core$replace_state(this$,new_state){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nif((((new_state == null)) || (cljs.core.map_QMARK_(new_state)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a valid new state, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new_state], 0))].join(''),\"\\n\",\"(clojure.core/or (clojure.core/nil? new-state) (clojure.core/map? new-state))\"].join('')));\n}\n\nreturn cljs.core.reset_BANG_(reagent.core.state_atom(this$),new_state);\n});\n/**\n * Merge component state with new-state.\n *   Equivalent to `(swap! (state-atom this) merge new-state)`\n */\nreagent.core.set_state = (function reagent$core$set_state(this$,new_state){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nif((((new_state == null)) || (cljs.core.map_QMARK_(new_state)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a valid new state, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new_state], 0))].join(''),\"\\n\",\"(clojure.core/or (clojure.core/nil? new-state) (clojure.core/map? new-state))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(reagent.core.state_atom(this$),cljs.core.merge,new_state);\n});\n/**\n * Force a component to re-render immediately.\n * \n *   If the second argument is true, child components will also be\n *   re-rendered, even is their arguments have not changed.\n */\nreagent.core.force_update = (function reagent$core$force_update(var_args){\nvar G__32083 = arguments.length;\nswitch (G__32083) {\ncase 1:\nreturn reagent.core.force_update.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.force_update.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(reagent.core.force_update.cljs$core$IFn$_invoke$arity$1 = (function (this$){\nreturn reagent.core.force_update.cljs$core$IFn$_invoke$arity$2(this$,false);\n}));\n\n(reagent.core.force_update.cljs$core$IFn$_invoke$arity$2 = (function (this$,deep){\nreagent.ratom.flush_BANG_();\n\nreagent.impl.util.force_update(this$,deep);\n\nreturn reagent.impl.batching.flush_after_render();\n}));\n\n(reagent.core.force_update.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns the props passed to a component.\n */\nreagent.core.props = (function reagent$core$props(this$){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nreturn reagent.impl.component.get_props(this$);\n});\n/**\n * Returns the children passed to a component.\n */\nreagent.core.children = (function reagent$core$children(this$){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nreturn reagent.impl.component.get_children(this$);\n});\n/**\n * Returns the entire Hiccup form passed to the component.\n */\nreagent.core.argv = (function reagent$core$argv(this$){\nif(reagent.impl.component.reagent_component_QMARK_(this$)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected a reagent component, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this$], 0))].join(''),\"\\n\",\"(comp/reagent-component? this)\"].join('')));\n}\n\nreturn reagent.impl.component.get_argv(this$);\n});\n/**\n * Returns the root DOM node of a mounted component.\n */\nreagent.core.dom_node = (function reagent$core$dom_node(this$){\nreturn reagent.dom.dom_node(this$);\n});\n/**\n * Function which normalizes and combines class values to a string\n * \n *   Reagent allows classes to be defined as:\n *   - Strings\n *   - Named objects (Symbols or Keywords)\n *   - Collections of previous types\n */\nreagent.core.class_names = (function reagent$core$class_names(var_args){\nvar G__32098 = arguments.length;\nswitch (G__32098) {\ncase 0:\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___32228 = arguments.length;\nvar i__4819__auto___32229 = (0);\nwhile(true){\nif((i__4819__auto___32229 < len__4818__auto___32228)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___32229]));\n\nvar G__32230 = (i__4819__auto___32229 + (1));\ni__4819__auto___32229 = G__32230;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((2)),(0),null));\nreturn reagent.core.class_names.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4840__auto__);\n\n}\n});\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn null;\n}));\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$1 = (function (class$){\nreturn reagent.impl.util.class_names.cljs$core$IFn$_invoke$arity$1(class$);\n}));\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$2 = (function (class1,class2){\nreturn reagent.impl.util.class_names.cljs$core$IFn$_invoke$arity$2(class1,class2);\n}));\n\n(reagent.core.class_names.cljs$core$IFn$_invoke$arity$variadic = (function (class1,class2,others){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(reagent.impl.util.class_names,class1,class2,others);\n}));\n\n/** @this {Function} */\n(reagent.core.class_names.cljs$lang$applyTo = (function (seq32095){\nvar G__32096 = cljs.core.first(seq32095);\nvar seq32095__$1 = cljs.core.next(seq32095);\nvar G__32097 = cljs.core.first(seq32095__$1);\nvar seq32095__$2 = cljs.core.next(seq32095__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32096,G__32097,seq32095__$2);\n}));\n\n(reagent.core.class_names.cljs$lang$maxFixedArity = (2));\n\n/**\n * Utility function that merges some maps, handling `:class` and `:style`.\n * \n *   The :class value is always normalized (using `class-names`) even if no\n *   merging is done.\n */\nreagent.core.merge_props = (function reagent$core$merge_props(var_args){\nvar G__32113 = arguments.length;\nswitch (G__32113) {\ncase 0:\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___32240 = arguments.length;\nvar i__4819__auto___32241 = (0);\nwhile(true){\nif((i__4819__auto___32241 < len__4818__auto___32240)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___32241]));\n\nvar G__32242 = (i__4819__auto___32241 + (1));\ni__4819__auto___32241 = G__32242;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((2)),(0),null));\nreturn reagent.core.merge_props.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4840__auto__);\n\n}\n});\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn reagent.impl.util.merge_props.cljs$core$IFn$_invoke$arity$0();\n}));\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$1 = (function (defaults){\nreturn reagent.impl.util.merge_props.cljs$core$IFn$_invoke$arity$1(defaults);\n}));\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$2 = (function (defaults,props){\nreturn reagent.impl.util.merge_props.cljs$core$IFn$_invoke$arity$2(defaults,props);\n}));\n\n(reagent.core.merge_props.cljs$core$IFn$_invoke$arity$variadic = (function (defaults,props,others){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(reagent.impl.util.merge_props,defaults,props,others);\n}));\n\n/** @this {Function} */\n(reagent.core.merge_props.cljs$lang$applyTo = (function (seq32110){\nvar G__32111 = cljs.core.first(seq32110);\nvar seq32110__$1 = cljs.core.next(seq32110);\nvar G__32112 = cljs.core.first(seq32110__$1);\nvar seq32110__$2 = cljs.core.next(seq32110__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32111,G__32112,seq32110__$2);\n}));\n\n(reagent.core.merge_props.cljs$lang$maxFixedArity = (2));\n\n/**\n * Render dirty components immediately.\n * \n *   Note that this may not work in event handlers, since React.js does\n *   batching of updates there.\n */\nreagent.core.flush = (function reagent$core$flush(){\nreturn reagent.impl.batching.flush();\n});\n/**\n * Like clojure.core/atom, except that it keeps track of derefs.\n *   Reagent components that derefs one of these are automatically\n *   re-rendered.\n */\nreagent.core.atom = (function reagent$core$atom(var_args){\nvar G__32122 = arguments.length;\nswitch (G__32122) {\ncase 1:\nreturn reagent.core.atom.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nvar args_arr__4839__auto__ = [];\nvar len__4818__auto___32248 = arguments.length;\nvar i__4819__auto___32249 = (0);\nwhile(true){\nif((i__4819__auto___32249 < len__4818__auto___32248)){\nargs_arr__4839__auto__.push((arguments[i__4819__auto___32249]));\n\nvar G__32251 = (i__4819__auto___32249 + (1));\ni__4819__auto___32249 = G__32251;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4840__auto__ = (new cljs.core.IndexedSeq(args_arr__4839__auto__.slice((1)),(0),null));\nreturn reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4840__auto__);\n\n}\n});\n\n(reagent.core.atom.cljs$core$IFn$_invoke$arity$1 = (function (x){\nreturn reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1(x);\n}));\n\n(reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic = (function (x,rest){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(reagent.ratom.atom,x,rest);\n}));\n\n/** @this {Function} */\n(reagent.core.atom.cljs$lang$applyTo = (function (seq32120){\nvar G__32121 = cljs.core.first(seq32120);\nvar seq32120__$1 = cljs.core.next(seq32120);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32121,seq32120__$1);\n}));\n\n(reagent.core.atom.cljs$lang$maxFixedArity = (1));\n\n/**\n * Takes a function and optional arguments, and returns a derefable\n *   containing the output of that function. If the function derefs\n *   Reagent atoms (or track, etc), the value will be updated whenever\n *   the atom changes.\n * \n *   In other words, `@(track foo bar)` will produce the same result\n *   as `(foo bar)`, but foo will only be called again when the atoms it\n *   depends on changes, and will only trigger updates of components when\n *   its result changes.\n * \n *   track is lazy, i.e the function is only evaluated on deref.\n */\nreagent.core.track = (function reagent$core$track(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___32255 = arguments.length;\nvar i__4819__auto___32256 = (0);\nwhile(true){\nif((i__4819__auto___32256 < len__4818__auto___32255)){\nargs__4824__auto__.push((arguments[i__4819__auto___32256]));\n\nvar G__32257 = (i__4819__auto___32256 + (1));\ni__4819__auto___32256 = G__32257;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn reagent.core.track.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(reagent.core.track.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nif(cljs.core.ifn_QMARK_(f)){\n} else {\nthrow (new Error(\"Assert failed: (ifn? f)\"));\n}\n\nreturn reagent.ratom.make_track(f,args);\n}));\n\n(reagent.core.track.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.core.track.cljs$lang$applyTo = (function (seq32125){\nvar G__32126 = cljs.core.first(seq32125);\nvar seq32125__$1 = cljs.core.next(seq32125);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32126,seq32125__$1);\n}));\n\n/**\n * An eager version of track. The function passed is called\n *   immediately, and continues to be called when needed, until stopped\n *   with dispose!.\n */\nreagent.core.track_BANG_ = (function reagent$core$track_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___32259 = arguments.length;\nvar i__4819__auto___32261 = (0);\nwhile(true){\nif((i__4819__auto___32261 < len__4818__auto___32259)){\nargs__4824__auto__.push((arguments[i__4819__auto___32261]));\n\nvar G__32262 = (i__4819__auto___32261 + (1));\ni__4819__auto___32261 = G__32262;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn reagent.core.track_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(reagent.core.track_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nif(cljs.core.ifn_QMARK_(f)){\n} else {\nthrow (new Error(\"Assert failed: (ifn? f)\"));\n}\n\nreturn reagent.ratom.make_track_BANG_(f,args);\n}));\n\n(reagent.core.track_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.core.track_BANG_.cljs$lang$applyTo = (function (seq32131){\nvar G__32132 = cljs.core.first(seq32131);\nvar seq32131__$1 = cljs.core.next(seq32131);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32132,seq32131__$1);\n}));\n\n/**\n * Stop the result of track! from updating.\n */\nreagent.core.dispose_BANG_ = (function reagent$core$dispose_BANG_(x){\nreturn reagent.ratom.dispose_BANG_(x);\n});\n/**\n * Provide a combination of value and callback, that looks like an atom.\n * \n *   The first argument can be any value, that will be returned when the\n *   result is deref'ed.\n * \n *   The second argument should be a function, that is called with the\n *   optional extra arguments provided to wrap, and the new value of the\n *   resulting 'atom'.\n * \n *   Use for example like this:\n * \n *   ```cljs\n *   (wrap (:foo @state)\n *      swap! state assoc :foo)\n *   ```\n * \n *   Probably useful only for passing to child components.\n */\nreagent.core.wrap = (function reagent$core$wrap(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___32271 = arguments.length;\nvar i__4819__auto___32272 = (0);\nwhile(true){\nif((i__4819__auto___32272 < len__4818__auto___32271)){\nargs__4824__auto__.push((arguments[i__4819__auto___32272]));\n\nvar G__32273 = (i__4819__auto___32272 + (1));\ni__4819__auto___32272 = G__32273;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((2) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((2)),(0),null)):null);\nreturn reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4825__auto__);\n});\n\n(reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic = (function (value,reset_fn,args){\nif(cljs.core.ifn_QMARK_(reset_fn)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"Expected something callable, not \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reset_fn], 0))].join(''),\"\\n\",\"(clojure.core/ifn? reset-fn)\"].join('')));\n}\n\nreturn reagent.ratom.make_wrapper(value,reset_fn,args);\n}));\n\n(reagent.core.wrap.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(reagent.core.wrap.cljs$lang$applyTo = (function (seq32142){\nvar G__32143 = cljs.core.first(seq32142);\nvar seq32142__$1 = cljs.core.next(seq32142);\nvar G__32144 = cljs.core.first(seq32142__$1);\nvar seq32142__$2 = cljs.core.next(seq32142__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32143,G__32144,seq32142__$2);\n}));\n\n/**\n * Provide a cursor into a Reagent atom.\n * \n *   Behaves like a Reagent atom but focuses updates and derefs to\n *   the specified path within the wrapped Reagent atom. e.g.,\n * \n *   ```cljs\n *   (let [c (cursor ra [:nested :content])]\n *  ... @c ;; equivalent to (get-in @ra [:nested :content])\n *  ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n *  ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n *  )\n *   ```\n * \n *   The first parameter can also be a function, that should look\n *   something like this:\n * \n *   ```cljs\n *   (defn set-get\n *  ([k] (get-in @state k))\n *  ([k v] (swap! state assoc-in k v)))\n *   ```\n * \n *   The function will be called with one argument – the path passed to\n *   cursor – when the cursor is deref'ed, and two arguments (path and\n *   new value) when the cursor is modified.\n * \n *   Given that set-get function, (and that state is a Reagent atom, or\n *   another cursor) these cursors are equivalent:\n *   `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n * \n *   Note that a cursor is lazy: its value will not change until it is\n *   used. This may be noticed with add-watch.\n */\nreagent.core.cursor = (function reagent$core$cursor(src,path){\nreturn reagent.ratom.cursor(src,path);\n});\n/**\n * Swaps the value of a to be `(apply f current-value-of-atom args)`.\n * \n *   rswap! works like swap!, except that recursive calls to rswap! on\n *   the same atom are allowed – and it always returns nil.\n */\nreagent.core.rswap_BANG_ = (function reagent$core$rswap_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___32284 = arguments.length;\nvar i__4819__auto___32285 = (0);\nwhile(true){\nif((i__4819__auto___32285 < len__4818__auto___32284)){\nargs__4824__auto__.push((arguments[i__4819__auto___32285]));\n\nvar G__32286 = (i__4819__auto___32285 + (1));\ni__4819__auto___32285 = G__32286;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((2) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((2)),(0),null)):null);\nreturn reagent.core.rswap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4825__auto__);\n});\n\n(reagent.core.rswap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (a,f,args){\nif((((!((a == null))))?(((((a.cljs$lang$protocol_mask$partition1$ & (16384))) || ((cljs.core.PROTOCOL_SENTINEL === a.cljs$core$IAtom$))))?true:(((!a.cljs$lang$protocol_mask$partition1$))?cljs.core.native_satisfies_QMARK_(cljs.core.IAtom,a):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IAtom,a))){\n} else {\nthrow (new Error(\"Assert failed: (satisfies? IAtom a)\"));\n}\n\nif(cljs.core.ifn_QMARK_(f)){\n} else {\nthrow (new Error(\"Assert failed: (ifn? f)\"));\n}\n\nif(cljs.core.truth_(a.rswapping)){\n(function (){var or__4212__auto__ = a.rswapfs;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn (a.rswapfs = []);\n}\n})().push((function (p1__32154_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,p1__32154_SHARP_,args);\n}));\n} else {\n(a.rswapping = true);\n\ntry{cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,(function (state){\nvar s = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,state,args);\nwhile(true){\nvar temp__5755__auto__ = (function (){var G__32172 = a;\nvar G__32172__$1 = (((G__32172 == null))?null:G__32172.rswapfs);\nif((G__32172__$1 == null)){\nreturn null;\n} else {\nreturn G__32172__$1.shift();\n}\n})();\nif((temp__5755__auto__ == null)){\nreturn s;\n} else {\nvar sf = temp__5755__auto__;\nvar G__32287 = (sf.cljs$core$IFn$_invoke$arity$1 ? sf.cljs$core$IFn$_invoke$arity$1(s) : sf.call(null,s));\ns = G__32287;\ncontinue;\n}\nbreak;\n}\n}));\n}finally {(a.rswapping = false);\n}}\n\nreturn null;\n}));\n\n(reagent.core.rswap_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(reagent.core.rswap_BANG_.cljs$lang$applyTo = (function (seq32158){\nvar G__32159 = cljs.core.first(seq32158);\nvar seq32158__$1 = cljs.core.next(seq32158);\nvar G__32160 = cljs.core.first(seq32158__$1);\nvar seq32158__$2 = cljs.core.next(seq32158__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32159,G__32160,seq32158__$2);\n}));\n\n/**\n * Run f using requestAnimationFrame or equivalent.\n * \n *   f will be called just before components are rendered.\n */\nreagent.core.next_tick = (function reagent$core$next_tick(f){\nreturn reagent.impl.batching.do_before_flush(f);\n});\n/**\n * Run f using requestAnimationFrame or equivalent.\n * \n *   f will be called just after any queued renders in the next animation\n *   frame (and even if no renders actually occur).\n */\nreagent.core.after_render = (function reagent$core$after_render(f){\nreturn reagent.impl.batching.do_after_render(f);\n});\n/**\n * Works just like clojure.core/partial, but the result can be compared with =\n */\nreagent.core.partial = (function reagent$core$partial(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___32289 = arguments.length;\nvar i__4819__auto___32290 = (0);\nwhile(true){\nif((i__4819__auto___32290 < len__4818__auto___32289)){\nargs__4824__auto__.push((arguments[i__4819__auto___32290]));\n\nvar G__32291 = (i__4819__auto___32290 + (1));\ni__4819__auto___32290 = G__32291;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nreturn reagent.impl.util.make_partial_fn(f,args);\n}));\n\n(reagent.core.partial.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(reagent.core.partial.cljs$lang$applyTo = (function (seq32175){\nvar G__32176 = cljs.core.first(seq32175);\nvar seq32175__$1 = cljs.core.next(seq32175);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__32176,seq32175__$1);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react","~$react-dom","~$shadow.js.shim.module$react_dom"],"~:use-macros",["^ ","~$assert-some","~$reagent.debug","~$assert-component","^D","~$assert-js-object","^D","~$assert-new-state","^D","~$assert-callable","^D"],"~:excludes",["~#set",["~$atom","~$flush","~$partial"]],"~:macros",["^ ","~$with-let",["^ ","~:arglists",["~#list",[["~$bindings","~$&","~$body"]]],"~:doc","Bind variables as with let, except that when used in a component\n  the bindings are only evaluated once. Also takes an optional finally\n  clause at the end, that is executed when the component is\n  destroyed.","^7",4,"^8",1,"^6","reagent/core.clj","~:name","~$reagent.core/with-let","~:ns","~$reagent.core","~:macro",true]],"^U","^X","~:op","^W","~:imports",null,"~:requires",["^ ","^?","^?","~$reagent.impl.util","^11","~$dom","~$reagent.dom","~$comp","~$reagent.impl.component","~$reagent.ratom","^16","^>","^?","~$cljs.core","^17","~$goog","^18","~$reagent.impl.template","^19","~$reagent.impl.batching","^1:","^15","^15","~$util","^11","~$tmpl","^19","~$ratom","^16","~$deb","^D","~$batch","^1:","^D","^D","^13","^13"],"~:seen",["^J",["~:require","~:require-macros"]],"~:uses",null,"^1B",["^ ","^X","^X","^D","^D","^1>","^D","^17","^17","^16","^16","^1=","^16"],"~:form",["^Q",["~$ns","^X",["^Q",["^1B",["^X"]]],["^Q",["~:refer-clojure","~:exclude",["^M","^K","^L"]]],["^Q",["^1A",["^>","~:as","^>"],["^19","^1H","^1<"],["^15","^1H","^14"],["^11","^1H","^1;"],["^1:","^1H","^1?"],["^16","^1H","^1="],["^D","^1H","^1>","~:refer-macros",["^C","^E","^F","^G","^H"]],["^13","^1H","^12"]]]]],"~:flags",["^ ","^1B",["^J",[]],"^1A",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^18","^17","^?","^19","^15","^11","^1:","^16","^D","^13"]],"^W","^X","~:resource-id",["~:shadow.build.classpath/resource","reagent/core.cljs"],"~:compiled-at",1629284453567,"~:resource-name","reagent/core.cljs","~:warnings",[],"~:source","(ns reagent.core\n  (:require-macros [reagent.core])\n  (:refer-clojure :exclude [partial atom flush])\n  (:require [react :as react]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.component :as comp]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :as deb :refer-macros [assert-some assert-component\n                                                  assert-js-object assert-new-state\n                                                  assert-callable]]\n            [reagent.dom :as dom]))\n\n(def is-client util/is-client)\n\n(defn create-element\n  \"Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \\\"div\\\" #js{:className \\\"foo\\\"}\n    \\\"Hi \\\" (r/as-element [:strong \\\"world!\\\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \\\"Hi\\\" [:strong \\\"world!\\\"]]\n  ```\"\n  ([type]\n   (create-element type nil))\n  ([type props]\n   (assert-js-object props)\n   (react/createElement type props))\n  ([type props child]\n   (assert-js-object props)\n   (react/createElement type props child))\n  ([type props child & children]\n   (assert-js-object props)\n   (apply react/createElement type props child children)))\n\n(defn as-element\n  \"Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector.\"\n  [form]\n  (tmpl/as-element form))\n\n(defn adapt-react-class\n  \"Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms.\"\n  [c]\n  (assert-some c \"Component\")\n  (tmpl/adapt-react-class c))\n\n(defn reactify-component\n  \"Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map.\"\n  [c]\n  (assert-some c \"Component\")\n  (comp/reactify-component c))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  {:deprecated \"0.10.0\"}\n  ([comp container]\n   (dom/render comp container))\n  ([comp container callback]\n   (dom/render comp container callback)))\n\n(defn unmount-component-at-node\n  \"Remove a component from the given DOM node.\"\n  {:deprecated \"0.10.0\"}\n  [container]\n  (dom/unmount-component-at-node container))\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  {:deprecated \"0.10.0\"}\n  []\n  (ratom/flush!)\n  (dom/force-update-all)\n  (batch/flush-after-render))\n\n(defn create-class\n  \"Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics.\"\n  [spec]\n  (comp/create-class spec))\n\n\n(defn current-component\n  \"Returns the current React component (a.k.a `this`) in a component\n  function.\"\n  []\n  comp/*current-component*)\n\n(defn state-atom\n  \"Returns an atom containing a components state.\"\n  [this]\n  (assert-component this)\n  (comp/state-atom this))\n\n(defn state\n  \"Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`\"\n  [this]\n  (assert-component this)\n  (deref (state-atom this)))\n\n(defn replace-state\n  \"Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`\"\n  [this new-state]\n  (assert-component this)\n  (assert-new-state new-state)\n  (reset! (state-atom this) new-state))\n\n(defn set-state\n  \"Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`\"\n  [this new-state]\n  (assert-component this)\n  (assert-new-state new-state)\n  (swap! (state-atom this) merge new-state))\n\n(defn force-update\n  \"Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.\"\n  ([this]\n   (force-update this false))\n  ([this deep]\n   (ratom/flush!)\n   (util/force-update this deep)\n   (batch/flush-after-render)))\n\n(defn props\n  \"Returns the props passed to a component.\"\n  [this]\n  (assert-component this)\n  (comp/get-props this))\n\n(defn children\n  \"Returns the children passed to a component.\"\n  [this]\n  (assert-component this)\n  (comp/get-children this))\n\n(defn argv\n  \"Returns the entire Hiccup form passed to the component.\"\n  [this]\n  (assert-component this)\n  (comp/get-argv this))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  {:deprecated \"0.10.0\"}\n  [this]\n  (dom/dom-node this))\n\n(defn class-names\n  \"Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types\"\n  ([])\n  ([class] (util/class-names class))\n  ([class1 class2] (util/class-names class1 class2))\n  ([class1 class2 & others] (apply util/class-names class1 class2 others)))\n\n(defn merge-props\n  \"Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done.\"\n  ([] (util/merge-props))\n  ([defaults] (util/merge-props defaults))\n  ([defaults props] (util/merge-props defaults props))\n  ([defaults props & others] (apply util/merge-props defaults props others)))\n\n(defn flush\n  \"Render dirty components immediately.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there.\"\n  []\n  (batch/flush))\n\n;; Ratom\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered.\"\n  ([x] (ratom/atom x))\n  ([x & rest] (apply ratom/atom x rest)))\n\n(defn track\n  \"Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.\"\n  [f & args]\n  {:pre [(ifn? f)]}\n  (ratom/make-track f args))\n\n(defn track!\n  \"An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.\"\n  [f & args]\n  {:pre [(ifn? f)]}\n  (ratom/make-track! f args))\n\n(defn dispose!\n  \"Stop the result of track! from updating.\"\n  [x]\n  (ratom/dispose! x))\n\n(defn wrap\n  \"Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components.\"\n  [value reset-fn & args]\n  (assert-callable reset-fn)\n  (ratom/make-wrapper value reset-fn args))\n\n\n;; RCursor\n\n(defn cursor\n  \"Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument – the path passed to\n  cursor – when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch.\"\n  ([src path]\n   (ratom/cursor src path)))\n\n\n;; Utilities\n\n(defn rswap!\n  \"Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil.\"\n  [a f & args]\n  {:pre [(satisfies? IAtom a)\n         (ifn? f)]}\n  (if (.-rswapping a)\n    (-> (or (.-rswapfs a)\n            (set! (.-rswapfs a) (array)))\n        (.push #(apply f % args)))\n    (do (set! (.-rswapping a) true)\n        (try (swap! a (fn [state]\n                        (loop [s (apply f state args)]\n                          (if-some [sf (some-> a .-rswapfs .shift)]\n                            (recur (sf s))\n                            s))))\n             (finally\n               (set! (.-rswapping a) false)))))\n  nil)\n\n(defn next-tick\n  \"Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered.\"\n  [f]\n  (batch/do-before-flush f))\n\n(defn after-render\n  \"Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur).\"\n  [f]\n  (batch/do-after-render f))\n\n(defn partial\n  \"Works just like clojure.core/partial, but the result can be compared with =\"\n  [f & args]\n  (util/make-partial-fn f args))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["reagent.core/is-client","reagent.impl.util/is-client","var_args","G__32046","reagent.core/create-element","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq32042","G__32043","cljs.core/first","cljs.core/next","G__32044","G__32045","self__4805__auto__","type","reagent.core.create_element","props","cljs.core/map?","js/Error","cljs.core.pr_str","js/shadow.js.shim.module$react.createElement","child","children","cljs.core.apply","reagent.core/as-element","form","reagent.impl.template/as-element","reagent.core/adapt-react-class","c","reagent.impl.template/adapt-react-class","reagent.core/reactify-component","reagent.impl.component/reactify-component","G__32067","reagent.core/render","comp","container","reagent.dom.render","callback","reagent.core/unmount-component-at-node","reagent.dom/unmount-component-at-node","reagent.core/force-update-all","reagent.ratom/flush!","reagent.dom/force-update-all","reagent.impl.batching/flush-after-render","reagent.core/create-class","spec","reagent.impl.component/create-class","reagent.core/current-component","reagent.impl.component/*current-component*","reagent.core/state-atom","this","reagent.impl.component/reagent-component?","reagent.impl.component/state-atom","reagent.core/state","cljs.core/deref","reagent.core/replace-state","new-state","cljs.core/reset!","reagent.core/set-state","cljs.core.swap_BANG_","cljs.core/merge","G__32083","reagent.core/force-update","reagent.core.force_update","deep","reagent.impl.util/force-update","reagent.core/props","reagent.impl.component/get-props","reagent.core/children","reagent.impl.component/get-children","reagent.core/argv","reagent.impl.component/get-argv","reagent.core/dom-node","reagent.dom/dom-node","G__32098","reagent.core/class-names","seq32095","G__32096","G__32097","class","reagent.impl.util.class_names","class1","class2","others","reagent.impl.util/class-names","G__32113","reagent.core/merge-props","seq32110","G__32111","G__32112","reagent.impl.util.merge_props","defaults","reagent.impl.util/merge-props","reagent.core/flush","reagent.impl.batching/flush","G__32122","reagent.core/atom","seq32120","G__32121","x","reagent.ratom.atom","rest","reagent.ratom/atom","args__4824__auto__","argseq__4825__auto__","reagent.core/track","seq32125","G__32126","f","args","cljs.core/ifn?","reagent.ratom/make-track","reagent.core/track!","seq32131","G__32132","reagent.ratom/make-track!","reagent.core/dispose!","reagent.ratom/dispose!","reagent.core/wrap","seq32142","G__32143","G__32144","value","reset-fn","reagent.ratom/make-wrapper","reagent.core/cursor","src","path","reagent.ratom/cursor","reagent.core/rswap!","seq32158","G__32159","G__32160","a","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","or__4212__auto__","p1__32154#","state","s","temp__5755__auto__","sf","G__32172","reagent.core/next-tick","reagent.impl.batching/do-before-flush","reagent.core/after-render","reagent.impl.batching/do-after-render","reagent.core/partial","seq32175","G__32176","reagent.impl.util/make-partial-fn"]],"~:used-vars",["^J",["~$reagent.core/next-tick","~$reagent.impl.component/get-children","~$cljs.core/PROTOCOL_SENTINEL","~$reagent.impl.batching/flush","~$reagent.core/dispose!","~$reagent.ratom/make-track!","~$cljs.core/IAtom","~$reagent.core/argv","~$reagent.dom/unmount-component-at-node","~$reagent.core/render","~$reagent.core/rswap!","~$reagent.core/children","~$reagent.core/flush","~$cljs.core/ifn?","~$reagent.core/create-class","~$reagent.core/partial","~$cljs.core/IndexedSeq","~$reagent.impl.component/reagent-component?","~$cljs.core/deref","~$cljs.core/apply","~$reagent.ratom/flush!","~$reagent.core/force-update-all","~$reagent.core/reactify-component","~$reagent.core/atom","~$reagent.core/current-component","~$reagent.impl.batching/do-before-flush","~$cljs.core/pr-str","~$reagent.core/adapt-react-class","~$reagent.core/unmount-component-at-node","~$reagent.impl.batching/flush-after-render","~$reagent.ratom/make-wrapper","~$cljs.core/native-satisfies?","~$reagent.core/wrap","~$reagent.core/after-render","~$reagent.impl.util/make-partial-fn","~$cljs.core/map?","~$cljs.core/reset!","~$reagent.core/as-element","~$reagent.ratom/dispose!","~$reagent.core/merge-props","~$reagent.core/state-atom","~$cljs.core/swap!","~$reagent.core/state","~$reagent.core/is-client","~$js/shadow.js.shim.module$react.createElement","~$reagent.core/track!","~$reagent.dom/render","~$reagent.core/dom-node","~$reagent.impl.util/class-names","~$reagent.core/cursor","~$reagent.core/replace-state","~$reagent.impl.component/create-class","~$reagent.impl.template/adapt-react-class","~$reagent.impl.component/get-argv","~$reagent.impl.util/merge-props","~$reagent.impl.util/force-update","~$cljs.core/next","~$reagent.ratom/cursor","~$reagent.dom/dom-node","~$reagent.impl.component/reactify-component","~$cljs.core/not","~$reagent.ratom/make-track","~$reagent.core/track","~$reagent.core/props","~$reagent.core/create-element","~$reagent.impl.component/*current-component*","~$reagent.impl.component/get-props","~$reagent.impl.util/is-client","~$cljs.core/first","~$reagent.impl.batching/do-after-render","~$reagent.core/force-update","~$reagent.dom/force-update-all","~$reagent.ratom/atom","~$reagent.core/class-names","~$cljs.core/merge","~$js/Error","~$reagent.impl.component/state-atom","~$reagent.impl.template/as-element","~$reagent.core/set-state"]]],"~:cache-keys",["~#cmap",[["^1N","reagent/impl/batching.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^18","^17","^D","^11"]]],["^1N","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","~$goog.dom.HtmlElement"]]],["^1N","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","~$goog.array","~$goog.asserts"]]],["^1N","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1N","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^40"]]],["^1N","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y"]]],["^1N","reagent/impl/util.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","~$clojure.string"]]],["^1N","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","reagent/ratom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","^11","^D","^1:","~$clojure.set","^3["]]],["^1N","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","reagent/impl/template.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","^?","^47","~$clojure.walk","^11","^15","^1:","^16","^D","^3["]]],["^1N","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y"]]],"~:SHADOW-TIMESTAMP",[1627822722000,1627822722000,1627822708000],["^1N","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","~$goog.reflect"]]],["^1N","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","~$goog.fs.blob","^41","~$goog.html.SafeScript","~$goog.html.trustedtypes","^43","^44","^45","^46"]]],["^1N","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X","^3Y","~$goog.html.SafeUrl","^45","^46","^40"]]],["^1N","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4=","~$goog.html.SafeStyle","^4?","^42","~$goog.html.uncheckedconversions","^45","^40"]]],["^1N","reagent/impl/component.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","^3[","^?","^11","^1:","^16","^D"]]],["^1N","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17"]]],["^1N","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1N","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X","^3Y","~$goog.dom.TagName","~$goog.dom.tags","^4=","^4C","~$goog.html.SafeStyleSheet","^4?","^42","^4>","^43","^44","~$goog.labs.userAgent.browser","^3[","^45","^46","^40"]]],["^1N","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3["]]],["^1N","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X"]]],["^1N","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1N","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X","^3Y","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1N","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",[]]],["^1N","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X","^3["]]],["^1N","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","^4M","~$goog.string.StringBuffer"]]],["~:shadow.build.js-support/require","react"],["^?","shadow.js.shim.module$react.js","require","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","~$goog.dom.safe","^4D","^45","^40"]]],["^1N","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^40"]]],["^1N","reagent/core.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","^?","^19","^15","^11","^1:","^16","^D","^13"]]],["^1N","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3X","^3Y","^4A","~$goog.math"]]],["^1N","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","^4B","^4=","^4C","^4I","^4?","^42","^45","^40","^43"]]],["^1N","reagent/dom.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17","^A","^11","^19","^1:","^16"]]],["^1N","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","~$goog.math.Long","~$goog.math.Integer","^4M","^3[","^3X","~$goog.Uri","^4S"]]],["^1N","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^45","^46","^4>","^3Y"]]],["^1N","reagent/debug.cljs"],["1a88fae22cd0f7f66bb181aa520da264a82f6942","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17"]]],["^1N","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^45","^4C","^46","^3X","^3[","^3Y","^40"]]],["^1N","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^4;"]]],["^4T","react-dom"],["^A","shadow.js.shim.module$react_dom.js","require","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18"]]],["^1N","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^17"]]],["^1N","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","^4M"]]],["^1N","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3S",["^ ","^3T",null,"^3U",["^J",[]],"^3V",["^18","^3Y","^46"]]]]],"~:clj-info",["^ ","jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1617974188000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/ratom.clj",1617974198000,"jar:file:/Users/margoobraztsova/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1617974198000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/core.clj",1617974198000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1617974198000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1627822708000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/core.cljs","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","^C","^D","^E","^D","^F","^D","^G","^D","^H","^D"],"^I",["^J",["^K","^L","^M"]],"^N",["^ ","^O",["^ ","^P",["^Q",[["^R","~$&","^S"]]],"^T","Bind variables as with let, except that when used in a component\n  the bindings are only evaluated once. Also takes an optional finally\n  clause at the end, that is executed when the component is\n  destroyed.","^7",4,"^8",1,"^6","reagent/core.clj","^U","^V","^W","^X","^Y",true]],"~:shadow/js-access-properties",["^J",["createElement"]],"^U","^X","^[",null,"^10",["^ ","^?","^?","^11","^11","^12","^13","^14","^15","^16","^16","^>","^?","^17","^17","^18","^18","^19","^19","^1:","^1:","^15","^15","^1;","^11","^1<","^19","^1=","^16","^1>","^D","^1?","^1:","^D","^D","^13","^13"],"^1@",["^J",["^1A","^1B"]],"~:shadow/js-access-global",["^J",["Error"]],"^1C",null,"~:defs",["^ ","~$class-names",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/core.cljs","^7",218,"^8",7,"^9",218,"^:",18,"^P",["^Q",["~$quote",["^Q",[[],["~$class"],["~$class1","~$class2"],["^5W","^5X","~$&","~$others"]]]]],"^T","Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^5V"],["^5W","^5X"]],"^P",["^Q",[[],["^5V"],["^5W","^5X"],["^5W","^5X","~$&","^5Y"]]],"~:arglists-meta",["^Q",[null,null,null,null]]]],"^U","^3K","^6","reagent/core.cljs","^:",18,"^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[[],["^5V"],["^5W","^5X"]],"^P",["^Q",[[],["^5V"],["^5W","^5X"],["^5W","^5X","~$&","^5Y"]]],"^63",["^Q",[null,null,null,null]]],"^62",[[],["^5V"],["^5W","^5X"]],"~:protocol-impl",null,"^60",2,"^63",["^Q",[null,null,null,null]],"^8",1,"^5[",true,"~:methods",[["^ ","^60",0,"^5[",false,"~:tag","~$clj-nil"],["^ ","^60",1,"^5[",false,"^66",["^J",[null,"~$string","^67"]]],["^ ","^60",2,"^5[",false,"^66",["^J",[null,"^68","^67"]]],["^ ","^60",2,"^5[",true,"^66","~$any"]],"^7",218,"^9",218,"^61",2,"~:fn-var",true,"^P",["^Q",[[],["^5V"],["^5W","^5X"],["^5W","^5X","~$&","^5Y"]]],"^T","Function which normalizes and combines class values to a string\n\n  Reagent allows classes to be defined as:\n  - Strings\n  - Named objects (Symbols or Keywords)\n  - Collections of previous types"],"~$after-render",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",379,"^8",7,"^9",379,"^:",19,"^P",["^Q",["^5U",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur)."],"^U","^2O","^6","reagent/core.cljs","^:",19,"^62",["^Q",[["~$f"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",379,"~:ret-tag","^69","^9",379,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just after any queued renders in the next animation\n  frame (and even if no renders actually occur)."],"~$current-component",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",147,"^8",7,"^9",147,"^:",24,"^P",["^Q",["^5U",["^Q",[[]]]]],"^T","Returns the current React component (a.k.a `this`) in a component\n  function."],"^U","^2F","^6","reagent/core.cljs","^:",24,"^62",["^Q",[[]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",147,"^6<","^69","^9",147,"^61",0,"^6:",true,"^P",["^Q",["^5U",["^Q",[[]]]]],"^T","Returns the current React component (a.k.a `this`) in a component\n  function."],"~$adapt-react-class",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",52,"^8",7,"^9",52,"^:",24,"^P",["^Q",["^5U",["^Q",[["~$c"]]]]],"^T","Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms."],"^U","^2I","^6","reagent/core.cljs","^:",24,"^62",["^Q",[["~$c"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",52,"^6<","~$reagent.impl.template/NativeWrapper","^9",52,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["~$c"]]]]],"^T","Returns an adapter for a native React class, that may be used\n  just like a Reagent component function or class in Hiccup forms."],"^K",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",250,"^8",7,"^9",250,"^:",11,"^P",["^Q",["^5U",["^Q",[["~$x"],["~$x","~$&","~$rest"]]]]],"^T","Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered.","^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["~$x"]],"^P",["^Q",[["~$x"],["~$x","~$&","^6@"]]],"^63",["^Q",[null,null]]]],"^U","^2E","^6","reagent/core.cljs","^:",11,"^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["~$x"]],"^P",["^Q",[["~$x"],["~$x","~$&","^6@"]]],"^63",["^Q",[null,null]]],"^62",[["~$x"]],"^64",null,"^60",1,"^63",["^Q",[null,null]],"^8",1,"^5[",true,"^65",[["^ ","^60",1,"^5[",false,"^66","~$reagent.ratom/RAtom"],["^ ","^60",1,"^5[",true,"^66","^69"]],"^7",250,"^9",250,"^61",1,"^6:",true,"^P",["^Q",[["~$x"],["~$x","~$&","^6@"]]],"^T","Like clojure.core/atom, except that it keeps track of derefs.\n  Reagent components that derefs one of these are automatically\n  re-rendered."],"~$merge-props",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",230,"^8",7,"^9",230,"^:",18,"^P",["^Q",["^5U",["^Q",[[],["~$defaults"],["^6C","~$props"],["^6C","^6D","~$&","^5Y"]]]]],"^T","Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done.","^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[[],["^6C"],["^6C","^6D"]],"^P",["^Q",[[],["^6C"],["^6C","^6D"],["^6C","^6D","~$&","^5Y"]]],"^63",["^Q",[null,null,null,null]]]],"^U","^2U","^6","reagent/core.cljs","^:",18,"^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[[],["^6C"],["^6C","^6D"]],"^P",["^Q",[[],["^6C"],["^6C","^6D"],["^6C","^6D","~$&","^5Y"]]],"^63",["^Q",[null,null,null,null]]],"^62",[[],["^6C"],["^6C","^6D"]],"^64",null,"^60",2,"^63",["^Q",[null,null,null,null]],"^8",1,"^5[",true,"^65",[["^ ","^60",0,"^5[",false,"^66","^67"],["^ ","^60",1,"^5[",false,"^66",["^J",[null,"~$clj","^69"]]],["^ ","^60",2,"^5[",false,"^66",["^J",[null,"^6E","^69","^67"]]],["^ ","^60",2,"^5[",true,"^66","^69"]],"^7",230,"^9",230,"^61",2,"^6:",true,"^P",["^Q",[[],["^6C"],["^6C","^6D"],["^6C","^6D","~$&","^5Y"]]],"^T","Utility function that merges some maps, handling `:class` and `:style`.\n\n  The :class value is always normalized (using `class-names`) even if no\n  merging is done."],"~$force-update-all",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",87,"^8",7,"^9",87,"^:",23,"^P",["^Q",["^5U",["^Q",[[]]]]],"^T","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.","~:deprecated","0.10.0"],"^U","^2C","^6","reagent/core.cljs","^:",23,"^62",["^Q",[[]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",87,"^6G","0.10.0","^6<","^69","^9",87,"^61",0,"^6:",true,"^P",["^Q",["^5U",["^Q",[[]]]]],"^T","Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead."],"~$as-element",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^P",["^Q",["^5U",["^Q",[["~$form"]]]]],"^T","Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector."],"^U","^2S","^6","reagent/core.cljs","^:",17,"^62",["^Q",[["^6I"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",46,"^6<",["^J",[null,"^69","~$js","^68"]],"^9",46,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6I"]]]]],"^T","Turns a vector of Hiccup syntax into a React element. Returns form\n  unchanged if it is not a vector."],"~$rswap!",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",350,"^8",7,"^9",350,"^:",13,"^P",["^Q",["^5U",["^Q",[["~$a","~$f","~$&","~$args"]]]]],"^T","Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil.","^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[["^Q",["~$a","~$f","^6L"]]],"^P",["^Q",[["~$a","~$f","~$&","^6L"]]],"^63",["^Q",[null]]]],"^U","^28","^6","reagent/core.cljs","^:",13,"^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[["^Q",["~$a","~$f","^6L"]]],"^P",["^Q",[["~$a","~$f","~$&","^6L"]]],"^63",["^Q",[null]]],"^62",[["^Q",["~$a","~$f","^6L"]]],"^64",null,"^60",2,"^63",["^Q",[null]],"^8",1,"^5[",true,"^65",[["^ ","^60",2,"^5[",true,"^66","^67"]],"^7",350,"^6<","^69","^9",350,"^61",2,"^6:",true,"^P",["^Q",[["~$a","~$f","~$&","^6L"]]],"^T","Swaps the value of a to be `(apply f current-value-of-atom args)`.\n\n  rswap! works like swap!, except that recursive calls to rswap! on\n  the same atom are allowed – and it always returns nil."],"~$next-tick",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",372,"^8",7,"^9",372,"^:",16,"^P",["^Q",["^5U",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"^U","^1Z","^6","reagent/core.cljs","^:",16,"^62",["^Q",[["~$f"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",372,"^6<","^69","^9",372,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["~$f"]]]]],"^T","Run f using requestAnimationFrame or equivalent.\n\n  f will be called just before components are rendered."],"~$track",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",257,"^8",7,"^9",257,"^:",12,"^P",["^Q",["^5U",["^Q",[["~$f","~$&","^6L"]]]]],"^T","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref.","^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["^Q",["~$f","^6L"]]],"^P",["^Q",[["~$f","~$&","^6L"]]],"^63",["^Q",[null]]]],"^U","^3@","^6","reagent/core.cljs","^:",12,"^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["^Q",["~$f","^6L"]]],"^P",["^Q",[["~$f","~$&","^6L"]]],"^63",["^Q",[null]]],"^62",[["^Q",["~$f","^6L"]]],"^64",null,"^60",1,"^63",["^Q",[null]],"^8",1,"^5[",true,"^65",[["^ ","^60",1,"^5[",true,"^66","~$reagent.ratom/Track"]],"^7",257,"^6<","^69","^9",257,"^61",1,"^6:",true,"^P",["^Q",[["~$f","~$&","^6L"]]],"^T","Takes a function and optional arguments, and returns a derefable\n  containing the output of that function. If the function derefs\n  Reagent atoms (or track, etc), the value will be updated whenever\n  the atom changes.\n\n  In other words, `@(track foo bar)` will produce the same result\n  as `(foo bar)`, but foo will only be called again when the atoms it\n  depends on changes, and will only trigger updates of components when\n  its result changes.\n\n  track is lazy, i.e the function is only evaluated on deref."],"^6D",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",194,"^8",7,"^9",194,"^:",12,"^P",["^Q",["^5U",["^Q",[["~$this"]]]]],"^T","Returns the props passed to a component."],"^U","^3A","^6","reagent/core.cljs","^:",12,"^62",["^Q",[["^6P"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",194,"^6<",["^J",[null,"^69","^67"]],"^9",194,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the props passed to a component."],"~$dispose!",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",281,"^8",7,"^9",281,"^:",15,"^P",["^Q",["^5U",["^Q",[["~$x"]]]]],"^T","Stop the result of track! from updating."],"^U","^22","^6","reagent/core.cljs","^:",15,"^62",["^Q",[["~$x"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",281,"^6<","^69","^9",281,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["~$x"]]]]],"^T","Stop the result of track! from updating."],"~$state-atom",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",153,"^8",7,"^9",153,"^:",17,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns an atom containing a components state."],"^U","^2V","^6","reagent/core.cljs","^:",17,"^62",["^Q",[["^6P"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",153,"^6<",["^J",[null,"^69"]],"^9",153,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns an atom containing a components state."],"^L",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",240,"^8",7,"^9",240,"^:",12,"^P",["^Q",["^5U",["^Q",[[]]]]],"^T","Render dirty components immediately.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there."],"^U","^2:","^6","reagent/core.cljs","^:",12,"^62",["^Q",[[]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",240,"^6<","^69","^9",240,"^61",0,"^6:",true,"^P",["^Q",["^5U",["^Q",[[]]]]],"^T","Render dirty components immediately.\n\n  Note that this may not work in event handlers, since React.js does\n  batching of updates there."],"~$children",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",200,"^8",7,"^9",200,"^:",15,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the children passed to a component."],"^U","^29","^6","reagent/core.cljs","^:",15,"^62",["^Q",[["^6P"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",200,"^6<",["^J",[null,"^6E","^69","^67"]],"^9",200,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the children passed to a component."],"~$wrap",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",286,"^8",7,"^9",286,"^:",11,"^P",["^Q",["^5U",["^Q",[["~$value","~$reset-fn","~$&","^6L"]]]]],"^T","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components.","^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[["^Q",["^6U","^6V","^6L"]]],"^P",["^Q",[["^6U","^6V","~$&","^6L"]]],"^63",["^Q",[null]]]],"^U","^2N","^6","reagent/core.cljs","^:",11,"^5Z",["^ ","^5[",true,"^60",2,"^61",2,"^62",[["^Q",["^6U","^6V","^6L"]]],"^P",["^Q",[["^6U","^6V","~$&","^6L"]]],"^63",["^Q",[null]]],"^62",[["^Q",["^6U","^6V","^6L"]]],"^64",null,"^60",2,"^63",["^Q",[null]],"^8",1,"^5[",true,"^65",[["^ ","^60",2,"^5[",true,"^66","~$reagent.ratom/Wrapper"]],"^7",286,"^6<","^69","^9",286,"^61",2,"^6:",true,"^P",["^Q",[["^6U","^6V","~$&","^6L"]]],"^T","Provide a combination of value and callback, that looks like an atom.\n\n  The first argument can be any value, that will be returned when the\n  result is deref'ed.\n\n  The second argument should be a function, that is called with the\n  optional extra arguments provided to wrap, and the new value of the\n  resulting 'atom'.\n\n  Use for example like this:\n\n  ```cljs\n  (wrap (:foo @state)\n        swap! state assoc :foo)\n  ```\n\n  Probably useful only for passing to child components."],"~$reactify-component",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",59,"^8",7,"^9",59,"^:",25,"^P",["^Q",["^5U",["^Q",[["~$c"]]]]],"^T","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"^U","^2D","^6","reagent/core.cljs","^:",25,"^62",["^Q",[["~$c"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",59,"^6<",["^J",[null,"^69"]],"^9",59,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["~$c"]]]]],"^T","Returns an adapter for a Reagent component, that may be used from\n  React, for example in JSX. A single argument, props, is passed to\n  the component, converted to a map."],"~$unmount-component-at-node",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",81,"^8",7,"^9",81,"^:",32,"^P",["^Q",["^5U",["^Q",[["~$container"]]]]],"^T","Remove a component from the given DOM node.","^6G","0.10.0"],"^U","^2J","^6","reagent/core.cljs","^:",32,"^62",["^Q",[["^6Z"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",81,"^6G","0.10.0","^6<","^6J","^9",81,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6Z"]]]]],"^T","Remove a component from the given DOM node."],"~$cursor",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",311,"^8",7,"^9",311,"^:",13,"^P",["^Q",["^5U",["^Q",[["~$src","~$path"]]]]],"^T","Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument – the path passed to\n  cursor – when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch."],"^U","^33","^6","reagent/core.cljs","^:",13,"^62",["^Q",[["^70","^71"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",311,"^6<","~$reagent.ratom/RCursor","^9",311,"^61",2,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^70","^71"]]]]],"^T","Provide a cursor into a Reagent atom.\n\n  Behaves like a Reagent atom but focuses updates and derefs to\n  the specified path within the wrapped Reagent atom. e.g.,\n\n  ```cljs\n  (let [c (cursor ra [:nested :content])]\n    ... @c ;; equivalent to (get-in @ra [:nested :content])\n    ... (reset! c 42) ;; equivalent to (swap! ra assoc-in [:nested :content] 42)\n    ... (swap! c inc) ;; equivalence to (swap! ra update-in [:nested :content] inc)\n    )\n  ```\n\n  The first parameter can also be a function, that should look\n  something like this:\n\n  ```cljs\n  (defn set-get\n    ([k] (get-in @state k))\n    ([k v] (swap! state assoc-in k v)))\n  ```\n\n  The function will be called with one argument – the path passed to\n  cursor – when the cursor is deref'ed, and two arguments (path and\n  new value) when the cursor is modified.\n\n  Given that set-get function, (and that state is a Reagent atom, or\n  another cursor) these cursors are equivalent:\n  `(cursor state [:foo])` and `(cursor set-get [:foo])`.\n\n  Note that a cursor is lazy: its value will not change until it is\n  used. This may be noticed with add-watch."],"~$state",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",159,"^8",7,"^9",159,"^:",12,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`"],"^U","^2X","^6","reagent/core.cljs","^:",12,"^62",["^Q",[["^6P"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",159,"^6<","^69","^9",159,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the state of a component, as set with replace-state or set-state.\n  Equivalent to `(deref (r/state-atom this))`"],"~$dom-node",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",212,"^8",7,"^9",212,"^:",15,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the root DOM node of a mounted component.","^6G","0.10.0"],"^U","^31","^6","reagent/core.cljs","^:",15,"^62",["^Q",[["^6P"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",212,"^6G","0.10.0","^6<","^6J","^9",212,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the root DOM node of a mounted component."],"~$track!",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",273,"^8",7,"^9",273,"^:",13,"^P",["^Q",["^5U",["^Q",[["~$f","~$&","^6L"]]]]],"^T","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!.","^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["^Q",["~$f","^6L"]]],"^P",["^Q",[["~$f","~$&","^6L"]]],"^63",["^Q",[null]]]],"^U","^2[","^6","reagent/core.cljs","^:",13,"^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["^Q",["~$f","^6L"]]],"^P",["^Q",[["~$f","~$&","^6L"]]],"^63",["^Q",[null]]],"^62",[["^Q",["~$f","^6L"]]],"^64",null,"^60",1,"^63",["^Q",[null]],"^8",1,"^5[",true,"^65",[["^ ","^60",1,"^5[",true,"^66","^69"]],"^7",273,"^6<","^69","^9",273,"^61",1,"^6:",true,"^P",["^Q",[["~$f","~$&","^6L"]]],"^T","An eager version of track. The function passed is called\n  immediately, and continues to be called when needed, until stopped\n  with dispose!."],"~$is-client",["^ ","^U","^2Y","^6","reagent/core.cljs","^7",15,"^8",1,"^9",15,"^:",15,"^5",["^ ","^6","reagent/core.cljs","^7",15,"^8",6,"^9",15,"^:",15],"^66","~$boolean"],"~$replace-state",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",166,"^8",7,"^9",166,"^:",20,"^P",["^Q",["^5U",["^Q",[["^6P","~$new-state"]]]]],"^T","Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`"],"^U","^34","^6","reagent/core.cljs","^:",20,"^62",["^Q",[["^6P","^79"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",166,"^6<",["^J",[null,"^69"]],"^9",166,"^61",2,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P","^79"]]]]],"^T","Set state of a component.\n  Equivalent to `(reset! (state-atom this) new-state)`"],"^M",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",387,"^8",7,"^9",387,"^:",14,"^P",["^Q",["^5U",["^Q",[["~$f","~$&","^6L"]]]]],"^T","Works just like clojure.core/partial, but the result can be compared with =","^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["^Q",["~$f","^6L"]]],"^P",["^Q",[["~$f","~$&","^6L"]]],"^63",["^Q",[null]]]],"^U","^2=","^6","reagent/core.cljs","^:",14,"^5Z",["^ ","^5[",true,"^60",1,"^61",1,"^62",[["^Q",["~$f","^6L"]]],"^P",["^Q",[["~$f","~$&","^6L"]]],"^63",["^Q",[null]]],"^62",[["^Q",["~$f","^6L"]]],"^64",null,"^60",1,"^63",["^Q",[null]],"^8",1,"^5[",true,"^65",[["^ ","^60",1,"^5[",true,"^66","~$reagent.impl.util/PartialFn"]],"^7",387,"^6<","^69","^9",387,"^61",1,"^6:",true,"^P",["^Q",[["~$f","~$&","^6L"]]],"^T","Works just like clojure.core/partial, but the result can be compared with ="],"~$set-state",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",174,"^8",7,"^9",174,"^:",16,"^P",["^Q",["^5U",["^Q",[["^6P","^79"]]]]],"^T","Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`"],"^U","^3P","^6","reagent/core.cljs","^:",16,"^62",["^Q",[["^6P","^79"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",174,"^6<",["^J",[null,"^69"]],"^9",174,"^61",2,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P","^79"]]]]],"^T","Merge component state with new-state.\n  Equivalent to `(swap! (state-atom this) merge new-state)`"],"~$argv",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",206,"^8",7,"^9",206,"^:",11,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the entire Hiccup form passed to the component."],"^U","^25","^6","reagent/core.cljs","^:",11,"^62",["^Q",[["^6P"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",206,"^6<",["^J",["~$cljs.core/IVector","^69"]],"^9",206,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^6P"]]]]],"^T","Returns the entire Hiccup form passed to the component."],"~$render",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^:",13,"^5Z",["^ ","^5[",false,"^60",3,"^61",3,"^62",[["^14","^6Z"],["^14","^6Z","~$callback"]],"^P",["^Q",[["^14","^6Z"],["^14","^6Z","^7?"]]],"^63",["^Q",[null,null]]],"^8",7,"^7",67,"^6G","0.10.0","^9",67,"^P",["^Q",["^5U",["^Q",[["^14","^6Z"],["^14","^6Z","^7?"]]]]],"^T","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."],"^U","^27","^6","reagent/core.cljs","^:",13,"^5Z",["^ ","^5[",false,"^60",3,"^61",3,"^62",[["^14","^6Z"],["^14","^6Z","^7?"]],"^P",["^Q",[["^14","^6Z"],["^14","^6Z","^7?"]]],"^63",["^Q",[null,null]]],"^62",[["^14","^6Z"],["^14","^6Z","^7?"]],"^64",null,"^60",3,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^65",[["^ ","^60",2,"^5[",false,"^66","^69"],["^ ","^60",3,"^5[",false,"^66","^69"]],"^7",67,"^6G","0.10.0","^9",67,"^61",3,"^6:",true,"^P",["^Q",[["^14","^6Z"],["^14","^6Z","^7?"]]],"^T","Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance."],"~$force-update",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",182,"^8",7,"^9",182,"^:",19,"^P",["^Q",["^5U",["^Q",[["^6P"],["^6P","~$deep"]]]]],"^T","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed.","^5Z",["^ ","^5[",false,"^60",2,"^61",2,"^62",[["^6P"],["^6P","^7A"]],"^P",["^Q",[["^6P"],["^6P","^7A"]]],"^63",["^Q",[null,null]]]],"^U","^3H","^6","reagent/core.cljs","^:",19,"^5Z",["^ ","^5[",false,"^60",2,"^61",2,"^62",[["^6P"],["^6P","^7A"]],"^P",["^Q",[["^6P"],["^6P","^7A"]]],"^63",["^Q",[null,null]]],"^62",[["^6P"],["^6P","^7A"]],"^64",null,"^60",2,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^65",[["^ ","^60",1,"^5[",false,"^66","^69"],["^ ","^60",2,"^5[",false,"^66","^69"]],"^7",182,"^9",182,"^61",2,"^6:",true,"^P",["^Q",[["^6P"],["^6P","^7A"]]],"^T","Force a component to re-render immediately.\n\n  If the second argument is true, child components will also be\n  re-rendered, even is their arguments have not changed."],"~$create-class",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",103,"^8",7,"^9",103,"^:",19,"^P",["^Q",["^5U",["^Q",[["~$spec"]]]]],"^T","Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics."],"^U","^2<","^6","reagent/core.cljs","^:",19,"^62",["^Q",[["^7C"]]],"^64",null,"^63",["^Q",[null,null]],"^8",1,"^5[",false,"^7",103,"^6<","~$function","^9",103,"^61",1,"^6:",true,"^P",["^Q",["^5U",["^Q",[["^7C"]]]]],"^T","Creates JS class based on provided Clojure map, for example:\n\n  ```cljs\n  {;; Constructor\n   :constructor (fn [this props])\n   :get-initial-state (fn [this])\n   ;; Static methods\n   :get-derived-state-from-props (fn [props state] partial-state)\n   :get-derived-state-from-error (fn [error] partial-state)\n   ;; Methods\n   :get-snapshot-before-update (fn [this old-argv new-argv] snapshot)\n   :should-component-update (fn [this old-argv new-argv])\n   :component-did-mount (fn [this])\n   :component-did-update (fn [this old-argv old-state snapshot])\n   :component-will-unmount (fn [this])\n   :component-did-catch (fn [this error info])\n   :reagent-render (fn [args....])\n   ;; Or alternatively:\n   :render (fn [this])\n   ;; Deprecated methods:\n   :UNSAFE_component-will-receive-props (fn [this new-argv])\n   :UNSAFE_component-will-update (fn [this new-argv new-state])\n   :UNSAFE_component-will-mount (fn [this])}\n  ```\n\n  Everything is optional, except either :reagent-render or :render.\n\n  Map keys should use `React.Component` method names (https://reactjs.org/docs/react-component.html),\n  and can be provided in snake-case or camelCase.\n\n  State can be initialized using constructor, which matches React.Component class,\n  or using getInitialState which matches old React createClass function and is\n  now implemented by Reagent for compatibility.\n\n  State can usually be anything, e.g. Cljs object. But if using getDerivedState\n  methods, the state has to be plain JS object as React implementation uses\n  Object.assign to merge partial state into the current state.\n\n  React built-in static methods or properties are automatically defined as statics."],"~$create-element",["^ ","^5T",null,"^5",["^ ","^6","reagent/core.cljs","^7",17,"^8",7,"^9",17,"^:",21,"^P",["^Q",["^5U",["^Q",[["~$type"],["^7F","^6D"],["^7F","^6D","~$child"],["^7F","^6D","^7G","~$&","^6S"]]]]],"^T","Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \"div\" #js{:className \"foo\"}\n    \"Hi \" (r/as-element [:strong \"world!\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \"Hi\" [:strong \"world!\"]]\n  ```","^5Z",["^ ","^5[",true,"^60",3,"^61",3,"^62",[["^7F"],["^7F","^6D"],["^7F","^6D","^7G"]],"^P",["^Q",[["^7F"],["^7F","^6D"],["^7F","^6D","^7G"],["^7F","^6D","^7G","~$&","^6S"]]],"^63",["^Q",[null,null,null,null]]]],"^U","^3B","^6","reagent/core.cljs","^:",21,"^5Z",["^ ","^5[",true,"^60",3,"^61",3,"^62",[["^7F"],["^7F","^6D"],["^7F","^6D","^7G"]],"^P",["^Q",[["^7F"],["^7F","^6D"],["^7F","^6D","^7G"],["^7F","^6D","^7G","~$&","^6S"]]],"^63",["^Q",[null,null,null,null]]],"^62",[["^7F"],["^7F","^6D"],["^7F","^6D","^7G"]],"^64",null,"^60",3,"^63",["^Q",[null,null,null,null]],"^8",1,"^5[",true,"^65",[["^ ","^60",1,"^5[",false,"^66","^69"],["^ ","^60",2,"^5[",false,"^66","^6J"],["^ ","^60",3,"^5[",false,"^66","^6J"],["^ ","^60",3,"^5[",true,"^66","^69"]],"^7",17,"^9",17,"^61",3,"^6:",true,"^P",["^Q",[["^7F"],["^7F","^6D"],["^7F","^6D","^7G"],["^7F","^6D","^7G","~$&","^6S"]]],"^T","Create a native React element, by calling React.createElement directly.\n\n  That means the second argument must be a javascript object (or nil), and\n  that any Reagent hiccup forms must be processed with as-element. For example\n  like this:\n\n  ```cljs\n  (r/create-element \"div\" #js{:className \"foo\"}\n    \"Hi \" (r/as-element [:strong \"world!\"])\n  ```\n\n  which is equivalent to\n\n  ```cljs\n  [:div.foo \"Hi\" [:strong \"world!\"]]\n  ```"]],"^1B",["^ ","^X","^X","^D","^D","^1>","^D","^17","^17","^16","^16","^1=","^16"],"^1J",["^ ","^1B",["^J",[]],"^1A",["^J",[]]],"^1K",["^ "],"^1L",["^18","^17","^?","^19","^15","^11","^1:","^16","^D","^13"]],"^W","^X","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^3R",[["^7J","~:static-fns"],true,["^7J","~:shadow-tweaks"],null,["^7J","~:source-map-inline"],null,["^7J","~:elide-asserts"],false,["^7J","~:optimize-constants"],null,["^7J","^1Q"],null,["^7J","~:external-config"],null,["^7J","~:tooling-config"],null,["^7J","~:emit-constants"],null,["^7J","~:load-tests"],true,["^7J","~:form-size-threshold"],null,["^7J","~:data-readers"],null,["^7J","~:infer-externs"],"~:auto",["^7J","^1S"],null,["~:js-options","~:js-provider"],"^1A",["~:mode"],"~:dev",["^7J","~:fn-invoke-direct"],null,["^7J","~:source-map"],"/dev/null"]]]