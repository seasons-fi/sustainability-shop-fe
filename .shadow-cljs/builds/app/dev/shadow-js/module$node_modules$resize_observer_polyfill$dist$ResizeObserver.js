["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/resize-observer-polyfill/dist/ResizeObserver.js"],"~:js","shadow$provide.module$node_modules$resize_observer_polyfill$dist$ResizeObserver=function(global$jscomp$0,require,module,exports){(function(global,factory){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=factory():\"function\"===typeof define&&define.amd?define(factory):global.ResizeObserver=factory()})(this,function(){function throttle(callback,delay){function resolvePending(){leadingCall&&(leadingCall=!1,callback());trailingCall&&proxy()}function timeoutCallback(){requestAnimationFrame$1(resolvePending)}\nfunction proxy(){var timeStamp=Date.now();if(leadingCall){if(2>timeStamp-lastCallTime)return;trailingCall=!0}else leadingCall=!0,trailingCall=!1,setTimeout(timeoutCallback,delay);lastCallTime=timeStamp}var leadingCall=!1,trailingCall=!1,lastCallTime=0;return proxy}function getBordersSize(styles){for(var positions=[],_i=1;_i<arguments.length;_i++)positions[_i-1]=arguments[_i];return positions.reduce(function(size,position){return size+(parseFloat(styles[\"border-\"+position+\"-width\"])||0)},0)}var MapShim=\nfunction(){function getIndex(arr,key){var result=-1;arr.some(function(entry,index){return entry[0]===key?(result=index,!0):!1});return result}return\"undefined\"!==typeof Map?Map:function(){function class_1(){this.__entries__=[]}Object.defineProperty(class_1.prototype,\"size\",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0});class_1.prototype.get=function(key){key=getIndex(this.__entries__,key);return(key=this.__entries__[key])&&key[1]};class_1.prototype.set=function(key,\nvalue){var index=getIndex(this.__entries__,key);~index?this.__entries__[index][1]=value:this.__entries__.push([key,value])};class_1.prototype.delete=function(key){var entries=this.__entries__;key=getIndex(entries,key);~key&&entries.splice(key,1)};class_1.prototype.has=function(key){return!!~getIndex(this.__entries__,key)};class_1.prototype.clear=function(){this.__entries__.splice(0)};class_1.prototype.forEach=function(callback,ctx){void 0===ctx&&(ctx=null);for(var _i=0,_a=this.__entries__;_i<_a.length;_i++){var entry=\n_a[_i];callback.call(ctx,entry[1],entry[0])}};return class_1}()}(),isBrowser=\"undefined\"!==typeof window&&\"undefined\"!==typeof document&&window.document===document,global$1=\"undefined\"!==typeof global$jscomp$0&&global$jscomp$0.Math===Math?global$jscomp$0:\"undefined\"!==typeof self&&self.Math===Math?self:\"undefined\"!==typeof window&&Math===Math?window:Function(\"return this\")(),requestAnimationFrame$1=function(){return\"function\"===typeof requestAnimationFrame?requestAnimationFrame.bind(global$1):function(callback){return setTimeout(function(){return callback(Date.now())},\n1E3/60)}}(),transitionKeys=\"top right bottom left width height size weight\".split(\" \"),mutationObserverSupported=\"undefined\"!==typeof MutationObserver,ResizeObserverController=function(){function ResizeObserverController(){this.mutationEventsAdded_=this.connected_=!1;this.mutationsObserver_=null;this.observers_=[];this.onTransitionEnd_=this.onTransitionEnd_.bind(this);this.refresh=throttle(this.refresh.bind(this),20)}ResizeObserverController.prototype.addObserver=function(observer){~this.observers_.indexOf(observer)||\nthis.observers_.push(observer);this.connected_||this.connect_()};ResizeObserverController.prototype.removeObserver=function(observer){var observers=this.observers_;observer=observers.indexOf(observer);~observer&&observers.splice(observer,1);!observers.length&&this.connected_&&this.disconnect_()};ResizeObserverController.prototype.refresh=function(){this.updateObservers_()&&this.refresh()};ResizeObserverController.prototype.updateObservers_=function(){var activeObservers=this.observers_.filter(function(observer){return observer.gatherActive(),\nobserver.hasActive()});activeObservers.forEach(function(observer){return observer.broadcastActive()});return 0<activeObservers.length};ResizeObserverController.prototype.connect_=function(){isBrowser&&!this.connected_&&(document.addEventListener(\"transitionend\",this.onTransitionEnd_),window.addEventListener(\"resize\",this.refresh),mutationObserverSupported?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,\nsubtree:!0})):(document.addEventListener(\"DOMSubtreeModified\",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)};ResizeObserverController.prototype.disconnect_=function(){isBrowser&&this.connected_&&(document.removeEventListener(\"transitionend\",this.onTransitionEnd_),window.removeEventListener(\"resize\",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener(\"DOMSubtreeModified\",this.refresh),this.mutationsObserver_=\nnull,this.connected_=this.mutationEventsAdded_=!1)};ResizeObserverController.prototype.onTransitionEnd_=function(_a){_a=_a.propertyName;var propertyName=void 0===_a?\"\":_a;transitionKeys.some(function(key){return!!~propertyName.indexOf(key)})&&this.refresh()};ResizeObserverController.getInstance=function(){this.instance_||(this.instance_=new ResizeObserverController);return this.instance_};ResizeObserverController.instance_=null;return ResizeObserverController}(),defineConfigurable=function(target,\nprops){for(var _i=0,_a=Object.keys(props);_i<_a.length;_i++){var key=_a[_i];Object.defineProperty(target,key,{value:props[key],enumerable:!1,writable:!1,configurable:!0})}return target},getWindowOf=function(target){return target&&target.ownerDocument&&target.ownerDocument.defaultView||global$1},emptyRect={x:0,y:0,width:0,height:0},isSVGGraphicsElement=function(){return\"undefined\"!==typeof SVGGraphicsElement?function(target){return target instanceof getWindowOf(target).SVGGraphicsElement}:function(target){return target instanceof\ngetWindowOf(target).SVGElement&&\"function\"===typeof target.getBBox}}(),ResizeObservation=function(){function ResizeObservation(target){this.broadcastHeight=this.broadcastWidth=0;this.contentRect_={x:0,y:0,width:0,height:0};this.target=target}ResizeObservation.prototype.isActive=function(){var target=this.target;if(isBrowser)if(isSVGGraphicsElement(target)){var rect=target.getBBox();rect={x:0,y:0,width:rect.width,height:rect.height}}else{var clientWidth=target.clientWidth,clientHeight=target.clientHeight;\nif(clientWidth||clientHeight){var styles=getWindowOf(target).getComputedStyle(target);rect={};for(var _i=0,positions_1=[\"top\",\"right\",\"bottom\",\"left\"];_i<positions_1.length;_i++){var position=positions_1[_i];rect[position]=parseFloat(styles[\"padding-\"+position])||0}var horizPad=rect.left+rect.right;position=rect.top+rect.bottom;_i=parseFloat(styles.width)||0;positions_1=parseFloat(styles.height)||0;\"border-box\"===styles.boxSizing&&(Math.round(_i+horizPad)!==clientWidth&&(_i-=getBordersSize(styles,\n\"left\",\"right\")+horizPad),Math.round(positions_1+position)!==clientHeight&&(positions_1-=getBordersSize(styles,\"top\",\"bottom\")+position));target!==getWindowOf(target).document.documentElement&&(target=Math.round(_i+horizPad)-clientWidth,clientHeight=Math.round(positions_1+position)-clientHeight,1!==Math.abs(target)&&(_i-=target),1!==Math.abs(clientHeight)&&(positions_1-=clientHeight));rect={x:rect.left,y:rect.top,width:_i,height:positions_1}}else rect=emptyRect}else rect=emptyRect;this.contentRect_=\nrect;return rect.width!==this.broadcastWidth||rect.height!==this.broadcastHeight};ResizeObservation.prototype.broadcastRect=function(){var rect=this.contentRect_;this.broadcastWidth=rect.width;this.broadcastHeight=rect.height;return rect};return ResizeObservation}(),ResizeObserverEntry=function(){return function(target,rectInit){var x=rectInit.x,y=rectInit.y,width=rectInit.width;rectInit=rectInit.height;var rect=Object.create((\"undefined\"!==typeof DOMRectReadOnly?DOMRectReadOnly:Object).prototype);\ndefineConfigurable(rect,{x,y,width,height:rectInit,top:y,right:x+width,bottom:rectInit+y,left:x});defineConfigurable(this,{target,contentRect:rect})}}(),ResizeObserverSPI=function(){function ResizeObserverSPI(callback,controller,callbackCtx){this.activeObservations_=[];this.observations_=new MapShim;if(\"function\"!==typeof callback)throw new TypeError(\"The callback provided as parameter 1 is not a function.\");this.callback_=callback;this.controller_=controller;this.callbackCtx_=callbackCtx}ResizeObserverSPI.prototype.observe=\nfunction(target){if(!arguments.length)throw new TypeError(\"1 argument required, but only 0 present.\");if(\"undefined\"!==typeof Element&&Element instanceof Object){if(!(target instanceof getWindowOf(target).Element))throw new TypeError('parameter 1 is not of type \"Element\".');var observations=this.observations_;observations.has(target)||(observations.set(target,new ResizeObservation(target)),this.controller_.addObserver(this),this.controller_.refresh())}};ResizeObserverSPI.prototype.unobserve=function(target){if(!arguments.length)throw new TypeError(\"1 argument required, but only 0 present.\");\nif(\"undefined\"!==typeof Element&&Element instanceof Object){if(!(target instanceof getWindowOf(target).Element))throw new TypeError('parameter 1 is not of type \"Element\".');var observations=this.observations_;observations.has(target)&&(observations.delete(target),observations.size||this.controller_.removeObserver(this))}};ResizeObserverSPI.prototype.disconnect=function(){this.clearActive();this.observations_.clear();this.controller_.removeObserver(this)};ResizeObserverSPI.prototype.gatherActive=function(){var _this=\nthis;this.clearActive();this.observations_.forEach(function(observation){observation.isActive()&&_this.activeObservations_.push(observation)})};ResizeObserverSPI.prototype.broadcastActive=function(){if(this.hasActive()){var ctx=this.callbackCtx_,entries=this.activeObservations_.map(function(observation){return new ResizeObserverEntry(observation.target,observation.broadcastRect())});this.callback_.call(ctx,entries,ctx);this.clearActive()}};ResizeObserverSPI.prototype.clearActive=function(){this.activeObservations_.splice(0)};\nResizeObserverSPI.prototype.hasActive=function(){return 0<this.activeObservations_.length};return ResizeObserverSPI}(),observers=\"undefined\"!==typeof WeakMap?new WeakMap:new MapShim,ResizeObserver$jscomp$0=function(){function ResizeObserver(callback){if(!(this instanceof ResizeObserver))throw new TypeError(\"Cannot call a class as a function.\");if(!arguments.length)throw new TypeError(\"1 argument required, but only 0 present.\");var controller=ResizeObserverController.getInstance();controller=new ResizeObserverSPI(callback,\ncontroller,this);observers.set(this,controller)}return ResizeObserver}();[\"observe\",\"unobserve\",\"disconnect\"].forEach(function(method){ResizeObserver$jscomp$0.prototype[method]=function(){var _a;return(_a=observers.get(this))[method].apply(_a,arguments)}});var index$jscomp$0=\"undefined\"!==typeof global$1.ResizeObserver?global$1.ResizeObserver:ResizeObserver$jscomp$0;return index$jscomp$0})}","~:source","shadow$provide[\"module$node_modules$resize_observer_polyfill$dist$ResizeObserver\"] = function(global,require,module,exports) {\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ResizeObserver = factory());\n}(this, (function () { 'use strict';\n\n    /**\r\n     * A collection of shims that provide minimal functionality of the ES6 collections.\r\n     *\r\n     * These implementations are not meant to be used outside of the ResizeObserver\r\n     * modules as they cover only a limited range of use cases.\r\n     */\r\n    /* eslint-disable require-jsdoc, valid-jsdoc */\r\n    var MapShim = (function () {\r\n        if (typeof Map !== 'undefined') {\r\n            return Map;\r\n        }\r\n        /**\r\n         * Returns index in provided array that matches the specified key.\r\n         *\r\n         * @param {Array<Array>} arr\r\n         * @param {*} key\r\n         * @returns {number}\r\n         */\r\n        function getIndex(arr, key) {\r\n            var result = -1;\r\n            arr.some(function (entry, index) {\r\n                if (entry[0] === key) {\r\n                    result = index;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            return result;\r\n        }\r\n        return /** @class */ (function () {\r\n            function class_1() {\r\n                this.__entries__ = [];\r\n            }\r\n            Object.defineProperty(class_1.prototype, \"size\", {\r\n                /**\r\n                 * @returns {boolean}\r\n                 */\r\n                get: function () {\r\n                    return this.__entries__.length;\r\n                },\r\n                enumerable: true,\r\n                configurable: true\r\n            });\r\n            /**\r\n             * @param {*} key\r\n             * @returns {*}\r\n             */\r\n            class_1.prototype.get = function (key) {\r\n                var index = getIndex(this.__entries__, key);\r\n                var entry = this.__entries__[index];\r\n                return entry && entry[1];\r\n            };\r\n            /**\r\n             * @param {*} key\r\n             * @param {*} value\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.set = function (key, value) {\r\n                var index = getIndex(this.__entries__, key);\r\n                if (~index) {\r\n                    this.__entries__[index][1] = value;\r\n                }\r\n                else {\r\n                    this.__entries__.push([key, value]);\r\n                }\r\n            };\r\n            /**\r\n             * @param {*} key\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.delete = function (key) {\r\n                var entries = this.__entries__;\r\n                var index = getIndex(entries, key);\r\n                if (~index) {\r\n                    entries.splice(index, 1);\r\n                }\r\n            };\r\n            /**\r\n             * @param {*} key\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.has = function (key) {\r\n                return !!~getIndex(this.__entries__, key);\r\n            };\r\n            /**\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.clear = function () {\r\n                this.__entries__.splice(0);\r\n            };\r\n            /**\r\n             * @param {Function} callback\r\n             * @param {*} [ctx=null]\r\n             * @returns {void}\r\n             */\r\n            class_1.prototype.forEach = function (callback, ctx) {\r\n                if (ctx === void 0) { ctx = null; }\r\n                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                    var entry = _a[_i];\r\n                    callback.call(ctx, entry[1], entry[0]);\r\n                }\r\n            };\r\n            return class_1;\r\n        }());\r\n    })();\n\n    /**\r\n     * Detects whether window and document objects are available in current environment.\r\n     */\r\n    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n    // Returns global object of a current environment.\r\n    var global$1 = (function () {\r\n        if (typeof global !== 'undefined' && global.Math === Math) {\r\n            return global;\r\n        }\r\n        if (typeof self !== 'undefined' && self.Math === Math) {\r\n            return self;\r\n        }\r\n        if (typeof window !== 'undefined' && window.Math === Math) {\r\n            return window;\r\n        }\r\n        // eslint-disable-next-line no-new-func\r\n        return Function('return this')();\r\n    })();\n\n    /**\r\n     * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n     * first one is not supported.\r\n     *\r\n     * @returns {number} Requests' identifier.\r\n     */\r\n    var requestAnimationFrame$1 = (function () {\r\n        if (typeof requestAnimationFrame === 'function') {\r\n            // It's required to use a bounded function because IE sometimes throws\r\n            // an \"Invalid calling object\" error if rAF is invoked without the global\r\n            // object on the left hand side.\r\n            return requestAnimationFrame.bind(global$1);\r\n        }\r\n        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n    })();\n\n    // Defines minimum timeout before adding a trailing call.\r\n    var trailingTimeout = 2;\r\n    /**\r\n     * Creates a wrapper function which ensures that provided callback will be\r\n     * invoked only once during the specified delay period.\r\n     *\r\n     * @param {Function} callback - Function to be invoked after the delay period.\r\n     * @param {number} delay - Delay after which to invoke callback.\r\n     * @returns {Function}\r\n     */\r\n    function throttle (callback, delay) {\r\n        var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n        /**\r\n         * Invokes the original callback function and schedules new invocation if\r\n         * the \"proxy\" was called during current request.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        function resolvePending() {\r\n            if (leadingCall) {\r\n                leadingCall = false;\r\n                callback();\r\n            }\r\n            if (trailingCall) {\r\n                proxy();\r\n            }\r\n        }\r\n        /**\r\n         * Callback invoked after the specified delay. It will further postpone\r\n         * invocation of the original function delegating it to the\r\n         * requestAnimationFrame.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        function timeoutCallback() {\r\n            requestAnimationFrame$1(resolvePending);\r\n        }\r\n        /**\r\n         * Schedules invocation of the original function.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        function proxy() {\r\n            var timeStamp = Date.now();\r\n            if (leadingCall) {\r\n                // Reject immediately following calls.\r\n                if (timeStamp - lastCallTime < trailingTimeout) {\r\n                    return;\r\n                }\r\n                // Schedule new call to be in invoked when the pending one is resolved.\r\n                // This is important for \"transitions\" which never actually start\r\n                // immediately so there is a chance that we might miss one if change\r\n                // happens amids the pending invocation.\r\n                trailingCall = true;\r\n            }\r\n            else {\r\n                leadingCall = true;\r\n                trailingCall = false;\r\n                setTimeout(timeoutCallback, delay);\r\n            }\r\n            lastCallTime = timeStamp;\r\n        }\r\n        return proxy;\r\n    }\n\n    // Minimum delay before invoking the update of observers.\r\n    var REFRESH_DELAY = 20;\r\n    // A list of substrings of CSS properties used to find transition events that\r\n    // might affect dimensions of observed elements.\r\n    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n    // Check if MutationObserver is available.\r\n    var mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n    /**\r\n     * Singleton controller class which handles updates of ResizeObserver instances.\r\n     */\r\n    var ResizeObserverController = /** @class */ (function () {\r\n        /**\r\n         * Creates a new instance of ResizeObserverController.\r\n         *\r\n         * @private\r\n         */\r\n        function ResizeObserverController() {\r\n            /**\r\n             * Indicates whether DOM listeners have been added.\r\n             *\r\n             * @private {boolean}\r\n             */\r\n            this.connected_ = false;\r\n            /**\r\n             * Tells that controller has subscribed for Mutation Events.\r\n             *\r\n             * @private {boolean}\r\n             */\r\n            this.mutationEventsAdded_ = false;\r\n            /**\r\n             * Keeps reference to the instance of MutationObserver.\r\n             *\r\n             * @private {MutationObserver}\r\n             */\r\n            this.mutationsObserver_ = null;\r\n            /**\r\n             * A list of connected observers.\r\n             *\r\n             * @private {Array<ResizeObserverSPI>}\r\n             */\r\n            this.observers_ = [];\r\n            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n        }\r\n        /**\r\n         * Adds observer to observers list.\r\n         *\r\n         * @param {ResizeObserverSPI} observer - Observer to be added.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.addObserver = function (observer) {\r\n            if (!~this.observers_.indexOf(observer)) {\r\n                this.observers_.push(observer);\r\n            }\r\n            // Add listeners if they haven't been added yet.\r\n            if (!this.connected_) {\r\n                this.connect_();\r\n            }\r\n        };\r\n        /**\r\n         * Removes observer from observers list.\r\n         *\r\n         * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.removeObserver = function (observer) {\r\n            var observers = this.observers_;\r\n            var index = observers.indexOf(observer);\r\n            // Remove observer if it's present in registry.\r\n            if (~index) {\r\n                observers.splice(index, 1);\r\n            }\r\n            // Remove listeners if controller has no connected observers.\r\n            if (!observers.length && this.connected_) {\r\n                this.disconnect_();\r\n            }\r\n        };\r\n        /**\r\n         * Invokes the update of observers. It will continue running updates insofar\r\n         * it detects changes.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.refresh = function () {\r\n            var changesDetected = this.updateObservers_();\r\n            // Continue running updates if changes have been detected as there might\r\n            // be future ones caused by CSS transitions.\r\n            if (changesDetected) {\r\n                this.refresh();\r\n            }\r\n        };\r\n        /**\r\n         * Updates every observer from observers list and notifies them of queued\r\n         * entries.\r\n         *\r\n         * @private\r\n         * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n         *      dimensions of it's elements.\r\n         */\r\n        ResizeObserverController.prototype.updateObservers_ = function () {\r\n            // Collect observers that have active observations.\r\n            var activeObservers = this.observers_.filter(function (observer) {\r\n                return observer.gatherActive(), observer.hasActive();\r\n            });\r\n            // Deliver notifications in a separate cycle in order to avoid any\r\n            // collisions between observers, e.g. when multiple instances of\r\n            // ResizeObserver are tracking the same element and the callback of one\r\n            // of them changes content dimensions of the observed target. Sometimes\r\n            // this may result in notifications being blocked for the rest of observers.\r\n            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n            return activeObservers.length > 0;\r\n        };\r\n        /**\r\n         * Initializes DOM listeners.\r\n         *\r\n         * @private\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.connect_ = function () {\r\n            // Do nothing if running in a non-browser environment or if listeners\r\n            // have been already added.\r\n            if (!isBrowser || this.connected_) {\r\n                return;\r\n            }\r\n            // Subscription to the \"Transitionend\" event is used as a workaround for\r\n            // delayed transitions. This way it's possible to capture at least the\r\n            // final state of an element.\r\n            document.addEventListener('transitionend', this.onTransitionEnd_);\r\n            window.addEventListener('resize', this.refresh);\r\n            if (mutationObserverSupported) {\r\n                this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n                this.mutationsObserver_.observe(document, {\r\n                    attributes: true,\r\n                    childList: true,\r\n                    characterData: true,\r\n                    subtree: true\r\n                });\r\n            }\r\n            else {\r\n                document.addEventListener('DOMSubtreeModified', this.refresh);\r\n                this.mutationEventsAdded_ = true;\r\n            }\r\n            this.connected_ = true;\r\n        };\r\n        /**\r\n         * Removes DOM listeners.\r\n         *\r\n         * @private\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.disconnect_ = function () {\r\n            // Do nothing if running in a non-browser environment or if listeners\r\n            // have been already removed.\r\n            if (!isBrowser || !this.connected_) {\r\n                return;\r\n            }\r\n            document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n            window.removeEventListener('resize', this.refresh);\r\n            if (this.mutationsObserver_) {\r\n                this.mutationsObserver_.disconnect();\r\n            }\r\n            if (this.mutationEventsAdded_) {\r\n                document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n            }\r\n            this.mutationsObserver_ = null;\r\n            this.mutationEventsAdded_ = false;\r\n            this.connected_ = false;\r\n        };\r\n        /**\r\n         * \"Transitionend\" event handler.\r\n         *\r\n         * @private\r\n         * @param {TransitionEvent} event\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n            // Detect whether transition may affect dimensions of an element.\r\n            var isReflowProperty = transitionKeys.some(function (key) {\r\n                return !!~propertyName.indexOf(key);\r\n            });\r\n            if (isReflowProperty) {\r\n                this.refresh();\r\n            }\r\n        };\r\n        /**\r\n         * Returns instance of the ResizeObserverController.\r\n         *\r\n         * @returns {ResizeObserverController}\r\n         */\r\n        ResizeObserverController.getInstance = function () {\r\n            if (!this.instance_) {\r\n                this.instance_ = new ResizeObserverController();\r\n            }\r\n            return this.instance_;\r\n        };\r\n        /**\r\n         * Holds reference to the controller's instance.\r\n         *\r\n         * @private {ResizeObserverController}\r\n         */\r\n        ResizeObserverController.instance_ = null;\r\n        return ResizeObserverController;\r\n    }());\n\n    /**\r\n     * Defines non-writable/enumerable properties of the provided target object.\r\n     *\r\n     * @param {Object} target - Object for which to define properties.\r\n     * @param {Object} props - Properties to be defined.\r\n     * @returns {Object} Target object.\r\n     */\r\n    var defineConfigurable = (function (target, props) {\r\n        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            Object.defineProperty(target, key, {\r\n                value: props[key],\r\n                enumerable: false,\r\n                writable: false,\r\n                configurable: true\r\n            });\r\n        }\r\n        return target;\r\n    });\n\n    /**\r\n     * Returns the global object associated with provided element.\r\n     *\r\n     * @param {Object} target\r\n     * @returns {Object}\r\n     */\r\n    var getWindowOf = (function (target) {\r\n        // Assume that the element is an instance of Node, which means that it\r\n        // has the \"ownerDocument\" property from which we can retrieve a\r\n        // corresponding global object.\r\n        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n        // Return the local global object if it's not possible extract one from\r\n        // provided element.\r\n        return ownerGlobal || global$1;\r\n    });\n\n    // Placeholder of an empty content rectangle.\r\n    var emptyRect = createRectInit(0, 0, 0, 0);\r\n    /**\r\n     * Converts provided string to a number.\r\n     *\r\n     * @param {number|string} value\r\n     * @returns {number}\r\n     */\r\n    function toFloat(value) {\r\n        return parseFloat(value) || 0;\r\n    }\r\n    /**\r\n     * Extracts borders size from provided styles.\r\n     *\r\n     * @param {CSSStyleDeclaration} styles\r\n     * @param {...string} positions - Borders positions (top, right, ...)\r\n     * @returns {number}\r\n     */\r\n    function getBordersSize(styles) {\r\n        var positions = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            positions[_i - 1] = arguments[_i];\r\n        }\r\n        return positions.reduce(function (size, position) {\r\n            var value = styles['border-' + position + '-width'];\r\n            return size + toFloat(value);\r\n        }, 0);\r\n    }\r\n    /**\r\n     * Extracts paddings sizes from provided styles.\r\n     *\r\n     * @param {CSSStyleDeclaration} styles\r\n     * @returns {Object} Paddings box.\r\n     */\r\n    function getPaddings(styles) {\r\n        var positions = ['top', 'right', 'bottom', 'left'];\r\n        var paddings = {};\r\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n            var position = positions_1[_i];\r\n            var value = styles['padding-' + position];\r\n            paddings[position] = toFloat(value);\r\n        }\r\n        return paddings;\r\n    }\r\n    /**\r\n     * Calculates content rectangle of provided SVG element.\r\n     *\r\n     * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n     *      to be calculated.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function getSVGContentRect(target) {\r\n        var bbox = target.getBBox();\r\n        return createRectInit(0, 0, bbox.width, bbox.height);\r\n    }\r\n    /**\r\n     * Calculates content rectangle of provided HTMLElement.\r\n     *\r\n     * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function getHTMLElementContentRect(target) {\r\n        // Client width & height properties can't be\r\n        // used exclusively as they provide rounded values.\r\n        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n        // By this condition we can catch all non-replaced inline, hidden and\r\n        // detached elements. Though elements with width & height properties less\r\n        // than 0.5 will be discarded as well.\r\n        //\r\n        // Without it we would need to implement separate methods for each of\r\n        // those cases and it's not possible to perform a precise and performance\r\n        // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n        // gives wrong results for elements with width & height less than 0.5.\r\n        if (!clientWidth && !clientHeight) {\r\n            return emptyRect;\r\n        }\r\n        var styles = getWindowOf(target).getComputedStyle(target);\r\n        var paddings = getPaddings(styles);\r\n        var horizPad = paddings.left + paddings.right;\r\n        var vertPad = paddings.top + paddings.bottom;\r\n        // Computed styles of width & height are being used because they are the\r\n        // only dimensions available to JS that contain non-rounded values. It could\r\n        // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n        // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n        var width = toFloat(styles.width), height = toFloat(styles.height);\r\n        // Width & height include paddings and borders when the 'border-box' box\r\n        // model is applied (except for IE).\r\n        if (styles.boxSizing === 'border-box') {\r\n            // Following conditions are required to handle Internet Explorer which\r\n            // doesn't include paddings and borders to computed CSS dimensions.\r\n            //\r\n            // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n            // properties then it's either IE, and thus we don't need to subtract\r\n            // anything, or an element merely doesn't have paddings/borders styles.\r\n            if (Math.round(width + horizPad) !== clientWidth) {\r\n                width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n            }\r\n            if (Math.round(height + vertPad) !== clientHeight) {\r\n                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n            }\r\n        }\r\n        // Following steps can't be applied to the document's root element as its\r\n        // client[Width/Height] properties represent viewport area of the window.\r\n        // Besides, it's as well not necessary as the <html> itself neither has\r\n        // rendered scroll bars nor it can be clipped.\r\n        if (!isDocumentElement(target)) {\r\n            // In some browsers (only in Firefox, actually) CSS width & height\r\n            // include scroll bars size which can be removed at this step as scroll\r\n            // bars are the only difference between rounded dimensions + paddings\r\n            // and \"client\" properties, though that is not always true in Chrome.\r\n            var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n            var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n            // Chrome has a rather weird rounding of \"client\" properties.\r\n            // E.g. for an element with content width of 314.2px it sometimes gives\r\n            // the client width of 315px and for the width of 314.7px it may give\r\n            // 314px. And it doesn't happen all the time. So just ignore this delta\r\n            // as a non-relevant.\r\n            if (Math.abs(vertScrollbar) !== 1) {\r\n                width -= vertScrollbar;\r\n            }\r\n            if (Math.abs(horizScrollbar) !== 1) {\r\n                height -= horizScrollbar;\r\n            }\r\n        }\r\n        return createRectInit(paddings.left, paddings.top, width, height);\r\n    }\r\n    /**\r\n     * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n     *\r\n     * @param {Element} target - Element to be checked.\r\n     * @returns {boolean}\r\n     */\r\n    var isSVGGraphicsElement = (function () {\r\n        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n        // interface.\r\n        if (typeof SVGGraphicsElement !== 'undefined') {\r\n            return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n        }\r\n        // If it's so, then check that element is at least an instance of the\r\n        // SVGElement and that it has the \"getBBox\" method.\r\n        // eslint-disable-next-line no-extra-parens\r\n        return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n            typeof target.getBBox === 'function'); };\r\n    })();\r\n    /**\r\n     * Checks whether provided element is a document element (<html>).\r\n     *\r\n     * @param {Element} target - Element to be checked.\r\n     * @returns {boolean}\r\n     */\r\n    function isDocumentElement(target) {\r\n        return target === getWindowOf(target).document.documentElement;\r\n    }\r\n    /**\r\n     * Calculates an appropriate content rectangle for provided html or svg element.\r\n     *\r\n     * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function getContentRect(target) {\r\n        if (!isBrowser) {\r\n            return emptyRect;\r\n        }\r\n        if (isSVGGraphicsElement(target)) {\r\n            return getSVGContentRect(target);\r\n        }\r\n        return getHTMLElementContentRect(target);\r\n    }\r\n    /**\r\n     * Creates rectangle with an interface of the DOMRectReadOnly.\r\n     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n     *\r\n     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n     * @returns {DOMRectReadOnly}\r\n     */\r\n    function createReadOnlyRect(_a) {\r\n        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n        // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n        var rect = Object.create(Constr.prototype);\r\n        // Rectangle's properties are not writable and non-enumerable.\r\n        defineConfigurable(rect, {\r\n            x: x, y: y, width: width, height: height,\r\n            top: y,\r\n            right: x + width,\r\n            bottom: height + y,\r\n            left: x\r\n        });\r\n        return rect;\r\n    }\r\n    /**\r\n     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n     *\r\n     * @param {number} x - X coordinate.\r\n     * @param {number} y - Y coordinate.\r\n     * @param {number} width - Rectangle's width.\r\n     * @param {number} height - Rectangle's height.\r\n     * @returns {DOMRectInit}\r\n     */\r\n    function createRectInit(x, y, width, height) {\r\n        return { x: x, y: y, width: width, height: height };\r\n    }\n\n    /**\r\n     * Class that is responsible for computations of the content rectangle of\r\n     * provided DOM element and for keeping track of it's changes.\r\n     */\r\n    var ResizeObservation = /** @class */ (function () {\r\n        /**\r\n         * Creates an instance of ResizeObservation.\r\n         *\r\n         * @param {Element} target - Element to be observed.\r\n         */\r\n        function ResizeObservation(target) {\r\n            /**\r\n             * Broadcasted width of content rectangle.\r\n             *\r\n             * @type {number}\r\n             */\r\n            this.broadcastWidth = 0;\r\n            /**\r\n             * Broadcasted height of content rectangle.\r\n             *\r\n             * @type {number}\r\n             */\r\n            this.broadcastHeight = 0;\r\n            /**\r\n             * Reference to the last observed content rectangle.\r\n             *\r\n             * @private {DOMRectInit}\r\n             */\r\n            this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n            this.target = target;\r\n        }\r\n        /**\r\n         * Updates content rectangle and tells whether it's width or height properties\r\n         * have changed since the last broadcast.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        ResizeObservation.prototype.isActive = function () {\r\n            var rect = getContentRect(this.target);\r\n            this.contentRect_ = rect;\r\n            return (rect.width !== this.broadcastWidth ||\r\n                rect.height !== this.broadcastHeight);\r\n        };\r\n        /**\r\n         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n         * from the corresponding properties of the last observed content rectangle.\r\n         *\r\n         * @returns {DOMRectInit} Last observed content rectangle.\r\n         */\r\n        ResizeObservation.prototype.broadcastRect = function () {\r\n            var rect = this.contentRect_;\r\n            this.broadcastWidth = rect.width;\r\n            this.broadcastHeight = rect.height;\r\n            return rect;\r\n        };\r\n        return ResizeObservation;\r\n    }());\n\n    var ResizeObserverEntry = /** @class */ (function () {\r\n        /**\r\n         * Creates an instance of ResizeObserverEntry.\r\n         *\r\n         * @param {Element} target - Element that is being observed.\r\n         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n         */\r\n        function ResizeObserverEntry(target, rectInit) {\r\n            var contentRect = createReadOnlyRect(rectInit);\r\n            // According to the specification following properties are not writable\r\n            // and are also not enumerable in the native implementation.\r\n            //\r\n            // Property accessors are not being used as they'd require to define a\r\n            // private WeakMap storage which may cause memory leaks in browsers that\r\n            // don't support this type of collections.\r\n            defineConfigurable(this, { target: target, contentRect: contentRect });\r\n        }\r\n        return ResizeObserverEntry;\r\n    }());\n\n    var ResizeObserverSPI = /** @class */ (function () {\r\n        /**\r\n         * Creates a new instance of ResizeObserver.\r\n         *\r\n         * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n         *      when one of the observed elements changes it's content dimensions.\r\n         * @param {ResizeObserverController} controller - Controller instance which\r\n         *      is responsible for the updates of observer.\r\n         * @param {ResizeObserver} callbackCtx - Reference to the public\r\n         *      ResizeObserver instance which will be passed to callback function.\r\n         */\r\n        function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n            /**\r\n             * Collection of resize observations that have detected changes in dimensions\r\n             * of elements.\r\n             *\r\n             * @private {Array<ResizeObservation>}\r\n             */\r\n            this.activeObservations_ = [];\r\n            /**\r\n             * Registry of the ResizeObservation instances.\r\n             *\r\n             * @private {Map<Element, ResizeObservation>}\r\n             */\r\n            this.observations_ = new MapShim();\r\n            if (typeof callback !== 'function') {\r\n                throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n            }\r\n            this.callback_ = callback;\r\n            this.controller_ = controller;\r\n            this.callbackCtx_ = callbackCtx;\r\n        }\r\n        /**\r\n         * Starts observing provided element.\r\n         *\r\n         * @param {Element} target - Element to be observed.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.observe = function (target) {\r\n            if (!arguments.length) {\r\n                throw new TypeError('1 argument required, but only 0 present.');\r\n            }\r\n            // Do nothing if current environment doesn't have the Element interface.\r\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n                return;\r\n            }\r\n            if (!(target instanceof getWindowOf(target).Element)) {\r\n                throw new TypeError('parameter 1 is not of type \"Element\".');\r\n            }\r\n            var observations = this.observations_;\r\n            // Do nothing if element is already being observed.\r\n            if (observations.has(target)) {\r\n                return;\r\n            }\r\n            observations.set(target, new ResizeObservation(target));\r\n            this.controller_.addObserver(this);\r\n            // Force the update of observations.\r\n            this.controller_.refresh();\r\n        };\r\n        /**\r\n         * Stops observing provided element.\r\n         *\r\n         * @param {Element} target - Element to stop observing.\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.unobserve = function (target) {\r\n            if (!arguments.length) {\r\n                throw new TypeError('1 argument required, but only 0 present.');\r\n            }\r\n            // Do nothing if current environment doesn't have the Element interface.\r\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n                return;\r\n            }\r\n            if (!(target instanceof getWindowOf(target).Element)) {\r\n                throw new TypeError('parameter 1 is not of type \"Element\".');\r\n            }\r\n            var observations = this.observations_;\r\n            // Do nothing if element is not being observed.\r\n            if (!observations.has(target)) {\r\n                return;\r\n            }\r\n            observations.delete(target);\r\n            if (!observations.size) {\r\n                this.controller_.removeObserver(this);\r\n            }\r\n        };\r\n        /**\r\n         * Stops observing all elements.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.disconnect = function () {\r\n            this.clearActive();\r\n            this.observations_.clear();\r\n            this.controller_.removeObserver(this);\r\n        };\r\n        /**\r\n         * Collects observation instances the associated element of which has changed\r\n         * it's content rectangle.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.gatherActive = function () {\r\n            var _this = this;\r\n            this.clearActive();\r\n            this.observations_.forEach(function (observation) {\r\n                if (observation.isActive()) {\r\n                    _this.activeObservations_.push(observation);\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Invokes initial callback function with a list of ResizeObserverEntry\r\n         * instances collected from active resize observations.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.broadcastActive = function () {\r\n            // Do nothing if observer doesn't have active observations.\r\n            if (!this.hasActive()) {\r\n                return;\r\n            }\r\n            var ctx = this.callbackCtx_;\r\n            // Create ResizeObserverEntry instance for every active observation.\r\n            var entries = this.activeObservations_.map(function (observation) {\r\n                return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n            });\r\n            this.callback_.call(ctx, entries, ctx);\r\n            this.clearActive();\r\n        };\r\n        /**\r\n         * Clears the collection of active observations.\r\n         *\r\n         * @returns {void}\r\n         */\r\n        ResizeObserverSPI.prototype.clearActive = function () {\r\n            this.activeObservations_.splice(0);\r\n        };\r\n        /**\r\n         * Tells whether observer has active observations.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        ResizeObserverSPI.prototype.hasActive = function () {\r\n            return this.activeObservations_.length > 0;\r\n        };\r\n        return ResizeObserverSPI;\r\n    }());\n\n    // Registry of internal observers. If WeakMap is not available use current shim\r\n    // for the Map collection as it has all required methods and because WeakMap\r\n    // can't be fully polyfilled anyway.\r\n    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n    /**\r\n     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n     * exposing only those methods and properties that are defined in the spec.\r\n     */\r\n    var ResizeObserver = /** @class */ (function () {\r\n        /**\r\n         * Creates a new instance of ResizeObserver.\r\n         *\r\n         * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n         *      dimensions of the observed elements change.\r\n         */\r\n        function ResizeObserver(callback) {\r\n            if (!(this instanceof ResizeObserver)) {\r\n                throw new TypeError('Cannot call a class as a function.');\r\n            }\r\n            if (!arguments.length) {\r\n                throw new TypeError('1 argument required, but only 0 present.');\r\n            }\r\n            var controller = ResizeObserverController.getInstance();\r\n            var observer = new ResizeObserverSPI(callback, controller, this);\r\n            observers.set(this, observer);\r\n        }\r\n        return ResizeObserver;\r\n    }());\r\n    // Expose public methods of ResizeObserver.\r\n    [\r\n        'observe',\r\n        'unobserve',\r\n        'disconnect'\r\n    ].forEach(function (method) {\r\n        ResizeObserver.prototype[method] = function () {\r\n            var _a;\r\n            return (_a = observers.get(this))[method].apply(_a, arguments);\r\n        };\r\n    });\n\n    var index = (function () {\r\n        // Export existing implementation if available.\r\n        if (typeof global$1.ResizeObserver !== 'undefined') {\r\n            return global$1.ResizeObserver;\r\n        }\r\n        return ResizeObserver;\r\n    })();\n\n    return index;\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["clearActive","isActive","width","observe","right","forEach","top","removeObserver","childList","broadcastHeight","contentRect","height","contentRect_","delete","mutationEventsAdded_","callback_","disconnect","addObserver","hasActive","x","connected_","controller_","activeObservations_","observers_","unobserve","mutationsObserver_","refresh","disconnect_","configurable","value","characterData","enumerable","getInstance","broadcastRect","writable","observations_","onTransitionEnd_","ResizeObserver","attributes","y","__entries__","target","connect_","bottom","set","broadcastActive","size","has","clear","updateObservers_","instance_","get","subtree","broadcastWidth","left","callbackCtx_","gatherActive"]],"~:compiled-at",1627822784991,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$resize_observer_polyfill$dist$ResizeObserver.js\",\n\"lineCount\":21,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/resize-observer-polyfill/dist/ResizeObserver.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$resize_observer_polyfill$dist$ResizeObserver\\\"] = function(global,require,module,exports) {\\n(function (global, factory) {\\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\\n    typeof define === 'function' && define.amd ? define(factory) :\\n    (global.ResizeObserver = factory());\\n}(this, (function () { 'use strict';\\n\\n    /**\\r\\n     * A collection of shims that provide minimal functionality of the ES6 collections.\\r\\n     *\\r\\n     * These implementations are not meant to be used outside of the ResizeObserver\\r\\n     * modules as they cover only a limited range of use cases.\\r\\n     */\\r\\n    /* eslint-disable require-jsdoc, valid-jsdoc */\\r\\n    var MapShim = (function () {\\r\\n        if (typeof Map !== 'undefined') {\\r\\n            return Map;\\r\\n        }\\r\\n        /**\\r\\n         * Returns index in provided array that matches the specified key.\\r\\n         *\\r\\n         * @param {Array<Array>} arr\\r\\n         * @param {*} key\\r\\n         * @returns {number}\\r\\n         */\\r\\n        function getIndex(arr, key) {\\r\\n            var result = -1;\\r\\n            arr.some(function (entry, index) {\\r\\n                if (entry[0] === key) {\\r\\n                    result = index;\\r\\n                    return true;\\r\\n                }\\r\\n                return false;\\r\\n            });\\r\\n            return result;\\r\\n        }\\r\\n        return /** @class */ (function () {\\r\\n            function class_1() {\\r\\n                this.__entries__ = [];\\r\\n            }\\r\\n            Object.defineProperty(class_1.prototype, \\\"size\\\", {\\r\\n                /**\\r\\n                 * @returns {boolean}\\r\\n                 */\\r\\n                get: function () {\\r\\n                    return this.__entries__.length;\\r\\n                },\\r\\n                enumerable: true,\\r\\n                configurable: true\\r\\n            });\\r\\n            /**\\r\\n             * @param {*} key\\r\\n             * @returns {*}\\r\\n             */\\r\\n            class_1.prototype.get = function (key) {\\r\\n                var index = getIndex(this.__entries__, key);\\r\\n                var entry = this.__entries__[index];\\r\\n                return entry && entry[1];\\r\\n            };\\r\\n            /**\\r\\n             * @param {*} key\\r\\n             * @param {*} value\\r\\n             * @returns {void}\\r\\n             */\\r\\n            class_1.prototype.set = function (key, value) {\\r\\n                var index = getIndex(this.__entries__, key);\\r\\n                if (~index) {\\r\\n                    this.__entries__[index][1] = value;\\r\\n                }\\r\\n                else {\\r\\n                    this.__entries__.push([key, value]);\\r\\n                }\\r\\n            };\\r\\n            /**\\r\\n             * @param {*} key\\r\\n             * @returns {void}\\r\\n             */\\r\\n            class_1.prototype.delete = function (key) {\\r\\n                var entries = this.__entries__;\\r\\n                var index = getIndex(entries, key);\\r\\n                if (~index) {\\r\\n                    entries.splice(index, 1);\\r\\n                }\\r\\n            };\\r\\n            /**\\r\\n             * @param {*} key\\r\\n             * @returns {void}\\r\\n             */\\r\\n            class_1.prototype.has = function (key) {\\r\\n                return !!~getIndex(this.__entries__, key);\\r\\n            };\\r\\n            /**\\r\\n             * @returns {void}\\r\\n             */\\r\\n            class_1.prototype.clear = function () {\\r\\n                this.__entries__.splice(0);\\r\\n            };\\r\\n            /**\\r\\n             * @param {Function} callback\\r\\n             * @param {*} [ctx=null]\\r\\n             * @returns {void}\\r\\n             */\\r\\n            class_1.prototype.forEach = function (callback, ctx) {\\r\\n                if (ctx === void 0) { ctx = null; }\\r\\n                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\\r\\n                    var entry = _a[_i];\\r\\n                    callback.call(ctx, entry[1], entry[0]);\\r\\n                }\\r\\n            };\\r\\n            return class_1;\\r\\n        }());\\r\\n    })();\\n\\n    /**\\r\\n     * Detects whether window and document objects are available in current environment.\\r\\n     */\\r\\n    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\\n\\n    // Returns global object of a current environment.\\r\\n    var global$1 = (function () {\\r\\n        if (typeof global !== 'undefined' && global.Math === Math) {\\r\\n            return global;\\r\\n        }\\r\\n        if (typeof self !== 'undefined' && self.Math === Math) {\\r\\n            return self;\\r\\n        }\\r\\n        if (typeof window !== 'undefined' && window.Math === Math) {\\r\\n            return window;\\r\\n        }\\r\\n        // eslint-disable-next-line no-new-func\\r\\n        return Function('return this')();\\r\\n    })();\\n\\n    /**\\r\\n     * A shim for the requestAnimationFrame which falls back to the setTimeout if\\r\\n     * first one is not supported.\\r\\n     *\\r\\n     * @returns {number} Requests' identifier.\\r\\n     */\\r\\n    var requestAnimationFrame$1 = (function () {\\r\\n        if (typeof requestAnimationFrame === 'function') {\\r\\n            // It's required to use a bounded function because IE sometimes throws\\r\\n            // an \\\"Invalid calling object\\\" error if rAF is invoked without the global\\r\\n            // object on the left hand side.\\r\\n            return requestAnimationFrame.bind(global$1);\\r\\n        }\\r\\n        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\\r\\n    })();\\n\\n    // Defines minimum timeout before adding a trailing call.\\r\\n    var trailingTimeout = 2;\\r\\n    /**\\r\\n     * Creates a wrapper function which ensures that provided callback will be\\r\\n     * invoked only once during the specified delay period.\\r\\n     *\\r\\n     * @param {Function} callback - Function to be invoked after the delay period.\\r\\n     * @param {number} delay - Delay after which to invoke callback.\\r\\n     * @returns {Function}\\r\\n     */\\r\\n    function throttle (callback, delay) {\\r\\n        var leadingCall = false, trailingCall = false, lastCallTime = 0;\\r\\n        /**\\r\\n         * Invokes the original callback function and schedules new invocation if\\r\\n         * the \\\"proxy\\\" was called during current request.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        function resolvePending() {\\r\\n            if (leadingCall) {\\r\\n                leadingCall = false;\\r\\n                callback();\\r\\n            }\\r\\n            if (trailingCall) {\\r\\n                proxy();\\r\\n            }\\r\\n        }\\r\\n        /**\\r\\n         * Callback invoked after the specified delay. It will further postpone\\r\\n         * invocation of the original function delegating it to the\\r\\n         * requestAnimationFrame.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        function timeoutCallback() {\\r\\n            requestAnimationFrame$1(resolvePending);\\r\\n        }\\r\\n        /**\\r\\n         * Schedules invocation of the original function.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        function proxy() {\\r\\n            var timeStamp = Date.now();\\r\\n            if (leadingCall) {\\r\\n                // Reject immediately following calls.\\r\\n                if (timeStamp - lastCallTime < trailingTimeout) {\\r\\n                    return;\\r\\n                }\\r\\n                // Schedule new call to be in invoked when the pending one is resolved.\\r\\n                // This is important for \\\"transitions\\\" which never actually start\\r\\n                // immediately so there is a chance that we might miss one if change\\r\\n                // happens amids the pending invocation.\\r\\n                trailingCall = true;\\r\\n            }\\r\\n            else {\\r\\n                leadingCall = true;\\r\\n                trailingCall = false;\\r\\n                setTimeout(timeoutCallback, delay);\\r\\n            }\\r\\n            lastCallTime = timeStamp;\\r\\n        }\\r\\n        return proxy;\\r\\n    }\\n\\n    // Minimum delay before invoking the update of observers.\\r\\n    var REFRESH_DELAY = 20;\\r\\n    // A list of substrings of CSS properties used to find transition events that\\r\\n    // might affect dimensions of observed elements.\\r\\n    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\\r\\n    // Check if MutationObserver is available.\\r\\n    var mutationObserverSupported = typeof MutationObserver !== 'undefined';\\r\\n    /**\\r\\n     * Singleton controller class which handles updates of ResizeObserver instances.\\r\\n     */\\r\\n    var ResizeObserverController = /** @class */ (function () {\\r\\n        /**\\r\\n         * Creates a new instance of ResizeObserverController.\\r\\n         *\\r\\n         * @private\\r\\n         */\\r\\n        function ResizeObserverController() {\\r\\n            /**\\r\\n             * Indicates whether DOM listeners have been added.\\r\\n             *\\r\\n             * @private {boolean}\\r\\n             */\\r\\n            this.connected_ = false;\\r\\n            /**\\r\\n             * Tells that controller has subscribed for Mutation Events.\\r\\n             *\\r\\n             * @private {boolean}\\r\\n             */\\r\\n            this.mutationEventsAdded_ = false;\\r\\n            /**\\r\\n             * Keeps reference to the instance of MutationObserver.\\r\\n             *\\r\\n             * @private {MutationObserver}\\r\\n             */\\r\\n            this.mutationsObserver_ = null;\\r\\n            /**\\r\\n             * A list of connected observers.\\r\\n             *\\r\\n             * @private {Array<ResizeObserverSPI>}\\r\\n             */\\r\\n            this.observers_ = [];\\r\\n            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\\r\\n            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\\r\\n        }\\r\\n        /**\\r\\n         * Adds observer to observers list.\\r\\n         *\\r\\n         * @param {ResizeObserverSPI} observer - Observer to be added.\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverController.prototype.addObserver = function (observer) {\\r\\n            if (!~this.observers_.indexOf(observer)) {\\r\\n                this.observers_.push(observer);\\r\\n            }\\r\\n            // Add listeners if they haven't been added yet.\\r\\n            if (!this.connected_) {\\r\\n                this.connect_();\\r\\n            }\\r\\n        };\\r\\n        /**\\r\\n         * Removes observer from observers list.\\r\\n         *\\r\\n         * @param {ResizeObserverSPI} observer - Observer to be removed.\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverController.prototype.removeObserver = function (observer) {\\r\\n            var observers = this.observers_;\\r\\n            var index = observers.indexOf(observer);\\r\\n            // Remove observer if it's present in registry.\\r\\n            if (~index) {\\r\\n                observers.splice(index, 1);\\r\\n            }\\r\\n            // Remove listeners if controller has no connected observers.\\r\\n            if (!observers.length && this.connected_) {\\r\\n                this.disconnect_();\\r\\n            }\\r\\n        };\\r\\n        /**\\r\\n         * Invokes the update of observers. It will continue running updates insofar\\r\\n         * it detects changes.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverController.prototype.refresh = function () {\\r\\n            var changesDetected = this.updateObservers_();\\r\\n            // Continue running updates if changes have been detected as there might\\r\\n            // be future ones caused by CSS transitions.\\r\\n            if (changesDetected) {\\r\\n                this.refresh();\\r\\n            }\\r\\n        };\\r\\n        /**\\r\\n         * Updates every observer from observers list and notifies them of queued\\r\\n         * entries.\\r\\n         *\\r\\n         * @private\\r\\n         * @returns {boolean} Returns \\\"true\\\" if any observer has detected changes in\\r\\n         *      dimensions of it's elements.\\r\\n         */\\r\\n        ResizeObserverController.prototype.updateObservers_ = function () {\\r\\n            // Collect observers that have active observations.\\r\\n            var activeObservers = this.observers_.filter(function (observer) {\\r\\n                return observer.gatherActive(), observer.hasActive();\\r\\n            });\\r\\n            // Deliver notifications in a separate cycle in order to avoid any\\r\\n            // collisions between observers, e.g. when multiple instances of\\r\\n            // ResizeObserver are tracking the same element and the callback of one\\r\\n            // of them changes content dimensions of the observed target. Sometimes\\r\\n            // this may result in notifications being blocked for the rest of observers.\\r\\n            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\\r\\n            return activeObservers.length > 0;\\r\\n        };\\r\\n        /**\\r\\n         * Initializes DOM listeners.\\r\\n         *\\r\\n         * @private\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverController.prototype.connect_ = function () {\\r\\n            // Do nothing if running in a non-browser environment or if listeners\\r\\n            // have been already added.\\r\\n            if (!isBrowser || this.connected_) {\\r\\n                return;\\r\\n            }\\r\\n            // Subscription to the \\\"Transitionend\\\" event is used as a workaround for\\r\\n            // delayed transitions. This way it's possible to capture at least the\\r\\n            // final state of an element.\\r\\n            document.addEventListener('transitionend', this.onTransitionEnd_);\\r\\n            window.addEventListener('resize', this.refresh);\\r\\n            if (mutationObserverSupported) {\\r\\n                this.mutationsObserver_ = new MutationObserver(this.refresh);\\r\\n                this.mutationsObserver_.observe(document, {\\r\\n                    attributes: true,\\r\\n                    childList: true,\\r\\n                    characterData: true,\\r\\n                    subtree: true\\r\\n                });\\r\\n            }\\r\\n            else {\\r\\n                document.addEventListener('DOMSubtreeModified', this.refresh);\\r\\n                this.mutationEventsAdded_ = true;\\r\\n            }\\r\\n            this.connected_ = true;\\r\\n        };\\r\\n        /**\\r\\n         * Removes DOM listeners.\\r\\n         *\\r\\n         * @private\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverController.prototype.disconnect_ = function () {\\r\\n            // Do nothing if running in a non-browser environment or if listeners\\r\\n            // have been already removed.\\r\\n            if (!isBrowser || !this.connected_) {\\r\\n                return;\\r\\n            }\\r\\n            document.removeEventListener('transitionend', this.onTransitionEnd_);\\r\\n            window.removeEventListener('resize', this.refresh);\\r\\n            if (this.mutationsObserver_) {\\r\\n                this.mutationsObserver_.disconnect();\\r\\n            }\\r\\n            if (this.mutationEventsAdded_) {\\r\\n                document.removeEventListener('DOMSubtreeModified', this.refresh);\\r\\n            }\\r\\n            this.mutationsObserver_ = null;\\r\\n            this.mutationEventsAdded_ = false;\\r\\n            this.connected_ = false;\\r\\n        };\\r\\n        /**\\r\\n         * \\\"Transitionend\\\" event handler.\\r\\n         *\\r\\n         * @private\\r\\n         * @param {TransitionEvent} event\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\\r\\n            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\\r\\n            // Detect whether transition may affect dimensions of an element.\\r\\n            var isReflowProperty = transitionKeys.some(function (key) {\\r\\n                return !!~propertyName.indexOf(key);\\r\\n            });\\r\\n            if (isReflowProperty) {\\r\\n                this.refresh();\\r\\n            }\\r\\n        };\\r\\n        /**\\r\\n         * Returns instance of the ResizeObserverController.\\r\\n         *\\r\\n         * @returns {ResizeObserverController}\\r\\n         */\\r\\n        ResizeObserverController.getInstance = function () {\\r\\n            if (!this.instance_) {\\r\\n                this.instance_ = new ResizeObserverController();\\r\\n            }\\r\\n            return this.instance_;\\r\\n        };\\r\\n        /**\\r\\n         * Holds reference to the controller's instance.\\r\\n         *\\r\\n         * @private {ResizeObserverController}\\r\\n         */\\r\\n        ResizeObserverController.instance_ = null;\\r\\n        return ResizeObserverController;\\r\\n    }());\\n\\n    /**\\r\\n     * Defines non-writable/enumerable properties of the provided target object.\\r\\n     *\\r\\n     * @param {Object} target - Object for which to define properties.\\r\\n     * @param {Object} props - Properties to be defined.\\r\\n     * @returns {Object} Target object.\\r\\n     */\\r\\n    var defineConfigurable = (function (target, props) {\\r\\n        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\\r\\n            var key = _a[_i];\\r\\n            Object.defineProperty(target, key, {\\r\\n                value: props[key],\\r\\n                enumerable: false,\\r\\n                writable: false,\\r\\n                configurable: true\\r\\n            });\\r\\n        }\\r\\n        return target;\\r\\n    });\\n\\n    /**\\r\\n     * Returns the global object associated with provided element.\\r\\n     *\\r\\n     * @param {Object} target\\r\\n     * @returns {Object}\\r\\n     */\\r\\n    var getWindowOf = (function (target) {\\r\\n        // Assume that the element is an instance of Node, which means that it\\r\\n        // has the \\\"ownerDocument\\\" property from which we can retrieve a\\r\\n        // corresponding global object.\\r\\n        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\\r\\n        // Return the local global object if it's not possible extract one from\\r\\n        // provided element.\\r\\n        return ownerGlobal || global$1;\\r\\n    });\\n\\n    // Placeholder of an empty content rectangle.\\r\\n    var emptyRect = createRectInit(0, 0, 0, 0);\\r\\n    /**\\r\\n     * Converts provided string to a number.\\r\\n     *\\r\\n     * @param {number|string} value\\r\\n     * @returns {number}\\r\\n     */\\r\\n    function toFloat(value) {\\r\\n        return parseFloat(value) || 0;\\r\\n    }\\r\\n    /**\\r\\n     * Extracts borders size from provided styles.\\r\\n     *\\r\\n     * @param {CSSStyleDeclaration} styles\\r\\n     * @param {...string} positions - Borders positions (top, right, ...)\\r\\n     * @returns {number}\\r\\n     */\\r\\n    function getBordersSize(styles) {\\r\\n        var positions = [];\\r\\n        for (var _i = 1; _i < arguments.length; _i++) {\\r\\n            positions[_i - 1] = arguments[_i];\\r\\n        }\\r\\n        return positions.reduce(function (size, position) {\\r\\n            var value = styles['border-' + position + '-width'];\\r\\n            return size + toFloat(value);\\r\\n        }, 0);\\r\\n    }\\r\\n    /**\\r\\n     * Extracts paddings sizes from provided styles.\\r\\n     *\\r\\n     * @param {CSSStyleDeclaration} styles\\r\\n     * @returns {Object} Paddings box.\\r\\n     */\\r\\n    function getPaddings(styles) {\\r\\n        var positions = ['top', 'right', 'bottom', 'left'];\\r\\n        var paddings = {};\\r\\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\\r\\n            var position = positions_1[_i];\\r\\n            var value = styles['padding-' + position];\\r\\n            paddings[position] = toFloat(value);\\r\\n        }\\r\\n        return paddings;\\r\\n    }\\r\\n    /**\\r\\n     * Calculates content rectangle of provided SVG element.\\r\\n     *\\r\\n     * @param {SVGGraphicsElement} target - Element content rectangle of which needs\\r\\n     *      to be calculated.\\r\\n     * @returns {DOMRectInit}\\r\\n     */\\r\\n    function getSVGContentRect(target) {\\r\\n        var bbox = target.getBBox();\\r\\n        return createRectInit(0, 0, bbox.width, bbox.height);\\r\\n    }\\r\\n    /**\\r\\n     * Calculates content rectangle of provided HTMLElement.\\r\\n     *\\r\\n     * @param {HTMLElement} target - Element for which to calculate the content rectangle.\\r\\n     * @returns {DOMRectInit}\\r\\n     */\\r\\n    function getHTMLElementContentRect(target) {\\r\\n        // Client width & height properties can't be\\r\\n        // used exclusively as they provide rounded values.\\r\\n        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\\r\\n        // By this condition we can catch all non-replaced inline, hidden and\\r\\n        // detached elements. Though elements with width & height properties less\\r\\n        // than 0.5 will be discarded as well.\\r\\n        //\\r\\n        // Without it we would need to implement separate methods for each of\\r\\n        // those cases and it's not possible to perform a precise and performance\\r\\n        // effective test for hidden elements. E.g. even jQuery's ':visible' filter\\r\\n        // gives wrong results for elements with width & height less than 0.5.\\r\\n        if (!clientWidth && !clientHeight) {\\r\\n            return emptyRect;\\r\\n        }\\r\\n        var styles = getWindowOf(target).getComputedStyle(target);\\r\\n        var paddings = getPaddings(styles);\\r\\n        var horizPad = paddings.left + paddings.right;\\r\\n        var vertPad = paddings.top + paddings.bottom;\\r\\n        // Computed styles of width & height are being used because they are the\\r\\n        // only dimensions available to JS that contain non-rounded values. It could\\r\\n        // be possible to utilize the getBoundingClientRect if only it's data wasn't\\r\\n        // affected by CSS transformations let alone paddings, borders and scroll bars.\\r\\n        var width = toFloat(styles.width), height = toFloat(styles.height);\\r\\n        // Width & height include paddings and borders when the 'border-box' box\\r\\n        // model is applied (except for IE).\\r\\n        if (styles.boxSizing === 'border-box') {\\r\\n            // Following conditions are required to handle Internet Explorer which\\r\\n            // doesn't include paddings and borders to computed CSS dimensions.\\r\\n            //\\r\\n            // We can say that if CSS dimensions + paddings are equal to the \\\"client\\\"\\r\\n            // properties then it's either IE, and thus we don't need to subtract\\r\\n            // anything, or an element merely doesn't have paddings/borders styles.\\r\\n            if (Math.round(width + horizPad) !== clientWidth) {\\r\\n                width -= getBordersSize(styles, 'left', 'right') + horizPad;\\r\\n            }\\r\\n            if (Math.round(height + vertPad) !== clientHeight) {\\r\\n                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\\r\\n            }\\r\\n        }\\r\\n        // Following steps can't be applied to the document's root element as its\\r\\n        // client[Width/Height] properties represent viewport area of the window.\\r\\n        // Besides, it's as well not necessary as the <html> itself neither has\\r\\n        // rendered scroll bars nor it can be clipped.\\r\\n        if (!isDocumentElement(target)) {\\r\\n            // In some browsers (only in Firefox, actually) CSS width & height\\r\\n            // include scroll bars size which can be removed at this step as scroll\\r\\n            // bars are the only difference between rounded dimensions + paddings\\r\\n            // and \\\"client\\\" properties, though that is not always true in Chrome.\\r\\n            var vertScrollbar = Math.round(width + horizPad) - clientWidth;\\r\\n            var horizScrollbar = Math.round(height + vertPad) - clientHeight;\\r\\n            // Chrome has a rather weird rounding of \\\"client\\\" properties.\\r\\n            // E.g. for an element with content width of 314.2px it sometimes gives\\r\\n            // the client width of 315px and for the width of 314.7px it may give\\r\\n            // 314px. And it doesn't happen all the time. So just ignore this delta\\r\\n            // as a non-relevant.\\r\\n            if (Math.abs(vertScrollbar) !== 1) {\\r\\n                width -= vertScrollbar;\\r\\n            }\\r\\n            if (Math.abs(horizScrollbar) !== 1) {\\r\\n                height -= horizScrollbar;\\r\\n            }\\r\\n        }\\r\\n        return createRectInit(paddings.left, paddings.top, width, height);\\r\\n    }\\r\\n    /**\\r\\n     * Checks whether provided element is an instance of the SVGGraphicsElement.\\r\\n     *\\r\\n     * @param {Element} target - Element to be checked.\\r\\n     * @returns {boolean}\\r\\n     */\\r\\n    var isSVGGraphicsElement = (function () {\\r\\n        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\\r\\n        // interface.\\r\\n        if (typeof SVGGraphicsElement !== 'undefined') {\\r\\n            return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\\r\\n        }\\r\\n        // If it's so, then check that element is at least an instance of the\\r\\n        // SVGElement and that it has the \\\"getBBox\\\" method.\\r\\n        // eslint-disable-next-line no-extra-parens\\r\\n        return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\\r\\n            typeof target.getBBox === 'function'); };\\r\\n    })();\\r\\n    /**\\r\\n     * Checks whether provided element is a document element (<html>).\\r\\n     *\\r\\n     * @param {Element} target - Element to be checked.\\r\\n     * @returns {boolean}\\r\\n     */\\r\\n    function isDocumentElement(target) {\\r\\n        return target === getWindowOf(target).document.documentElement;\\r\\n    }\\r\\n    /**\\r\\n     * Calculates an appropriate content rectangle for provided html or svg element.\\r\\n     *\\r\\n     * @param {Element} target - Element content rectangle of which needs to be calculated.\\r\\n     * @returns {DOMRectInit}\\r\\n     */\\r\\n    function getContentRect(target) {\\r\\n        if (!isBrowser) {\\r\\n            return emptyRect;\\r\\n        }\\r\\n        if (isSVGGraphicsElement(target)) {\\r\\n            return getSVGContentRect(target);\\r\\n        }\\r\\n        return getHTMLElementContentRect(target);\\r\\n    }\\r\\n    /**\\r\\n     * Creates rectangle with an interface of the DOMRectReadOnly.\\r\\n     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\\r\\n     *\\r\\n     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\\r\\n     * @returns {DOMRectReadOnly}\\r\\n     */\\r\\n    function createReadOnlyRect(_a) {\\r\\n        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\\r\\n        // If DOMRectReadOnly is available use it as a prototype for the rectangle.\\r\\n        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\\r\\n        var rect = Object.create(Constr.prototype);\\r\\n        // Rectangle's properties are not writable and non-enumerable.\\r\\n        defineConfigurable(rect, {\\r\\n            x: x, y: y, width: width, height: height,\\r\\n            top: y,\\r\\n            right: x + width,\\r\\n            bottom: height + y,\\r\\n            left: x\\r\\n        });\\r\\n        return rect;\\r\\n    }\\r\\n    /**\\r\\n     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\\r\\n     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\\r\\n     *\\r\\n     * @param {number} x - X coordinate.\\r\\n     * @param {number} y - Y coordinate.\\r\\n     * @param {number} width - Rectangle's width.\\r\\n     * @param {number} height - Rectangle's height.\\r\\n     * @returns {DOMRectInit}\\r\\n     */\\r\\n    function createRectInit(x, y, width, height) {\\r\\n        return { x: x, y: y, width: width, height: height };\\r\\n    }\\n\\n    /**\\r\\n     * Class that is responsible for computations of the content rectangle of\\r\\n     * provided DOM element and for keeping track of it's changes.\\r\\n     */\\r\\n    var ResizeObservation = /** @class */ (function () {\\r\\n        /**\\r\\n         * Creates an instance of ResizeObservation.\\r\\n         *\\r\\n         * @param {Element} target - Element to be observed.\\r\\n         */\\r\\n        function ResizeObservation(target) {\\r\\n            /**\\r\\n             * Broadcasted width of content rectangle.\\r\\n             *\\r\\n             * @type {number}\\r\\n             */\\r\\n            this.broadcastWidth = 0;\\r\\n            /**\\r\\n             * Broadcasted height of content rectangle.\\r\\n             *\\r\\n             * @type {number}\\r\\n             */\\r\\n            this.broadcastHeight = 0;\\r\\n            /**\\r\\n             * Reference to the last observed content rectangle.\\r\\n             *\\r\\n             * @private {DOMRectInit}\\r\\n             */\\r\\n            this.contentRect_ = createRectInit(0, 0, 0, 0);\\r\\n            this.target = target;\\r\\n        }\\r\\n        /**\\r\\n         * Updates content rectangle and tells whether it's width or height properties\\r\\n         * have changed since the last broadcast.\\r\\n         *\\r\\n         * @returns {boolean}\\r\\n         */\\r\\n        ResizeObservation.prototype.isActive = function () {\\r\\n            var rect = getContentRect(this.target);\\r\\n            this.contentRect_ = rect;\\r\\n            return (rect.width !== this.broadcastWidth ||\\r\\n                rect.height !== this.broadcastHeight);\\r\\n        };\\r\\n        /**\\r\\n         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\\r\\n         * from the corresponding properties of the last observed content rectangle.\\r\\n         *\\r\\n         * @returns {DOMRectInit} Last observed content rectangle.\\r\\n         */\\r\\n        ResizeObservation.prototype.broadcastRect = function () {\\r\\n            var rect = this.contentRect_;\\r\\n            this.broadcastWidth = rect.width;\\r\\n            this.broadcastHeight = rect.height;\\r\\n            return rect;\\r\\n        };\\r\\n        return ResizeObservation;\\r\\n    }());\\n\\n    var ResizeObserverEntry = /** @class */ (function () {\\r\\n        /**\\r\\n         * Creates an instance of ResizeObserverEntry.\\r\\n         *\\r\\n         * @param {Element} target - Element that is being observed.\\r\\n         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\\r\\n         */\\r\\n        function ResizeObserverEntry(target, rectInit) {\\r\\n            var contentRect = createReadOnlyRect(rectInit);\\r\\n            // According to the specification following properties are not writable\\r\\n            // and are also not enumerable in the native implementation.\\r\\n            //\\r\\n            // Property accessors are not being used as they'd require to define a\\r\\n            // private WeakMap storage which may cause memory leaks in browsers that\\r\\n            // don't support this type of collections.\\r\\n            defineConfigurable(this, { target: target, contentRect: contentRect });\\r\\n        }\\r\\n        return ResizeObserverEntry;\\r\\n    }());\\n\\n    var ResizeObserverSPI = /** @class */ (function () {\\r\\n        /**\\r\\n         * Creates a new instance of ResizeObserver.\\r\\n         *\\r\\n         * @param {ResizeObserverCallback} callback - Callback function that is invoked\\r\\n         *      when one of the observed elements changes it's content dimensions.\\r\\n         * @param {ResizeObserverController} controller - Controller instance which\\r\\n         *      is responsible for the updates of observer.\\r\\n         * @param {ResizeObserver} callbackCtx - Reference to the public\\r\\n         *      ResizeObserver instance which will be passed to callback function.\\r\\n         */\\r\\n        function ResizeObserverSPI(callback, controller, callbackCtx) {\\r\\n            /**\\r\\n             * Collection of resize observations that have detected changes in dimensions\\r\\n             * of elements.\\r\\n             *\\r\\n             * @private {Array<ResizeObservation>}\\r\\n             */\\r\\n            this.activeObservations_ = [];\\r\\n            /**\\r\\n             * Registry of the ResizeObservation instances.\\r\\n             *\\r\\n             * @private {Map<Element, ResizeObservation>}\\r\\n             */\\r\\n            this.observations_ = new MapShim();\\r\\n            if (typeof callback !== 'function') {\\r\\n                throw new TypeError('The callback provided as parameter 1 is not a function.');\\r\\n            }\\r\\n            this.callback_ = callback;\\r\\n            this.controller_ = controller;\\r\\n            this.callbackCtx_ = callbackCtx;\\r\\n        }\\r\\n        /**\\r\\n         * Starts observing provided element.\\r\\n         *\\r\\n         * @param {Element} target - Element to be observed.\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.observe = function (target) {\\r\\n            if (!arguments.length) {\\r\\n                throw new TypeError('1 argument required, but only 0 present.');\\r\\n            }\\r\\n            // Do nothing if current environment doesn't have the Element interface.\\r\\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\\r\\n                return;\\r\\n            }\\r\\n            if (!(target instanceof getWindowOf(target).Element)) {\\r\\n                throw new TypeError('parameter 1 is not of type \\\"Element\\\".');\\r\\n            }\\r\\n            var observations = this.observations_;\\r\\n            // Do nothing if element is already being observed.\\r\\n            if (observations.has(target)) {\\r\\n                return;\\r\\n            }\\r\\n            observations.set(target, new ResizeObservation(target));\\r\\n            this.controller_.addObserver(this);\\r\\n            // Force the update of observations.\\r\\n            this.controller_.refresh();\\r\\n        };\\r\\n        /**\\r\\n         * Stops observing provided element.\\r\\n         *\\r\\n         * @param {Element} target - Element to stop observing.\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.unobserve = function (target) {\\r\\n            if (!arguments.length) {\\r\\n                throw new TypeError('1 argument required, but only 0 present.');\\r\\n            }\\r\\n            // Do nothing if current environment doesn't have the Element interface.\\r\\n            if (typeof Element === 'undefined' || !(Element instanceof Object)) {\\r\\n                return;\\r\\n            }\\r\\n            if (!(target instanceof getWindowOf(target).Element)) {\\r\\n                throw new TypeError('parameter 1 is not of type \\\"Element\\\".');\\r\\n            }\\r\\n            var observations = this.observations_;\\r\\n            // Do nothing if element is not being observed.\\r\\n            if (!observations.has(target)) {\\r\\n                return;\\r\\n            }\\r\\n            observations.delete(target);\\r\\n            if (!observations.size) {\\r\\n                this.controller_.removeObserver(this);\\r\\n            }\\r\\n        };\\r\\n        /**\\r\\n         * Stops observing all elements.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.disconnect = function () {\\r\\n            this.clearActive();\\r\\n            this.observations_.clear();\\r\\n            this.controller_.removeObserver(this);\\r\\n        };\\r\\n        /**\\r\\n         * Collects observation instances the associated element of which has changed\\r\\n         * it's content rectangle.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.gatherActive = function () {\\r\\n            var _this = this;\\r\\n            this.clearActive();\\r\\n            this.observations_.forEach(function (observation) {\\r\\n                if (observation.isActive()) {\\r\\n                    _this.activeObservations_.push(observation);\\r\\n                }\\r\\n            });\\r\\n        };\\r\\n        /**\\r\\n         * Invokes initial callback function with a list of ResizeObserverEntry\\r\\n         * instances collected from active resize observations.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.broadcastActive = function () {\\r\\n            // Do nothing if observer doesn't have active observations.\\r\\n            if (!this.hasActive()) {\\r\\n                return;\\r\\n            }\\r\\n            var ctx = this.callbackCtx_;\\r\\n            // Create ResizeObserverEntry instance for every active observation.\\r\\n            var entries = this.activeObservations_.map(function (observation) {\\r\\n                return new ResizeObserverEntry(observation.target, observation.broadcastRect());\\r\\n            });\\r\\n            this.callback_.call(ctx, entries, ctx);\\r\\n            this.clearActive();\\r\\n        };\\r\\n        /**\\r\\n         * Clears the collection of active observations.\\r\\n         *\\r\\n         * @returns {void}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.clearActive = function () {\\r\\n            this.activeObservations_.splice(0);\\r\\n        };\\r\\n        /**\\r\\n         * Tells whether observer has active observations.\\r\\n         *\\r\\n         * @returns {boolean}\\r\\n         */\\r\\n        ResizeObserverSPI.prototype.hasActive = function () {\\r\\n            return this.activeObservations_.length > 0;\\r\\n        };\\r\\n        return ResizeObserverSPI;\\r\\n    }());\\n\\n    // Registry of internal observers. If WeakMap is not available use current shim\\r\\n    // for the Map collection as it has all required methods and because WeakMap\\r\\n    // can't be fully polyfilled anyway.\\r\\n    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\\r\\n    /**\\r\\n     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\\r\\n     * exposing only those methods and properties that are defined in the spec.\\r\\n     */\\r\\n    var ResizeObserver = /** @class */ (function () {\\r\\n        /**\\r\\n         * Creates a new instance of ResizeObserver.\\r\\n         *\\r\\n         * @param {ResizeObserverCallback} callback - Callback that is invoked when\\r\\n         *      dimensions of the observed elements change.\\r\\n         */\\r\\n        function ResizeObserver(callback) {\\r\\n            if (!(this instanceof ResizeObserver)) {\\r\\n                throw new TypeError('Cannot call a class as a function.');\\r\\n            }\\r\\n            if (!arguments.length) {\\r\\n                throw new TypeError('1 argument required, but only 0 present.');\\r\\n            }\\r\\n            var controller = ResizeObserverController.getInstance();\\r\\n            var observer = new ResizeObserverSPI(callback, controller, this);\\r\\n            observers.set(this, observer);\\r\\n        }\\r\\n        return ResizeObserver;\\r\\n    }());\\r\\n    // Expose public methods of ResizeObserver.\\r\\n    [\\r\\n        'observe',\\r\\n        'unobserve',\\r\\n        'disconnect'\\r\\n    ].forEach(function (method) {\\r\\n        ResizeObserver.prototype[method] = function () {\\r\\n            var _a;\\r\\n            return (_a = observers.get(this))[method].apply(_a, arguments);\\r\\n        };\\r\\n    });\\n\\n    var index = (function () {\\r\\n        // Export existing implementation if available.\\r\\n        if (typeof global$1.ResizeObserver !== 'undefined') {\\r\\n            return global$1.ResizeObserver;\\r\\n        }\\r\\n        return ResizeObserver;\\r\\n    })();\\n\\n    return index;\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"factory\",\"define\",\"amd\",\"ResizeObserver\",\"throttle\",\"callback\",\"delay\",\"resolvePending\",\"leadingCall\",\"trailingCall\",\"proxy\",\"timeoutCallback\",\"requestAnimationFrame$1\",\"timeStamp\",\"Date\",\"now\",\"trailingTimeout\",\"lastCallTime\",\"setTimeout\",\"getBordersSize\",\"styles\",\"positions\",\"_i\",\"arguments\",\"length\",\"reduce\",\"size\",\"position\",\"parseFloat\",\"value\",\"MapShim\",\"getIndex\",\"arr\",\"key\",\"result\",\"some\",\"entry\",\"index\",\"Map\",\"class_1\",\"__entries__\",\"Object\",\"defineProperty\",\"prototype\",\"get\",\"enumerable\",\"configurable\",\"class_1.prototype.get\",\"set\",\"class_1.prototype.set\",\"push\",\"delete\",\"class_1.prototype.delete\",\"entries\",\"splice\",\"has\",\"class_1.prototype.has\",\"clear\",\"class_1.prototype.clear\",\"forEach\",\"class_1.prototype.forEach\",\"ctx\",\"_a\",\"call\",\"isBrowser\",\"window\",\"document\",\"global$1\",\"Math\",\"self\",\"Function\",\"requestAnimationFrame\",\"bind\",\"transitionKeys\",\"mutationObserverSupported\",\"MutationObserver\",\"ResizeObserverController\",\"mutationEventsAdded_\",\"connected_\",\"mutationsObserver_\",\"observers_\",\"onTransitionEnd_\",\"refresh\",\"REFRESH_DELAY\",\"addObserver\",\"ResizeObserverController.prototype.addObserver\",\"observer\",\"indexOf\",\"connect_\",\"removeObserver\",\"ResizeObserverController.prototype.removeObserver\",\"observers\",\"disconnect_\",\"ResizeObserverController.prototype.refresh\",\"updateObservers_\",\"changesDetected\",\"ResizeObserverController.prototype.updateObservers_\",\"activeObservers\",\"filter\",\"gatherActive\",\"hasActive\",\"broadcastActive\",\"ResizeObserverController.prototype.connect_\",\"addEventListener\",\"observe\",\"attributes\",\"childList\",\"characterData\",\"subtree\",\"ResizeObserverController.prototype.disconnect_\",\"removeEventListener\",\"disconnect\",\"ResizeObserverController.prototype.onTransitionEnd_\",\"_b\",\"propertyName\",\"isReflowProperty\",\"getInstance\",\"ResizeObserverController.getInstance\",\"instance_\",\"defineConfigurable\",\"target\",\"props\",\"keys\",\"writable\",\"getWindowOf\",\"ownerDocument\",\"defaultView\",\"emptyRect\",\"x\",\"y\",\"width\",\"height\",\"isSVGGraphicsElement\",\"SVGGraphicsElement\",\"SVGElement\",\"getBBox\",\"ResizeObservation\",\"broadcastHeight\",\"broadcastWidth\",\"contentRect_\",\"isActive\",\"ResizeObservation.prototype.isActive\",\"bbox\",\"clientWidth\",\"clientHeight\",\"getComputedStyle\",\"paddings\",\"positions_1\",\"horizPad\",\"left\",\"right\",\"vertPad\",\"top\",\"bottom\",\"boxSizing\",\"round\",\"documentElement\",\"vertScrollbar\",\"horizScrollbar\",\"abs\",\"rect\",\"broadcastRect\",\"ResizeObservation.prototype.broadcastRect\",\"ResizeObserverEntry\",\"rectInit\",\"create\",\"Constr\",\"DOMRectReadOnly\",\"contentRect\",\"ResizeObserverSPI\",\"controller\",\"callbackCtx\",\"activeObservations_\",\"observations_\",\"TypeError\",\"callback_\",\"controller_\",\"callbackCtx_\",\"ResizeObserverSPI.prototype.observe\",\"Element\",\"observations\",\"unobserve\",\"ResizeObserverSPI.prototype.unobserve\",\"ResizeObserverSPI.prototype.disconnect\",\"clearActive\",\"ResizeObserverSPI.prototype.gatherActive\",\"_this\",\"observation\",\"ResizeObserverSPI.prototype.broadcastActive\",\"map\",\"ResizeObserverSPI.prototype.clearActive\",\"ResizeObserverSPI.prototype.hasActive\",\"WeakMap\",\"method\",\"apply\"]\n}\n"]