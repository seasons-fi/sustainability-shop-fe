["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/app-check/dist/index.cjs.js"],"~:js","shadow$provide.module$node_modules$$firebase$app_check$dist$index_cjs=function(global,require,module,exports){function getState(app){return APP_CHECK_STATES.get(app)||DEFAULT_STATE}function setState(app,state){APP_CHECK_STATES.set(app,state)}function ensureActivated(app){if(!getState(app).activated)throw ERROR_FACTORY.create(\"use-before-activation\",{appName:app.name});}function uuidv4(){return\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,function(c){var r=16*Math.random()|0;return(\"x\"===\nc?r:r&3|8).toString(16)})}function initialize(app,siteKey){var state=getState(app),initialized=new util.Deferred;setState(app,tslib.__assign(tslib.__assign({},state),{reCAPTCHAState:{initialized}}));var divId=\"fire_app_check_\"+app.name;state=document.createElement(\"div\");state.id=divId;state.style.display=\"none\";document.body.appendChild(state);var grecaptcha=self.grecaptcha;grecaptcha?grecaptcha.ready(function(){renderInvisibleWidget(app,siteKey,grecaptcha,divId);initialized.resolve(grecaptcha)}):\nloadReCAPTCHAScript(function(){var grecaptcha=self.grecaptcha;if(!grecaptcha)throw Error(\"no recaptcha\");grecaptcha.ready(function(){renderInvisibleWidget(app,siteKey,grecaptcha,divId);initialized.resolve(grecaptcha)})});return initialized.promise}function getToken$2(app){return tslib.__awaiter(this,void 0,void 0,function(){var reCAPTCHAState,recaptcha;return tslib.__generator(this,function(_a){switch(_a.label){case 0:return ensureActivated(app),reCAPTCHAState=getState(app).reCAPTCHAState,[4,reCAPTCHAState.initialized.promise];\ncase 1:return recaptcha=_a.sent(),[2,new Promise(function(resolve,_reject){var reCAPTCHAState=getState(app).reCAPTCHAState;recaptcha.ready(function(){resolve(recaptcha.execute(reCAPTCHAState.widgetId,{action:\"fire_app_check\"}))})})]}})})}function renderInvisibleWidget(app,siteKey,grecaptcha,container){siteKey=grecaptcha.render(container,{sitekey:siteKey,size:\"invisible\"});grecaptcha=getState(app);setState(app,tslib.__assign(tslib.__assign({},grecaptcha),{reCAPTCHAState:tslib.__assign(tslib.__assign({},\ngrecaptcha.reCAPTCHAState),{widgetId:siteKey})}))}function loadReCAPTCHAScript(onload){var script=document.createElement(\"script\");script.src=\"https://www.google.com/recaptcha/api.js\";script.onload=onload;document.head.appendChild(script)}function sleep(ms){return new Promise(function(resolve){setTimeout(resolve,ms)})}function exchangeToken(_a,platformLoggerProvider){var url=_a.url,body=_a.body;return tslib.__awaiter(this,void 0,void 0,function(){var headers,platformLogger,options,response,originalError_1,\nresponseBody,originalError_2,match,timeToLiveAsNumber,now;return tslib.__generator(this,function(_b){switch(_b.label){case 0:headers={\"Content-Type\":\"application/json\"},(platformLogger=platformLoggerProvider.getImmediate({optional:!0}))&&(headers[\"X-Firebase-Client\"]=platformLogger.getPlatformInfoString()),options={method:\"POST\",body:JSON.stringify(body),headers},_b.label=1;case 1:return _b.trys.push([1,3,,4]),[4,fetch(url,options)];case 2:return response=_b.sent(),[3,4];case 3:throw originalError_1=\n_b.sent(),ERROR_FACTORY.create(\"fetch-network-error\",{originalErrorMessage:originalError_1.message});case 4:if(200!==response.status)throw ERROR_FACTORY.create(\"fetch-status-error\",{httpStatus:response.status});_b.label=5;case 5:return _b.trys.push([5,7,,8]),[4,response.json()];case 6:return responseBody=_b.sent(),[3,8];case 7:throw originalError_2=_b.sent(),ERROR_FACTORY.create(\"fetch-parse-error\",{originalErrorMessage:originalError_2.message});case 8:match=responseBody.ttl.match(/^([\\d.]+)(s)$/);\nif(!match||!match[2]||isNaN(Number(match[1])))throw ERROR_FACTORY.create(\"fetch-parse-error\",{originalErrorMessage:\"ttl field (timeToLive) is not in standard Protobuf Duration format: \"+responseBody.ttl});timeToLiveAsNumber=1E3*Number(match[1]);now=Date.now();return[2,{token:responseBody.attestationToken,expireTimeMillis:now+timeToLiveAsNumber,issuedAtTimeMillis:now}]}})})}function getExchangeRecaptchaTokenRequest(app,reCAPTCHAToken){app=app.options;return{url:\"https://content-firebaseappcheck.googleapis.com/v1beta/projects/\"+\napp.projectId+\"/apps/\"+app.appId+\":exchangeRecaptchaToken?key\\x3d\"+app.apiKey,body:{recaptcha_token:reCAPTCHAToken}}}function getExchangeDebugTokenRequest(app,debugToken){app=app.options;return{url:\"https://content-firebaseappcheck.googleapis.com/v1beta/projects/\"+app.projectId+\"/apps/\"+app.appId+\":exchangeDebugToken?key\\x3d\"+app.apiKey,body:{debug_token:debugToken}}}function getDBPromise(){return dbPromise?dbPromise:dbPromise=new Promise(function(resolve,reject){try{var request=indexedDB.open(\"firebase-app-check-database\",\n1);request.onsuccess=function(event){resolve(event.target.result)};request.onerror=function(event){var _a;reject(ERROR_FACTORY.create(\"storage-open\",{originalErrorMessage:null===(_a=event.target.error)||void 0===_a?void 0:_a.message}))};request.onupgradeneeded=function(event){var db=event.target.result;switch(event.oldVersion){case 0:db.createObjectStore(\"firebase-app-check-store\",{keyPath:\"compositeKey\"})}}}catch(e){reject(ERROR_FACTORY.create(\"storage-open\",{originalErrorMessage:e.message}))}})}\nfunction write(key,value){return tslib.__awaiter(this,void 0,void 0,function(){var db,transaction,store,request;return tslib.__generator(this,function(_a$jscomp$0){switch(_a$jscomp$0.label){case 0:return[4,getDBPromise()];case 1:return db=_a$jscomp$0.sent(),transaction=db.transaction(\"firebase-app-check-store\",\"readwrite\"),store=transaction.objectStore(\"firebase-app-check-store\"),request=store.put({compositeKey:key,value}),[2,new Promise(function(resolve,reject){request.onsuccess=function(_event){resolve()};\ntransaction.onerror=function(event){var _a;reject(ERROR_FACTORY.create(\"storage-set\",{originalErrorMessage:null===(_a=event.target.error)||void 0===_a?void 0:_a.message}))}})]}})})}function read(key){return tslib.__awaiter(this,void 0,void 0,function(){var db,transaction,store,request;return tslib.__generator(this,function(_a$jscomp$0){switch(_a$jscomp$0.label){case 0:return[4,getDBPromise()];case 1:return db=_a$jscomp$0.sent(),transaction=db.transaction(\"firebase-app-check-store\",\"readonly\"),store=\ntransaction.objectStore(\"firebase-app-check-store\"),request=store.get(key),[2,new Promise(function(resolve,reject){request.onsuccess=function(event){(event=event.target.result)?resolve(event.value):resolve(void 0)};transaction.onerror=function(event){var _a;reject(ERROR_FACTORY.create(\"storage-get\",{originalErrorMessage:null===(_a=event.target.error)||void 0===_a?void 0:_a.message}))}})]}})})}function readTokenFromStorage(app){return tslib.__awaiter(this,void 0,void 0,function(){var token,e_1;return tslib.__generator(this,\nfunction(_a){switch(_a.label){case 0:if(!util.isIndexedDBAvailable())return[3,5];token=void 0;_a.label=1;case 1:return _a.trys.push([1,3,,4]),[4,read(app.options.appId+\"-\"+app.name)];case 2:return token=_a.sent(),[3,4];case 3:return e_1=_a.sent(),logger.warn(\"Failed to read token from indexeddb. Error: \"+e_1),[3,4];case 4:return[2,token];case 5:return[2,void 0]}})})}function writeTokenToStorage(app,token){return util.isIndexedDBAvailable()?write(app.options.appId+\"-\"+app.name,token).catch(function(e){logger.warn(\"Failed to write token to indexeddb. Error: \"+\ne)}):Promise.resolve()}function readOrCreateDebugTokenFromStorage(){return tslib.__awaiter(this,void 0,void 0,function(){var existingDebugToken,newToken;return tslib.__generator(this,function(_a){switch(_a.label){case 0:existingDebugToken=void 0,_a.label=1;case 1:return _a.trys.push([1,3,,4]),[4,read(\"debug-token\")];case 2:return existingDebugToken=_a.sent(),[3,4];case 3:return _a.sent(),[3,4];case 4:if(existingDebugToken)return[2,existingDebugToken];newToken=uuidv4();write(\"debug-token\",newToken).catch(function(e){return logger.warn(\"Failed to persist debug token to indexeddb. Error: \"+\ne)});console.log(\"AppCheck debug token: \"+newToken+\". You will need to whitelist it in the Firebase console for it to work\");return[2,newToken]}})})}function getDebugToken(){return tslib.__awaiter(this,void 0,void 0,function(){var state;return tslib.__generator(this,function(_a){state=DEBUG_STATE;if(state.enabled&&state.token)return[2,state.token.promise];throw Error(\"\\n            Can't get debug token in production mode.\\n        \");})})}function getToken$1(app,platformLoggerProvider,forceRefresh){void 0===\nforceRefresh&&(forceRefresh=!1);return tslib.__awaiter(this,void 0,void 0,function(){var state,token,error,cachedToken,tokenFromDebugExchange,_a,_b,_c,customToken,issuedAtTimeSeconds,issuedAtTimeMillis,attestedClaimsToken,e_1,interopTokenResult;return tslib.__generator(this,function(_d){switch(_d.label){case 0:return ensureActivated(app),state=getState(app),token=state.token,error=void 0,token?[3,2]:[4,readTokenFromStorage(app)];case 1:(cachedToken=_d.sent())&&0<cachedToken.expireTimeMillis-Date.now()&&\n(token=cachedToken,setState(app,tslib.__assign(tslib.__assign({},state),{token})),notifyTokenListeners(app,{token:token.token})),_d.label=2;case 2:if(!forceRefresh&&token&&0<token.expireTimeMillis-Date.now())return[2,{token:token.token}];if(!DEBUG_STATE.enabled)return[3,6];_a=exchangeToken;_b=getExchangeDebugTokenRequest;_c=[app];return[4,getDebugToken()];case 3:return[4,_a.apply(void 0,[_b.apply(void 0,_c.concat([_d.sent()])),platformLoggerProvider])];case 4:return tokenFromDebugExchange=_d.sent(),\n[4,writeTokenToStorage(app,tokenFromDebugExchange)];case 5:return _d.sent(),setState(app,tslib.__assign(tslib.__assign({},state),{token:tokenFromDebugExchange})),[2,{token:tokenFromDebugExchange.token}];case 6:return _d.trys.push([6,12,,13]),state.customProvider?[4,state.customProvider.getToken()]:[3,8];case 7:return customToken=_d.sent(),issuedAtTimeSeconds=util.issuedAtTime(customToken.token),issuedAtTimeMillis=null!==issuedAtTimeSeconds&&issuedAtTimeSeconds<Date.now()&&0<issuedAtTimeSeconds?1E3*\nissuedAtTimeSeconds:Date.now(),token=tslib.__assign(tslib.__assign({},customToken),{issuedAtTimeMillis}),[3,11];case 8:return[4,getToken$2(app).catch(function(_e){throw ERROR_FACTORY.create(\"recaptcha-error\");})];case 9:return attestedClaimsToken=_d.sent(),[4,exchangeToken(getExchangeRecaptchaTokenRequest(app,attestedClaimsToken),platformLoggerProvider)];case 10:token=_d.sent(),_d.label=11;case 11:return[3,13];case 12:return e_1=_d.sent(),logger.error(e_1),error=e_1,[3,13];case 13:if(token)return[3,\n14];interopTokenResult=makeDummyTokenResult(error);return[3,16];case 14:return interopTokenResult={token:token.token},setState(app,tslib.__assign(tslib.__assign({},state),{token})),[4,writeTokenToStorage(app,token)];case 15:_d.sent(),_d.label=16;case 16:return notifyTokenListeners(app,interopTokenResult),[2,interopTokenResult]}})})}function addTokenListener(app,platformLoggerProvider,type,listener,onError){var state=getState(app);type={next:listener,error:onError,type};type=tslib.__assign(tslib.__assign({},\nstate),{tokenObservers:tslib.__spreadArray(tslib.__spreadArray([],state.tokenObservers),[type])});type.tokenRefresher||(platformLoggerProvider=createTokenRefresher(app,platformLoggerProvider),type.tokenRefresher=platformLoggerProvider);!type.tokenRefresher.isRunning()&&state.isTokenAutoRefreshEnabled&&type.tokenRefresher.start();if(state.token&&0<state.token.expireTimeMillis-Date.now()){var validToken_1=state.token;Promise.resolve().then(function(){return listener({token:validToken_1.token})}).catch(function(){})}setState(app,\ntype)}function removeTokenListener(app,listener){var state=getState(app),newObservers=state.tokenObservers.filter(function(tokenObserver){return tokenObserver.next!==listener});0===newObservers.length&&state.tokenRefresher&&state.tokenRefresher.isRunning()&&state.tokenRefresher.stop();setState(app,tslib.__assign(tslib.__assign({},state),{tokenObservers:newObservers}))}function createTokenRefresher(app,platformLoggerProvider){var _this=this;return new Refresher(function(){return tslib.__awaiter(_this,\nvoid 0,void 0,function(){var state,result;return tslib.__generator(this,function(_a){switch(_a.label){case 0:return state=getState(app),state.token?[3,2]:[4,getToken$1(app,platformLoggerProvider)];case 1:return result=_a.sent(),[3,4];case 2:return[4,getToken$1(app,platformLoggerProvider,!0)];case 3:result=_a.sent(),_a.label=4;case 4:if(result.error)throw result.error;return[2]}})})},function(){return!0},function(){var state=getState(app);if(state.token){var nextRefreshTimeMillis=state.token.issuedAtTimeMillis+\n.5*(state.token.expireTimeMillis-state.token.issuedAtTimeMillis)+3E5;nextRefreshTimeMillis=Math.min(nextRefreshTimeMillis,state.token.expireTimeMillis-3E5);return Math.max(0,nextRefreshTimeMillis-Date.now())}return 0},TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT)}function notifyTokenListeners(app,token){var _i=0;for(app=getState(app).tokenObservers;_i<app.length;_i++){var observer=app[_i];try{\"EXTERNAL\"===observer.type&&null!=token.error?observer.error(token.error):observer.next(token)}catch(ignored){}}}\nfunction makeDummyTokenResult(error){return{token:util.base64.encodeString(JSON.stringify(defaultTokenErrorData),!1),error}}function activate(app,siteKeyOrProvider,isTokenAutoRefreshEnabled){var state=getState(app);if(state.activated)throw ERROR_FACTORY.create(\"already-activated\",{appName:app.name});state=tslib.__assign(tslib.__assign({},state),{activated:!0});\"string\"===typeof siteKeyOrProvider?state.siteKey=siteKeyOrProvider:state.customProvider=siteKeyOrProvider;state.isTokenAutoRefreshEnabled=\nvoid 0===isTokenAutoRefreshEnabled?app.automaticDataCollectionEnabled:isTokenAutoRefreshEnabled;setState(app,state);state.siteKey&&initialize(app,state.siteKey).catch(function(){})}function getToken(app,platformLoggerProvider,forceRefresh){return tslib.__awaiter(this,void 0,void 0,function(){var result;return tslib.__generator(this,function(_a){switch(_a.label){case 0:return[4,getToken$1(app,platformLoggerProvider,forceRefresh)];case 1:result=_a.sent();if(result.error)throw result.error;return[2,\n{token:result.token}]}})})}function onTokenChanged(app,platformLoggerProvider,onNextOrObserver,onError,onCompletion){var nextFn=function(){};onCompletion=function(){};nextFn=null!=onNextOrObserver.next?onNextOrObserver.next.bind(onNextOrObserver):onNextOrObserver;null!=onNextOrObserver.error?onCompletion=onNextOrObserver.error.bind(onNextOrObserver):onError&&(onCompletion=onError);addTokenListener(app,platformLoggerProvider,\"EXTERNAL\",nextFn,onCompletion);return function(){return removeTokenListener(app,\nnextFn)}}function factory(app,platformLoggerProvider){return{app,activate:function(siteKeyOrProvider,isTokenAutoRefreshEnabled){return activate(app,siteKeyOrProvider,isTokenAutoRefreshEnabled)},setTokenAutoRefreshEnabled:function(isTokenAutoRefreshEnabled){var state=getState(app);state.tokenRefresher&&(!0===isTokenAutoRefreshEnabled?state.tokenRefresher.start():state.tokenRefresher.stop());setState(app,tslib.__assign(tslib.__assign({},state),{isTokenAutoRefreshEnabled}))},getToken:function(forceRefresh){return getToken(app,\nplatformLoggerProvider,forceRefresh)},onTokenChanged:function(onNextOrObserver,onError,onCompletion){return onTokenChanged(app,platformLoggerProvider,onNextOrObserver,onError)},INTERNAL:{delete:function(){for(var _i=0,tokenObservers_1=getState(app).tokenObservers;_i<tokenObservers_1.length;_i++)removeTokenListener(app,tokenObservers_1[_i].next);return Promise.resolve()}}}}function internalFactory(app,platformLoggerProvider){return{getToken:function(forceRefresh){return getToken$1(app,platformLoggerProvider,\nforceRefresh)},addTokenListener:function(listener){return addTokenListener(app,platformLoggerProvider,\"INTERNAL\",listener)},removeTokenListener:function(listener){return removeTokenListener(app,listener)}}}global=require(\"module$node_modules$$firebase$app$dist$index_esm\");var component=require(\"module$node_modules$$firebase$component$dist$index_esm\"),tslib=require(\"module$node_modules$tslib$tslib\"),util=require(\"module$node_modules$$firebase$util$dist$index_esm\");require=require(\"module$node_modules$$firebase$logger$dist$index_cjs\");\nglobal=global&&\"object\"===typeof global&&\"default\"in global?global:{\"default\":global};var _a$jscomp$1;module=(_a$jscomp$1={},_a$jscomp$1[\"already-activated\"]=\"You are trying to activate AppCheck for FirebaseApp {$appName}, while it is already activated. AppCheck can only be activated once.\",_a$jscomp$1[\"use-before-activation\"]=\"AppCheck is being used before activate() is called for FirebaseApp {$appName}. Please make sure you call activate() before instantiating other Firebase services.\",_a$jscomp$1[\"fetch-network-error\"]=\n\"Fetch failed to connect to a network. Check Internet connection. Original error: {$originalErrorMessage}.\",_a$jscomp$1[\"fetch-parse-error\"]=\"Fetch client could not parse response. Original error: {$originalErrorMessage}.\",_a$jscomp$1[\"fetch-status-error\"]=\"Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.\",_a$jscomp$1[\"storage-open\"]=\"Error thrown when opening storage. Original error: {$originalErrorMessage}.\",_a$jscomp$1[\"storage-get\"]=\"Error thrown when reading from storage. Original error: {$originalErrorMessage}.\",\n_a$jscomp$1[\"storage-set\"]=\"Error thrown when writing to storage. Original error: {$originalErrorMessage}.\",_a$jscomp$1[\"recaptcha-error\"]=\"ReCAPTCHA error.\",_a$jscomp$1);var ERROR_FACTORY=new util.ErrorFactory(\"appCheck\",\"AppCheck\",module),APP_CHECK_STATES=new Map,DEFAULT_STATE={activated:!1,tokenObservers:[]},DEBUG_STATE={enabled:!1},TOKEN_REFRESH_TIME={OFFSET_DURATION:3E5,RETRIAL_MIN_WAIT:3E4,RETRIAL_MAX_WAIT:96E4},Refresher=function(){function Refresher(operation,retryPolicy,getWaitDuration,lowerBound,\nupperBound){this.operation=operation;this.retryPolicy=retryPolicy;this.getWaitDuration=getWaitDuration;this.lowerBound=lowerBound;this.upperBound=upperBound;this.pending=null;this.nextErrorWaitInterval=lowerBound;if(lowerBound>upperBound)throw Error(\"Proactive refresh lower bound greater than upper bound!\");}Refresher.prototype.start=function(){this.nextErrorWaitInterval=this.lowerBound;this.process(!0).catch(function(){})};Refresher.prototype.stop=function(){this.pending&&(this.pending.reject(\"cancelled\"),\nthis.pending=null)};Refresher.prototype.isRunning=function(){return!!this.pending};Refresher.prototype.process=function(hasSucceeded){return tslib.__awaiter(this,void 0,void 0,function(){var error_1;return tslib.__generator(this,function(_a){switch(_a.label){case 0:this.stop(),_a.label=1;case 1:return _a.trys.push([1,6,,7]),this.pending=new util.Deferred,[4,sleep(this.getNextRun(hasSucceeded))];case 2:return _a.sent(),this.pending.resolve(),[4,this.pending.promise];case 3:return _a.sent(),this.pending=\nnew util.Deferred,[4,this.operation()];case 4:return _a.sent(),this.pending.resolve(),[4,this.pending.promise];case 5:return _a.sent(),this.process(!0).catch(function(){}),[3,7];case 6:return error_1=_a.sent(),this.retryPolicy(error_1)?this.process(!1).catch(function(){}):this.stop(),[3,7];case 7:return[2]}})})};Refresher.prototype.getNextRun=function(hasSucceeded){if(hasSucceeded)return this.nextErrorWaitInterval=this.lowerBound,this.getWaitDuration();hasSucceeded=this.nextErrorWaitInterval;this.nextErrorWaitInterval*=\n2;this.nextErrorWaitInterval>this.upperBound&&(this.nextErrorWaitInterval=this.upperBound);return hasSucceeded};return Refresher}(),dbPromise=null,logger=new require.Logger(\"@firebase/app-check\"),defaultTokenErrorData={error:\"UNKNOWN_ERROR\"};(function(firebase){firebase.INTERNAL.registerComponent((new component.Component(\"appCheck\",function(container){var app=container.getProvider(\"app\").getImmediate();container=container.getProvider(\"platform-logger\");return factory(app,container)},\"PUBLIC\")).setInstantiationMode(\"EXPLICIT\").setInstanceCreatedCallback(function(container,\n_instanceIdentifier,_instance){container.getProvider(\"app-check-internal\").initialize()}));firebase.INTERNAL.registerComponent((new component.Component(\"app-check-internal\",function(container){var app=container.getProvider(\"app\").getImmediate();container=container.getProvider(\"platform-logger\");return internalFactory(app,container)},\"PUBLIC\")).setInstantiationMode(\"EXPLICIT\"));firebase.registerVersion(\"@firebase/app-check\",\"0.2.1\")})(global[\"default\"]);(function(){var globals=util.getGlobal();if(\"string\"===\ntypeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN||!0===globals.FIREBASE_APPCHECK_DEBUG_TOKEN){var debugState=DEBUG_STATE;debugState.enabled=!0;var deferredToken=new util.Deferred;debugState.token=deferredToken;\"string\"===typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN?deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN):deferredToken.resolve(readOrCreateDebugTokenFromStorage())}})()}","~:source","shadow$provide[\"module$node_modules$$firebase$app_check$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nvar firebase = require('@firebase/app');\nvar component = require('@firebase/component');\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nvar ERRORS = (_a = {},\r\n    _a[\"already-activated\" /* ALREADY_ACTIVATED */] = 'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\r\n        'while it is already activated. ' +\r\n        'AppCheck can only be activated once.',\r\n    _a[\"use-before-activation\" /* USE_BEFORE_ACTIVATION */] = 'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\r\n        'Please make sure you call activate() before instantiating other Firebase services.',\r\n    _a[\"fetch-network-error\" /* FETCH_NETWORK_ERROR */] = 'Fetch failed to connect to a network. Check Internet connection. ' +\r\n        'Original error: {$originalErrorMessage}.',\r\n    _a[\"fetch-parse-error\" /* FETCH_PARSE_ERROR */] = 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    _a[\"fetch-status-error\" /* FETCH_STATUS_ERROR */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    _a[\"storage-open\" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    _a[\"storage-get\" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    _a[\"storage-set\" /* STORAGE_WRITE */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    _a[\"recaptcha-error\" /* RECAPTCHA_ERROR */] = 'ReCAPTCHA error.',\r\n    _a);\r\nvar ERROR_FACTORY = new util.ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar APP_CHECK_STATES = new Map();\r\nvar DEFAULT_STATE = {\r\n    activated: false,\r\n    tokenObservers: []\r\n};\r\nvar DEBUG_STATE = {\r\n    enabled: false\r\n};\r\nfunction getState(app) {\r\n    return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\r\n}\r\nfunction setState(app, state) {\r\n    APP_CHECK_STATES.set(app, state);\r\n}\r\nfunction getDebugState() {\r\n    return DEBUG_STATE;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getRecaptcha() {\r\n    return self.grecaptcha;\r\n}\r\nfunction ensureActivated(app) {\r\n    if (!getState(app).activated) {\r\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\r\n            appName: app.name\r\n        });\r\n    }\r\n}\r\n/**\r\n * Copied from https://stackoverflow.com/a/2117523\r\n */\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\r\nfunction initialize(app, siteKey) {\r\n    var state = getState(app);\r\n    var initialized = new util.Deferred();\r\n    setState(app, tslib.__assign(tslib.__assign({}, state), { reCAPTCHAState: { initialized: initialized } }));\r\n    var divId = \"fire_app_check_\" + app.name;\r\n    var invisibleDiv = document.createElement('div');\r\n    invisibleDiv.id = divId;\r\n    invisibleDiv.style.display = 'none';\r\n    document.body.appendChild(invisibleDiv);\r\n    var grecaptcha = getRecaptcha();\r\n    if (!grecaptcha) {\r\n        loadReCAPTCHAScript(function () {\r\n            var grecaptcha = getRecaptcha();\r\n            if (!grecaptcha) {\r\n                // it shouldn't happen.\r\n                throw new Error('no recaptcha');\r\n            }\r\n            grecaptcha.ready(function () {\r\n                // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\r\n                renderInvisibleWidget(app, siteKey, grecaptcha, divId);\r\n                initialized.resolve(grecaptcha);\r\n            });\r\n        });\r\n    }\r\n    else {\r\n        grecaptcha.ready(function () {\r\n            renderInvisibleWidget(app, siteKey, grecaptcha, divId);\r\n            initialized.resolve(grecaptcha);\r\n        });\r\n    }\r\n    return initialized.promise;\r\n}\r\nfunction getToken$2(app) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var reCAPTCHAState, recaptcha;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    ensureActivated(app);\r\n                    reCAPTCHAState = getState(app).reCAPTCHAState;\r\n                    return [4 /*yield*/, reCAPTCHAState.initialized.promise];\r\n                case 1:\r\n                    recaptcha = _a.sent();\r\n                    return [2 /*return*/, new Promise(function (resolve, _reject) {\r\n                            // Updated after initialization is complete.\r\n                            var reCAPTCHAState = getState(app).reCAPTCHAState;\r\n                            recaptcha.ready(function () {\r\n                                resolve(\r\n                                // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\r\n                                recaptcha.execute(reCAPTCHAState.widgetId, {\r\n                                    action: 'fire_app_check'\r\n                                }));\r\n                            });\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\r\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\r\n    var widgetId = grecaptcha.render(container, {\r\n        sitekey: siteKey,\r\n        size: 'invisible'\r\n    });\r\n    var state = getState(app);\r\n    setState(app, tslib.__assign(tslib.__assign({}, state), { reCAPTCHAState: tslib.__assign(tslib.__assign({}, state.reCAPTCHAState), { // state.reCAPTCHAState is set in the initialize()\r\n            widgetId: widgetId }) }));\r\n}\r\nfunction loadReCAPTCHAScript(onload) {\r\n    var script = document.createElement('script');\r\n    script.src = \"\" + RECAPTCHA_URL;\r\n    script.onload = onload;\r\n    document.head.appendChild(script);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\r\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\r\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\r\nvar TOKEN_REFRESH_TIME = {\r\n    /**\r\n     * The offset time before token natural expiration to run the refresh.\r\n     * This is currently 5 minutes.\r\n     */\r\n    OFFSET_DURATION: 5 * 60 * 1000,\r\n    /**\r\n     * This is the first retrial wait after an error. This is currently\r\n     * 30 seconds.\r\n     */\r\n    RETRIAL_MIN_WAIT: 30 * 1000,\r\n    /**\r\n     * This is the maximum retrial wait, currently 16 minutes.\r\n     */\r\n    RETRIAL_MAX_WAIT: 16 * 60 * 1000\r\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\r\n// TODO: move it to @firebase/util?\r\n// TODO: allow to config whether refresh should happen in the background\r\nvar Refresher = /** @class */ (function () {\r\n    function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\r\n        this.operation = operation;\r\n        this.retryPolicy = retryPolicy;\r\n        this.getWaitDuration = getWaitDuration;\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.pending = null;\r\n        this.nextErrorWaitInterval = lowerBound;\r\n        if (lowerBound > upperBound) {\r\n            throw new Error('Proactive refresh lower bound greater than upper bound!');\r\n        }\r\n    }\r\n    Refresher.prototype.start = function () {\r\n        this.nextErrorWaitInterval = this.lowerBound;\r\n        this.process(true).catch(function () {\r\n            /* we don't care about the result */\r\n        });\r\n    };\r\n    Refresher.prototype.stop = function () {\r\n        if (this.pending) {\r\n            this.pending.reject('cancelled');\r\n            this.pending = null;\r\n        }\r\n    };\r\n    Refresher.prototype.isRunning = function () {\r\n        return !!this.pending;\r\n    };\r\n    Refresher.prototype.process = function (hasSucceeded) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var error_1;\r\n            return tslib.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.stop();\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 6, , 7]);\r\n                        this.pending = new util.Deferred();\r\n                        return [4 /*yield*/, sleep(this.getNextRun(hasSucceeded))];\r\n                    case 2:\r\n                        _a.sent();\r\n                        // Why do we resolve a promise, then immediate wait for it?\r\n                        // We do it to make the promise chain cancellable.\r\n                        // We can call stop() which rejects the promise before the following line execute, which makes\r\n                        // the code jump to the catch block.\r\n                        // TODO: unit test this\r\n                        this.pending.resolve();\r\n                        return [4 /*yield*/, this.pending.promise];\r\n                    case 3:\r\n                        _a.sent();\r\n                        this.pending = new util.Deferred();\r\n                        return [4 /*yield*/, this.operation()];\r\n                    case 4:\r\n                        _a.sent();\r\n                        this.pending.resolve();\r\n                        return [4 /*yield*/, this.pending.promise];\r\n                    case 5:\r\n                        _a.sent();\r\n                        this.process(true).catch(function () {\r\n                            /* we don't care about the result */\r\n                        });\r\n                        return [3 /*break*/, 7];\r\n                    case 6:\r\n                        error_1 = _a.sent();\r\n                        if (this.retryPolicy(error_1)) {\r\n                            this.process(false).catch(function () {\r\n                                /* we don't care about the result */\r\n                            });\r\n                        }\r\n                        else {\r\n                            this.stop();\r\n                        }\r\n                        return [3 /*break*/, 7];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Refresher.prototype.getNextRun = function (hasSucceeded) {\r\n        if (hasSucceeded) {\r\n            // If last operation succeeded, reset next error wait interval and return\r\n            // the default wait duration.\r\n            this.nextErrorWaitInterval = this.lowerBound;\r\n            // Return typical wait duration interval after a successful operation.\r\n            return this.getWaitDuration();\r\n        }\r\n        else {\r\n            // Get next error wait interval.\r\n            var currentErrorWaitInterval = this.nextErrorWaitInterval;\r\n            // Double interval for next consecutive error.\r\n            this.nextErrorWaitInterval *= 2;\r\n            // Make sure next wait interval does not exceed the maximum upper bound.\r\n            if (this.nextErrorWaitInterval > this.upperBound) {\r\n                this.nextErrorWaitInterval = this.upperBound;\r\n            }\r\n            return currentErrorWaitInterval;\r\n        }\r\n    };\r\n    return Refresher;\r\n}());\r\nfunction sleep(ms) {\r\n    return new Promise(function (resolve) {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction exchangeToken(_a, platformLoggerProvider) {\r\n    var url = _a.url, body = _a.body;\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;\r\n        return tslib.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    headers = {\r\n                        'Content-Type': 'application/json'\r\n                    };\r\n                    platformLogger = platformLoggerProvider.getImmediate({\r\n                        optional: true\r\n                    });\r\n                    if (platformLogger) {\r\n                        headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\r\n                    }\r\n                    options = {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(body),\r\n                        headers: headers\r\n                    };\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, fetch(url, options)];\r\n                case 2:\r\n                    response = _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    originalError_1 = _b.sent();\r\n                    throw ERROR_FACTORY.create(\"fetch-network-error\" /* FETCH_NETWORK_ERROR */, {\r\n                        originalErrorMessage: originalError_1.message\r\n                    });\r\n                case 4:\r\n                    if (response.status !== 200) {\r\n                        throw ERROR_FACTORY.create(\"fetch-status-error\" /* FETCH_STATUS_ERROR */, {\r\n                            httpStatus: response.status\r\n                        });\r\n                    }\r\n                    _b.label = 5;\r\n                case 5:\r\n                    _b.trys.push([5, 7, , 8]);\r\n                    return [4 /*yield*/, response.json()];\r\n                case 6:\r\n                    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n                    responseBody = _b.sent();\r\n                    return [3 /*break*/, 8];\r\n                case 7:\r\n                    originalError_2 = _b.sent();\r\n                    throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\r\n                        originalErrorMessage: originalError_2.message\r\n                    });\r\n                case 8:\r\n                    match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\r\n                    if (!match || !match[2] || isNaN(Number(match[1]))) {\r\n                        throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\r\n                            originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" +\r\n                                (\"format: \" + responseBody.ttl)\r\n                        });\r\n                    }\r\n                    timeToLiveAsNumber = Number(match[1]) * 1000;\r\n                    now = Date.now();\r\n                    return [2 /*return*/, {\r\n                            token: responseBody.attestationToken,\r\n                            expireTimeMillis: now + timeToLiveAsNumber,\r\n                            issuedAtTimeMillis: now\r\n                        }];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\r\n    var _a = app.options, projectId = _a.projectId, appId = _a.appId, apiKey = _a.apiKey;\r\n    return {\r\n        url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + \"?key=\" + apiKey,\r\n        body: {\r\n            // eslint-disable-next-line\r\n            recaptcha_token: reCAPTCHAToken\r\n        }\r\n    };\r\n}\r\nfunction getExchangeDebugTokenRequest(app, debugToken) {\r\n    var _a = app.options, projectId = _a.projectId, appId = _a.appId, apiKey = _a.apiKey;\r\n    return {\r\n        url: BASE_ENDPOINT + \"/projects/\" + projectId + \"/apps/\" + appId + \":\" + EXCHANGE_DEBUG_TOKEN_METHOD + \"?key=\" + apiKey,\r\n        body: {\r\n            // eslint-disable-next-line\r\n            debug_token: debugToken\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DB_NAME = 'firebase-app-check-database';\r\nvar DB_VERSION = 1;\r\nvar STORE_NAME = 'firebase-app-check-store';\r\nvar DEBUG_TOKEN_KEY = 'debug-token';\r\nvar dbPromise = null;\r\nfunction getDBPromise() {\r\n    if (dbPromise) {\r\n        return dbPromise;\r\n    }\r\n    dbPromise = new Promise(function (resolve, reject) {\r\n        try {\r\n            var request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onsuccess = function (event) {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onerror = function (event) {\r\n                var _a;\r\n                reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n                }));\r\n            };\r\n            request.onupgradeneeded = function (event) {\r\n                var db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (e) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            }));\r\n        }\r\n    });\r\n    return dbPromise;\r\n}\r\nfunction readTokenFromIndexedDB(app) {\r\n    return read(computeKey(app));\r\n}\r\nfunction writeTokenToIndexedDB(app, token) {\r\n    return write(computeKey(app), token);\r\n}\r\nfunction writeDebugTokenToIndexedDB(token) {\r\n    return write(DEBUG_TOKEN_KEY, token);\r\n}\r\nfunction readDebugTokenFromIndexedDB() {\r\n    return read(DEBUG_TOKEN_KEY);\r\n}\r\nfunction write(key, value) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var db, transaction, store, request;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, getDBPromise()];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    transaction = db.transaction(STORE_NAME, 'readwrite');\r\n                    store = transaction.objectStore(STORE_NAME);\r\n                    request = store.put({\r\n                        compositeKey: key,\r\n                        value: value\r\n                    });\r\n                    return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                            request.onsuccess = function (_event) {\r\n                                resolve();\r\n                            };\r\n                            transaction.onerror = function (event) {\r\n                                var _a;\r\n                                reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n                                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n                                }));\r\n                            };\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction read(key) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var db, transaction, store, request;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, getDBPromise()];\r\n                case 1:\r\n                    db = _a.sent();\r\n                    transaction = db.transaction(STORE_NAME, 'readonly');\r\n                    store = transaction.objectStore(STORE_NAME);\r\n                    request = store.get(key);\r\n                    return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                            request.onsuccess = function (event) {\r\n                                var result = event.target.result;\r\n                                if (result) {\r\n                                    resolve(result.value);\r\n                                }\r\n                                else {\r\n                                    resolve(undefined);\r\n                                }\r\n                            };\r\n                            transaction.onerror = function (event) {\r\n                                var _a;\r\n                                reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n                                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\r\n                                }));\r\n                            };\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction computeKey(app) {\r\n    return app.options.appId + \"-\" + app.name;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logger = new logger$1.Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\r\nfunction readTokenFromStorage(app) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var token, e_1;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!util.isIndexedDBAvailable()) return [3 /*break*/, 5];\r\n                    token = undefined;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, readTokenFromIndexedDB(app)];\r\n                case 2:\r\n                    token = _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _a.sent();\r\n                    // swallow the error and return undefined\r\n                    logger.warn(\"Failed to read token from indexeddb. Error: \" + e_1);\r\n                    return [3 /*break*/, 4];\r\n                case 4: return [2 /*return*/, token];\r\n                case 5: return [2 /*return*/, undefined];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\r\nfunction writeTokenToStorage(app, token) {\r\n    if (util.isIndexedDBAvailable()) {\r\n        return writeTokenToIndexedDB(app, token).catch(function (e) {\r\n            // swallow the error and resolve the promise\r\n            logger.warn(\"Failed to write token to indexeddb. Error: \" + e);\r\n        });\r\n    }\r\n    return Promise.resolve();\r\n}\r\nfunction readOrCreateDebugTokenFromStorage() {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var existingDebugToken, newToken;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    existingDebugToken = undefined;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, readDebugTokenFromIndexedDB()];\r\n                case 2:\r\n                    existingDebugToken = _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 4:\r\n                    if (!existingDebugToken) {\r\n                        newToken = uuidv4();\r\n                        // We don't need to block on writing to indexeddb\r\n                        // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\r\n                        // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\r\n                        // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\r\n                        // You should switch to a different browser that supports indexeddb\r\n                        writeDebugTokenToIndexedDB(newToken).catch(function (e) {\r\n                            return logger.warn(\"Failed to persist debug token to indexeddb. Error: \" + e);\r\n                        });\r\n                        // Not using logger because I don't think we ever want this accidentally hidden?\r\n                        console.log(\"AppCheck debug token: \" + newToken + \". You will need to whitelist it in the Firebase console for it to work\");\r\n                        return [2 /*return*/, newToken];\r\n                    }\r\n                    else {\r\n                        return [2 /*return*/, existingDebugToken];\r\n                    }\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isDebugMode() {\r\n    var debugState = getDebugState();\r\n    return debugState.enabled;\r\n}\r\nfunction getDebugToken() {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var state;\r\n        return tslib.__generator(this, function (_a) {\r\n            state = getDebugState();\r\n            if (state.enabled && state.token) {\r\n                return [2 /*return*/, state.token.promise];\r\n            }\r\n            else {\r\n                // should not happen!\r\n                throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction initializeDebugMode() {\r\n    var globals = util.getGlobal();\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\r\n        globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\r\n        return;\r\n    }\r\n    var debugState = getDebugState();\r\n    debugState.enabled = true;\r\n    var deferredToken = new util.Deferred();\r\n    debugState.token = deferredToken;\r\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\r\n        deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\r\n    }\r\n    else {\r\n        deferredToken.resolve(readOrCreateDebugTokenFromStorage());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Initial hardcoded value agreed upon across platforms for initial launch.\r\n// Format left open for possible dynamic error values and other fields in the future.\r\nvar defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\r\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\r\nfunction formatDummyToken(tokenErrorData) {\r\n    return util.base64.encodeString(JSON.stringify(tokenErrorData), \r\n    /* webSafe= */ false);\r\n}\r\n/**\r\n * This function will always resolve.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\r\nfunction getToken$1(app, platformLoggerProvider, forceRefresh) {\r\n    if (forceRefresh === void 0) { forceRefresh = false; }\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var state, token, error, cachedToken, tokenFromDebugExchange, _a, _b, _c, customToken, issuedAtTimeSeconds, issuedAtTimeMillis, attestedClaimsToken, e_1, interopTokenResult;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    ensureActivated(app);\r\n                    state = getState(app);\r\n                    token = state.token;\r\n                    error = undefined;\r\n                    if (!!token) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, readTokenFromStorage(app)];\r\n                case 1:\r\n                    cachedToken = _d.sent();\r\n                    if (cachedToken && isValid(cachedToken)) {\r\n                        token = cachedToken;\r\n                        setState(app, tslib.__assign(tslib.__assign({}, state), { token: token }));\r\n                        // notify all listeners with the cached token\r\n                        notifyTokenListeners(app, { token: token.token });\r\n                    }\r\n                    _d.label = 2;\r\n                case 2:\r\n                    // Return the cached token (from either memory or indexedDB) if it's valid\r\n                    if (!forceRefresh && token && isValid(token)) {\r\n                        return [2 /*return*/, {\r\n                                token: token.token\r\n                            }];\r\n                    }\r\n                    if (!isDebugMode()) return [3 /*break*/, 6];\r\n                    _a = exchangeToken;\r\n                    _b = getExchangeDebugTokenRequest;\r\n                    _c = [app];\r\n                    return [4 /*yield*/, getDebugToken()];\r\n                case 3: return [4 /*yield*/, _a.apply(void 0, [_b.apply(void 0, _c.concat([_d.sent()])), platformLoggerProvider])];\r\n                case 4:\r\n                    tokenFromDebugExchange = _d.sent();\r\n                    // Write debug token to indexedDB.\r\n                    return [4 /*yield*/, writeTokenToStorage(app, tokenFromDebugExchange)];\r\n                case 5:\r\n                    // Write debug token to indexedDB.\r\n                    _d.sent();\r\n                    // Write debug token to state.\r\n                    setState(app, tslib.__assign(tslib.__assign({}, state), { token: tokenFromDebugExchange }));\r\n                    return [2 /*return*/, { token: tokenFromDebugExchange.token }];\r\n                case 6:\r\n                    _d.trys.push([6, 12, , 13]);\r\n                    if (!state.customProvider) return [3 /*break*/, 8];\r\n                    return [4 /*yield*/, state.customProvider.getToken()];\r\n                case 7:\r\n                    customToken = _d.sent();\r\n                    issuedAtTimeSeconds = util.issuedAtTime(customToken.token);\r\n                    issuedAtTimeMillis = issuedAtTimeSeconds !== null &&\r\n                        issuedAtTimeSeconds < Date.now() &&\r\n                        issuedAtTimeSeconds > 0\r\n                        ? issuedAtTimeSeconds * 1000\r\n                        : Date.now();\r\n                    token = tslib.__assign(tslib.__assign({}, customToken), { issuedAtTimeMillis: issuedAtTimeMillis });\r\n                    return [3 /*break*/, 11];\r\n                case 8: return [4 /*yield*/, getToken$2(app).catch(function (_e) {\r\n                        // reCaptcha.execute() throws null which is not very descriptive.\r\n                        throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\r\n                    })];\r\n                case 9:\r\n                    attestedClaimsToken = _d.sent();\r\n                    return [4 /*yield*/, exchangeToken(getExchangeRecaptchaTokenRequest(app, attestedClaimsToken), platformLoggerProvider)];\r\n                case 10:\r\n                    token = _d.sent();\r\n                    _d.label = 11;\r\n                case 11: return [3 /*break*/, 13];\r\n                case 12:\r\n                    e_1 = _d.sent();\r\n                    // `getToken()` should never throw, but logging error text to console will aid debugging.\r\n                    logger.error(e_1);\r\n                    error = e_1;\r\n                    return [3 /*break*/, 13];\r\n                case 13:\r\n                    if (!!token) return [3 /*break*/, 14];\r\n                    // if token is undefined, there must be an error.\r\n                    // we return a dummy token along with the error\r\n                    interopTokenResult = makeDummyTokenResult(error);\r\n                    return [3 /*break*/, 16];\r\n                case 14:\r\n                    interopTokenResult = {\r\n                        token: token.token\r\n                    };\r\n                    // write the new token to the memory state as well as the persistent storage.\r\n                    // Only do it if we got a valid new token\r\n                    setState(app, tslib.__assign(tslib.__assign({}, state), { token: token }));\r\n                    return [4 /*yield*/, writeTokenToStorage(app, token)];\r\n                case 15:\r\n                    _d.sent();\r\n                    _d.label = 16;\r\n                case 16:\r\n                    notifyTokenListeners(app, interopTokenResult);\r\n                    return [2 /*return*/, interopTokenResult];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction addTokenListener(app, platformLoggerProvider, type, listener, onError) {\r\n    var state = getState(app);\r\n    var tokenListener = {\r\n        next: listener,\r\n        error: onError,\r\n        type: type\r\n    };\r\n    var newState = tslib.__assign(tslib.__assign({}, state), { tokenObservers: tslib.__spreadArray(tslib.__spreadArray([], state.tokenObservers), [tokenListener]) });\r\n    /**\r\n     * Invoke the listener with the valid token, then start the token refresher\r\n     */\r\n    if (!newState.tokenRefresher) {\r\n        var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\r\n        newState.tokenRefresher = tokenRefresher;\r\n    }\r\n    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\r\n    // is not true.\r\n    if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\r\n        newState.tokenRefresher.start();\r\n    }\r\n    // invoke the listener async immediately if there is a valid token\r\n    if (state.token && isValid(state.token)) {\r\n        var validToken_1 = state.token;\r\n        Promise.resolve()\r\n            .then(function () { return listener({ token: validToken_1.token }); })\r\n            .catch(function () {\r\n            /** Ignore errors in listeners. */\r\n        });\r\n    }\r\n    setState(app, newState);\r\n}\r\nfunction removeTokenListener(app, listener) {\r\n    var state = getState(app);\r\n    var newObservers = state.tokenObservers.filter(function (tokenObserver) { return tokenObserver.next !== listener; });\r\n    if (newObservers.length === 0 &&\r\n        state.tokenRefresher &&\r\n        state.tokenRefresher.isRunning()) {\r\n        state.tokenRefresher.stop();\r\n    }\r\n    setState(app, tslib.__assign(tslib.__assign({}, state), { tokenObservers: newObservers }));\r\n}\r\nfunction createTokenRefresher(app, platformLoggerProvider) {\r\n    var _this = this;\r\n    return new Refresher(\r\n    // Keep in mind when this fails for any reason other than the ones\r\n    // for which we should retry, it will effectively stop the proactive refresh.\r\n    function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var state, result;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    state = getState(app);\r\n                    if (!!state.token) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, getToken$1(app, platformLoggerProvider)];\r\n                case 1:\r\n                    result = _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2: return [4 /*yield*/, getToken$1(app, platformLoggerProvider, true)];\r\n                case 3:\r\n                    result = _a.sent();\r\n                    _a.label = 4;\r\n                case 4:\r\n                    // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\r\n                    if (result.error) {\r\n                        throw result.error;\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); }, function () {\r\n        // TODO: when should we retry?\r\n        return true;\r\n    }, function () {\r\n        var state = getState(app);\r\n        if (state.token) {\r\n            // issuedAtTime + (50% * total TTL) + 5 minutes\r\n            var nextRefreshTimeMillis = state.token.issuedAtTimeMillis +\r\n                (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\r\n                    0.5 +\r\n                5 * 60 * 1000;\r\n            // Do not allow refresh time to be past (expireTime - 5 minutes)\r\n            var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\r\n            nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\r\n            return Math.max(0, nextRefreshTimeMillis - Date.now());\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\r\n}\r\nfunction notifyTokenListeners(app, token) {\r\n    var observers = getState(app).tokenObservers;\r\n    for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\r\n        var observer = observers_1[_i];\r\n        try {\r\n            if (observer.type === \"EXTERNAL\" /* EXTERNAL */ && token.error != null) {\r\n                // If this listener was added by a 3P call, send any token error to\r\n                // the supplied error handler. A 3P observer always has an error\r\n                // handler.\r\n                observer.error(token.error);\r\n            }\r\n            else {\r\n                // If the token has no error field, always return the token.\r\n                // If this is a 2P listener, return the token, whether or not it\r\n                // has an error field.\r\n                observer.next(token);\r\n            }\r\n        }\r\n        catch (ignored) {\r\n            // Errors in the listener function itself are always ignored.\r\n        }\r\n    }\r\n}\r\nfunction isValid(token) {\r\n    return token.expireTimeMillis - Date.now() > 0;\r\n}\r\nfunction makeDummyTokenResult(error) {\r\n    return {\r\n        token: formatDummyToken(defaultTokenErrorData),\r\n        error: error\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param app\r\n * @param siteKeyOrProvider - optional custom attestation provider\r\n * or reCAPTCHA siteKey\r\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\r\n * of appCheck token.\r\n */\r\nfunction activate(app, siteKeyOrProvider, isTokenAutoRefreshEnabled) {\r\n    var state = getState(app);\r\n    if (state.activated) {\r\n        throw ERROR_FACTORY.create(\"already-activated\" /* ALREADY_ACTIVATED */, {\r\n            appName: app.name\r\n        });\r\n    }\r\n    var newState = tslib.__assign(tslib.__assign({}, state), { activated: true });\r\n    if (typeof siteKeyOrProvider === 'string') {\r\n        newState.siteKey = siteKeyOrProvider;\r\n    }\r\n    else {\r\n        newState.customProvider = siteKeyOrProvider;\r\n    }\r\n    // Use value of global `automaticDataCollectionEnabled` (which\r\n    // itself defaults to false if not specified in config) if\r\n    // `isTokenAutoRefreshEnabled` param was not provided by user.\r\n    newState.isTokenAutoRefreshEnabled =\r\n        isTokenAutoRefreshEnabled === undefined\r\n            ? app.automaticDataCollectionEnabled\r\n            : isTokenAutoRefreshEnabled;\r\n    setState(app, newState);\r\n    // initialize reCAPTCHA if siteKey is provided\r\n    if (newState.siteKey) {\r\n        initialize(app, newState.siteKey).catch(function () {\r\n            /* we don't care about the initialization result in activate() */\r\n        });\r\n    }\r\n}\r\nfunction setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {\r\n    var state = getState(app);\r\n    // This will exist if any product libraries have called\r\n    // `addTokenListener()`\r\n    if (state.tokenRefresher) {\r\n        if (isTokenAutoRefreshEnabled === true) {\r\n            state.tokenRefresher.start();\r\n        }\r\n        else {\r\n            state.tokenRefresher.stop();\r\n        }\r\n    }\r\n    setState(app, tslib.__assign(tslib.__assign({}, state), { isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled }));\r\n}\r\n/**\r\n * Differs from internal getToken in that it throws the error.\r\n */\r\nfunction getToken(app, platformLoggerProvider, forceRefresh) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var result;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, getToken$1(app, platformLoggerProvider, forceRefresh)];\r\n                case 1:\r\n                    result = _a.sent();\r\n                    if (result.error) {\r\n                        throw result.error;\r\n                    }\r\n                    return [2 /*return*/, { token: result.token }];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError, \r\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nonCompletion) {\r\n    var nextFn = function () { };\r\n    var errorFn = function () { };\r\n    if (onNextOrObserver.next != null) {\r\n        nextFn = onNextOrObserver.next.bind(onNextOrObserver);\r\n    }\r\n    else {\r\n        nextFn = onNextOrObserver;\r\n    }\r\n    if (onNextOrObserver.error != null) {\r\n        errorFn = onNextOrObserver.error.bind(onNextOrObserver);\r\n    }\r\n    else if (onError) {\r\n        errorFn = onError;\r\n    }\r\n    addTokenListener(app, platformLoggerProvider, \"EXTERNAL\" /* EXTERNAL */, nextFn, errorFn);\r\n    return function () { return removeTokenListener(app, nextFn); };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction factory(app, platformLoggerProvider) {\r\n    return {\r\n        app: app,\r\n        activate: function (siteKeyOrProvider, isTokenAutoRefreshEnabled) { return activate(app, siteKeyOrProvider, isTokenAutoRefreshEnabled); },\r\n        setTokenAutoRefreshEnabled: function (isTokenAutoRefreshEnabled) {\r\n            return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);\r\n        },\r\n        getToken: function (forceRefresh) {\r\n            return getToken(app, platformLoggerProvider, forceRefresh);\r\n        },\r\n        onTokenChanged: function (onNextOrObserver, onError, onCompletion) {\r\n            return onTokenChanged(app, platformLoggerProvider, \r\n            /**\r\n             * This can still be an observer. Need to do this casting because\r\n             * according to Typescript: \"Implementation signatures of overloads\r\n             * are not externally visible\"\r\n             */\r\n            onNextOrObserver, onError);\r\n        },\r\n        INTERNAL: {\r\n            delete: function () {\r\n                var tokenObservers = getState(app).tokenObservers;\r\n                for (var _i = 0, tokenObservers_1 = tokenObservers; _i < tokenObservers_1.length; _i++) {\r\n                    var tokenObserver = tokenObservers_1[_i];\r\n                    removeTokenListener(app, tokenObserver.next);\r\n                }\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction internalFactory(app, platformLoggerProvider) {\r\n    return {\r\n        getToken: function (forceRefresh) {\r\n            return getToken$1(app, platformLoggerProvider, forceRefresh);\r\n        },\r\n        addTokenListener: function (listener) {\r\n            return addTokenListener(app, platformLoggerProvider, \"INTERNAL\" /* INTERNAL */, listener);\r\n        },\r\n        removeTokenListener: function (listener) { return removeTokenListener(app, listener); }\r\n    };\r\n}\n\nvar name = \"@firebase/app-check\";\nvar version = \"0.2.1\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar APP_CHECK_NAME = 'appCheck';\r\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\r\nfunction registerAppCheck(firebase) {\r\n    // The public interface\r\n    firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME, function (container) {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var platformLoggerProvider = container.getProvider('platform-logger');\r\n        return factory(app, platformLoggerProvider);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        /**\r\n         * AppCheck can only be initialized by explicitly calling firebase.appCheck()\r\n         * We don't want firebase products that consume AppCheck to gate on AppCheck\r\n         * if the user doesn't intend them to, just because the AppCheck component\r\n         * is registered.\r\n         */\r\n        .setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */)\r\n        /**\r\n         * Because all firebase products that depend on app-check depend on app-check-internal directly,\r\n         * we need to initialize app-check-internal after app-check is initialized to make it\r\n         * available to other firebase products.\r\n         */\r\n        .setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\r\n        var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);\r\n        appCheckInternalProvider.initialize();\r\n    }));\r\n    // The internal interface used by other Firebase products\r\n    firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME_INTERNAL, function (container) {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var platformLoggerProvider = container.getProvider('platform-logger');\r\n        return internalFactory(app, platformLoggerProvider);\r\n    }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */));\r\n    firebase.registerVersion(name, version);\r\n}\r\nregisterAppCheck(firebase__default['default']);\r\ninitializeDebugMode();\n//# sourceMappingURL=index.cjs.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$firebase$util$dist$index_esm","~$module$node_modules$tslib$tslib","~$shadow.js","~$module$node_modules$$firebase$app$dist$index_esm","~$module$node_modules$$firebase$component$dist$index_esm","~$module$node_modules$$firebase$logger$dist$index_cjs"]],"~:properties",["^5",["stop","lowerBound","url","next","token","onerror","optional","body","customProvider","tokenObservers","reCAPTCHAState","siteKey","delete","activate","addTokenListener","httpStatus","onsuccess","label","method","process","debug_token","error","nextErrorWaitInterval","enabled","id","src","isTokenAutoRefreshEnabled","getNextRun","compositeKey","initialized","keyPath","appName","tokenRefresher","value","onupgradeneeded","start","operation","removeTokenListener","action","retryPolicy","expireTimeMillis","onload","sitekey","RETRIAL_MAX_WAIT","getToken","type","RETRIAL_MIN_WAIT","app","INTERNAL","upperBound","issuedAtTimeMillis","isRunning","widgetId","setTokenAutoRefreshEnabled","display","recaptcha_token","size","originalErrorMessage","pending","OFFSET_DURATION","onTokenChanged","activated","getWaitDuration","headers"]],"~:compiled-at",1627823146994,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$app_check$dist$index_cjs.js\",\n\"lineCount\":40,\n\"mappings\":\"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwEnHC,QAASA,SAAQ,CAACC,GAAD,CAAM,CACnB,MAAOC,iBAAiBC,CAAAA,GAAjB,CAAqBF,GAArB,CAAP,EAAoCG,aADjB,CAGvBC,QAASA,SAAQ,CAACJ,GAAD,CAAMK,KAAN,CAAa,CAC1BJ,gBAAiBK,CAAAA,GAAjB,CAAqBN,GAArB,CAA0BK,KAA1B,CAD0B,CA0B9BE,QAASA,gBAAe,CAACP,GAAD,CAAM,CAC1B,GAAI,CAACD,QAAA,CAASC,GAAT,CAAcQ,CAAAA,SAAnB,CACI,KAAMC,cAAcC,CAAAA,MAAd,CAAqB,uBAArB,CAA0E,CAC5EC,QAASX,GAAIY,CAAAA,IAD+D,CAA1E,CAAN,CAFsB,CAU9BC,QAASA,OAAM,EAAG,CACd,MAAO,sCAAuCC,CAAAA,OAAvC,CAA+C,OAA/C,CAAwD,QAAS,CAACC,CAAD,CAAI,CAAA,IACpEC,EAAqB,EAArBA,CAAKC,IAAKC,CAAAA,MAAL,EAALF,CAA2B,CAC/B,OAASG,CADmC,GAANC;AAAAL,CAAAK,CAAYJ,CAAZI,CAAiBJ,CAAjBI,CAAqB,CAArBA,CAA4B,CACzDD,EAAAA,QAAF,CAAW,EAAX,CAFiE,CAArE,CADO,CAwBlBE,QAASA,WAAU,CAACrB,GAAD,CAAMsB,OAAN,CAAe,CAC9B,IAAIjB,MAAQN,QAAA,CAASC,GAAT,CAAZ,CACIuB,YAAc,IAAIC,IAAKC,CAAAA,QAC3BrB,SAAA,CAASJ,GAAT,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAAEuB,eAAgB,CAAeL,WAAf,CAAlB,CAA1C,CAAd,CACA,KAAIM,MAAQ,iBAARA,CAA4B7B,GAAIY,CAAAA,IAChCkB,MAAAA,CAAeC,QAASC,CAAAA,aAAT,CAAuB,KAAvB,CACnBF,MAAaG,CAAAA,EAAb,CAAkBJ,KAClBC,MAAaI,CAAAA,KAAMC,CAAAA,OAAnB,CAA6B,MAC7BJ,SAASK,CAAAA,IAAKC,CAAAA,WAAd,CAA0BP,KAA1B,CACA,KAAIQ,WA7CGC,IAAKD,CAAAA,UA8CPA,WAAL,CAeIA,UAAWE,CAAAA,KAAX,CAAiB,QAAS,EAAG,CACzBC,qBAAA,CAAsBzC,GAAtB,CAA2BsB,OAA3B,CAAoCgB,UAApC,CAAgDT,KAAhD,CACAN,YAAYmB,CAAAA,OAAZ,CAAoBJ,UAApB,CAFyB,CAA7B,CAfJ;AACIK,mBAAA,CAAoB,QAAS,EAAG,CAC5B,IAAIL,WAhDLC,IAAKD,CAAAA,UAiDJ,IAAI,CAACA,UAAL,CAEI,KAAUM,MAAJ,CAAU,cAAV,CAAN,CAEJN,UAAWE,CAAAA,KAAX,CAAiB,QAAS,EAAG,CAEzBC,qBAAA,CAAsBzC,GAAtB,CAA2BsB,OAA3B,CAAoCgB,UAApC,CAAgDT,KAAhD,CACAN,YAAYmB,CAAAA,OAAZ,CAAoBJ,UAApB,CAHyB,CAA7B,CAN4B,CAAhC,CAmBJ,OAAOf,YAAYsB,CAAAA,OA9BW,CAgClCC,QAASA,WAAU,CAAC9C,GAAD,CAAM,CACrB,MAAO0B,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjDnB,cADiD,CACjCoB,SACpB,OAAOtB,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,EAAD,CAAK,CACzC,OAAQA,EAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CAGI,MAFA5C,gBAAA,CAAgBP,GAAhB,CAEO,CADP4B,cACO,CADU7B,QAAA,CAASC,GAAT,CAAc4B,CAAAA,cACxB,CAAA,CAAC,CAAD,CAAcA,cAAeL,CAAAA,WAAYsB,CAAAA,OAAzC,CACX;KAAK,CAAL,CAEI,MADAG,UACO,CADKE,EAAGE,CAAAA,IAAH,EACL,CAAA,CAAC,CAAD,CAAe,IAAIC,OAAJ,CAAY,QAAS,CAACX,OAAD,CAAUY,OAAV,CAAmB,CAEtD,IAAI1B,eAAiB7B,QAAA,CAASC,GAAT,CAAc4B,CAAAA,cACnCoB,UAAUR,CAAAA,KAAV,CAAgB,QAAS,EAAG,CACxBE,OAAA,CAEAM,SAAUO,CAAAA,OAAV,CAAkB3B,cAAe4B,CAAAA,QAAjC,CAA2C,CACvCC,OAAQ,gBAD+B,CAA3C,CAFA,CADwB,CAA5B,CAHsD,CAAxC,CAAf,CAPf,CADyC,CAAtC,CAF8C,CAAlD,CADc,CA+BzBhB,QAASA,sBAAqB,CAACzC,GAAD,CAAMsB,OAAN,CAAegB,UAAf,CAA2BoB,SAA3B,CAAsC,CAC5DF,OAAAA,CAAWlB,UAAWqB,CAAAA,MAAX,CAAkBD,SAAlB,CAA6B,CACxCE,QAAStC,OAD+B,CAExCuC,KAAM,WAFkC,CAA7B,CAIXxD,WAAAA,CAAQN,QAAA,CAASC,GAAT,CACZI,SAAA,CAASJ,GAAT,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,UAAnB,CAAf,CAA0C,CAAEuB,eAAgBF,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf;AAAmBtB,UAAMuB,CAAAA,cAAzB,CAAf,CAAyD,CAC3H4B,SAAUA,OADiH,CAAzD,CAAlB,CAA1C,CAAd,CANgE,CASpEb,QAASA,oBAAmB,CAACmB,MAAD,CAAS,CACjC,IAAIC,OAAShC,QAASC,CAAAA,aAAT,CAAuB,QAAvB,CACb+B,OAAOC,CAAAA,GAAP,CAAa,yCACbD,OAAOD,CAAAA,MAAP,CAAgBA,MAChB/B,SAASkC,CAAAA,IAAK5B,CAAAA,WAAd,CAA0B0B,MAA1B,CAJiC,CAsKrCG,QAASA,MAAK,CAACC,EAAD,CAAK,CACf,MAAO,KAAId,OAAJ,CAAY,QAAS,CAACX,OAAD,CAAU,CAClC0B,UAAA,CAAW1B,OAAX,CAAoByB,EAApB,CADkC,CAA/B,CADQ,CAsBnBE,QAASA,cAAa,CAACnB,EAAD,CAAKoB,sBAAL,CAA6B,CAAA,IAC3CC,IAAMrB,EAAGqB,CAAAA,GADkC,CAC7BnC,KAAOc,EAAGd,CAAAA,IAC5B,OAAOV,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjDyB,OADiD,CACxCC,cADwC,CACxBC,OADwB,CACfC,QADe,CACLC,eADK;AACYC,YADZ,CAC0BC,eAD1B,CAC2CC,KAD3C,CACkDC,kBADlD,CACsEC,GAC3H,OAAOvD,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACiC,EAAD,CAAK,CACzC,OAAQA,EAAG/B,CAAAA,KAAX,EACI,KAAK,CAAL,CACIqB,OAcA,CAdU,CACN,eAAgB,kBADV,CAcV,EAXAC,cAWA,CAXiBH,sBAAuBa,CAAAA,YAAvB,CAAoC,CACjDC,SAAU,CAAA,CADuC,CAApC,CAWjB,IAPIZ,OAAA,CAAQ,mBAAR,CAOJ,CAPmCC,cAAeY,CAAAA,qBAAf,EAOnC,EALAX,OAKA,CALU,CACNY,OAAQ,MADF,CAENlD,KAAMmD,IAAKC,CAAAA,SAAL,CAAepD,IAAf,CAFA,CAGGoC,OAHH,CAKV,CAAAU,EAAG/B,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAEI,MADA+B,GAAGO,CAAAA,IAAKC,CAAAA,IAAR,CAAa,CAAC,CAAD,CAAI,CAAJ,CAAA,CAAS,CAAT,CAAb,CACO,CAAA,CAAC,CAAD,CAAcC,KAAA,CAAMpB,GAAN,CAAWG,OAAX,CAAd,CACX,MAAK,CAAL,CAEI,MADAC,SACO,CADIO,EAAG9B,CAAAA,IAAH,EACJ,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAEI,KADAwB,gBACM;AADYM,EAAG9B,CAAAA,IAAH,EACZ,CAAA3C,aAAcC,CAAAA,MAAd,CAAqB,qBAArB,CAAsE,CACxEkF,qBAAsBhB,eAAgBiB,CAAAA,OADkC,CAAtE,CAAN,CAGJ,KAAK,CAAL,CACI,GAAwB,GAAxB,GAAIlB,QAASmB,CAAAA,MAAb,CACI,KAAMrF,cAAcC,CAAAA,MAAd,CAAqB,oBAArB,CAAoE,CACtEqF,WAAYpB,QAASmB,CAAAA,MADiD,CAApE,CAAN,CAIJZ,EAAG/B,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAEI,MADA+B,GAAGO,CAAAA,IAAKC,CAAAA,IAAR,CAAa,CAAC,CAAD,CAAI,CAAJ,CAAA,CAAS,CAAT,CAAb,CACO,CAAA,CAAC,CAAD,CAAcf,QAASqB,CAAAA,IAAT,EAAd,CACX,MAAK,CAAL,CAGI,MADAnB,aACO,CADQK,EAAG9B,CAAAA,IAAH,EACR,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAEI,KADA0B,gBACM,CADYI,EAAG9B,CAAAA,IAAH,EACZ,CAAA3C,aAAcC,CAAAA,MAAd,CAAqB,mBAArB,CAAkE,CACpEkF,qBAAsBd,eAAgBe,CAAAA,OAD8B,CAAlE,CAAN,CAGJ,KAAK,CAAL,CACId,KAAA,CAAQF,YAAaoB,CAAAA,GAAIlB,CAAAA,KAAjB,CAAuB,eAAvB,CACR;GAAI,CAACA,KAAL,EAAc,CAACA,KAAA,CAAM,CAAN,CAAf,EAA2BmB,KAAA,CAAMC,MAAA,CAAOpB,KAAA,CAAM,CAAN,CAAP,CAAN,CAA3B,CACI,KAAMtE,cAAcC,CAAAA,MAAd,CAAqB,mBAArB,CAAkE,CACpEkF,qBAAsB,sEAAtBA,CACkBf,YAAaoB,CAAAA,GAFqC,CAAlE,CAAN,CAKJjB,kBAAA,CAAwC,GAAxC,CAAqBmB,MAAA,CAAOpB,KAAA,CAAM,CAAN,CAAP,CACrBE,IAAA,CAAMmB,IAAKnB,CAAAA,GAAL,EACN,OAAO,CAAC,CAAD,CAAe,CACdoB,MAAOxB,YAAayB,CAAAA,gBADN,CAEdC,iBAAkBtB,GAAlBsB,CAAwBvB,kBAFV,CAGdwB,mBAAoBvB,GAHN,CAAf,CAzDf,CADyC,CAAtC,CAF8C,CAAlD,CAFwC,CAuEnDwB,QAASA,iCAAgC,CAACzG,GAAD,CAAM0G,cAAN,CAAsB,CACvDxD,GAAAA,CAAKlD,GAAI0E,CAAAA,OACb,OAAO,CACHH,IAAK,kEAALA;AAF8BrB,GAAGyD,CAAAA,SAEjCpC,CAAgD,QAAhDA,CAFoDrB,GAAG0D,CAAAA,KAEvDrC,CAAmE,iCAAnEA,CAFuErB,GAAG2D,CAAAA,MACvE,CAEHzE,KAAM,CAEF0E,gBAAiBJ,cAFf,CAFH,CAFoD,CAU/DK,QAASA,6BAA4B,CAAC/G,GAAD,CAAMgH,UAAN,CAAkB,CAC/C9D,GAAAA,CAAKlD,GAAI0E,CAAAA,OACb,OAAO,CACHH,IAAK,kEAALA,CAF8BrB,GAAGyD,CAAAA,SAEjCpC,CAAgD,QAAhDA,CAFoDrB,GAAG0D,CAAAA,KAEvDrC,CAAmE,6BAAnEA,CAFuErB,GAAG2D,CAAAA,MACvE,CAEHzE,KAAM,CAEF6E,YAAaD,UAFX,CAFH,CAF4C,CAgCvDE,QAASA,aAAY,EAAG,CACpB,MAAIC,UAAJ,CACWA,SADX,CAGAA,SAHA,CAGY,IAAI9D,OAAJ,CAAY,QAAS,CAACX,OAAD,CAAU0E,MAAV,CAAkB,CAC/C,GAAI,CACA,IAAIC,QAAUC,SAAUC,CAAAA,IAAV,CAXZC,6BAWY;AAVTC,CAUS,CACdJ,QAAQK,CAAAA,SAAR,CAAoBC,QAAS,CAACC,KAAD,CAAQ,CACjClF,OAAA,CAAQkF,KAAMC,CAAAA,MAAOC,CAAAA,MAArB,CADiC,CAGrCT,QAAQU,CAAAA,OAAR,CAAkBC,QAAS,CAACJ,KAAD,CAAQ,CAC/B,IAAI1E,EACJkE,OAAA,CAAO3G,aAAcC,CAAAA,MAAd,CAAqB,cAArB,CAAwD,CAC3DkF,qBAAoD,IAA9B,IAAC1C,EAAD,CAAM0E,KAAMC,CAAAA,MAAOI,CAAAA,KAAnB,GAA6C,IAAK,EAAlD,GAAsC/E,EAAtC,CAAsD,IAAK,EAA3D,CAA+DA,EAAG2C,CAAAA,OAD7B,CAAxD,CAAP,CAF+B,CAMnCwB,QAAQa,CAAAA,eAAR,CAA0BC,QAAS,CAACP,KAAD,CAAQ,CACvC,IAAIQ,GAAKR,KAAMC,CAAAA,MAAOC,CAAAA,MAMtB,QAAQF,KAAMS,CAAAA,UAAd,EACI,KAAK,CAAL,CACID,EAAGE,CAAAA,iBAAH,CA5BPC,0BA4BO,CAAiC,CAC7BC,QAAS,cADoB,CAAjC,CAFR,CAPuC,CAX3C,CA0BJ,MAAOC,CAAP,CAAU,CACNrB,MAAA,CAAO3G,aAAcC,CAAAA,MAAd,CAAqB,cAArB,CAAwD,CAC3DkF,qBAAsB6C,CAAE5C,CAAAA,OADmC,CAAxD,CAAP,CADM,CA3BqC,CAAvC,CAJQ;AAmDxB6C,QAASA,MAAK,CAACC,GAAD,CAAMC,KAAN,CAAa,CACvB,MAAOlH,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjDqF,EADiD,CAC7CS,WAD6C,CAChCC,KADgC,CACzBzB,OAC5B,OAAO3F,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,WAAD,CAAK,CACzC,OAAQA,WAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAc+D,YAAA,EAAd,CACf,MAAK,CAAL,CAQI,MAPAkB,GAOO,CAPFlF,WAAGE,CAAAA,IAAH,EAOE,CANPyF,WAMO,CANOT,EAAGS,CAAAA,WAAH,CA9DjBN,0BA8DiB,CAA2B,WAA3B,CAMP,CALPO,KAKO,CALCD,WAAYE,CAAAA,WAAZ,CA/DXR,0BA+DW,CAKD,CAJPlB,OAIO,CAJGyB,KAAME,CAAAA,GAAN,CAAU,CAChBC,aAAcN,GADE,CAETC,KAFS,CAAV,CAIH,CAAA,CAAC,CAAD,CAAe,IAAIvF,OAAJ,CAAY,QAAS,CAACX,OAAD,CAAU0E,MAAV,CAAkB,CACrDC,OAAQK,CAAAA,SAAR,CAAoBC,QAAS,CAACuB,MAAD,CAAS,CAClCxG,OAAA,EADkC,CAGtCmG;WAAYd,CAAAA,OAAZ,CAAsBoB,QAAS,CAACvB,KAAD,CAAQ,CACnC,IAAI1E,EACJkE,OAAA,CAAO3G,aAAcC,CAAAA,MAAd,CAAqB,aAArB,CAAwD,CAC3DkF,qBAAoD,IAA9B,IAAC1C,EAAD,CAAM0E,KAAMC,CAAAA,MAAOI,CAAAA,KAAnB,GAA6C,IAAK,EAAlD,GAAsC/E,EAAtC,CAAsD,IAAK,EAA3D,CAA+DA,EAAG2C,CAAAA,OAD7B,CAAxD,CAAP,CAFmC,CAJc,CAAvC,CAAf,CAVf,CADyC,CAAtC,CAF8C,CAAlD,CADgB,CA6B3BuD,QAASA,KAAI,CAACT,GAAD,CAAM,CACf,MAAOjH,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjDqF,EADiD,CAC7CS,WAD6C,CAChCC,KADgC,CACzBzB,OAC5B,OAAO3F,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,WAAD,CAAK,CACzC,OAAQA,WAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAc+D,YAAA,EAAd,CACf,MAAK,CAAL,CAKI,MAJAkB,GAIO,CAJFlF,WAAGE,CAAAA,IAAH,EAIE,CAHPyF,WAGO,CAHOT,EAAGS,CAAAA,WAAH,CA3FjBN,0BA2FiB,CAA2B,UAA3B,CAGP,CAFPO,KAEO;AAFCD,WAAYE,CAAAA,WAAZ,CA5FXR,0BA4FW,CAED,CADPlB,OACO,CADGyB,KAAM5I,CAAAA,GAAN,CAAUyI,GAAV,CACH,CAAA,CAAC,CAAD,CAAe,IAAItF,OAAJ,CAAY,QAAS,CAACX,OAAD,CAAU0E,MAAV,CAAkB,CACrDC,OAAQK,CAAAA,SAAR,CAAoBC,QAAS,CAACC,KAAD,CAAQ,CAEjC,CADIE,KACJ,CADaF,KAAMC,CAAAA,MAAOC,CAAAA,MAC1B,EACIpF,OAAA,CAAQoF,KAAOc,CAAAA,KAAf,CADJ,CAIIlG,OAAA,CAAQ2G,IAAAA,EAAR,CAN6B,CASrCR,YAAYd,CAAAA,OAAZ,CAAsBoB,QAAS,CAACvB,KAAD,CAAQ,CACnC,IAAI1E,EACJkE,OAAA,CAAO3G,aAAcC,CAAAA,MAAd,CAAqB,aAArB,CAAsD,CACzDkF,qBAAoD,IAA9B,IAAC1C,EAAD,CAAM0E,KAAMC,CAAAA,MAAOI,CAAAA,KAAnB,GAA6C,IAAK,EAAlD,GAAsC/E,EAAtC,CAAsD,IAAK,EAA3D,CAA+DA,EAAG2C,CAAAA,OAD/B,CAAtD,CAAP,CAFmC,CAVc,CAAvC,CAAf,CAPf,CADyC,CAAtC,CAF8C,CAAlD,CADQ,CAyEnByD,QAASA,qBAAoB,CAACtJ,GAAD,CAAM,CAC/B,MAAO0B,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjDsD,KADiD,CAC1CkD,GACX,OAAO7H,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB;AAAwB,QAAS,CAACC,EAAD,CAAK,CACzC,OAAQA,EAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CACI,GAAI,CAAC3B,IAAKgI,CAAAA,oBAAL,EAAL,CAAkC,MAAO,CAAC,CAAD,CAAc,CAAd,CACzCnD,MAAA,CAAQgD,IAAAA,EACRnG,GAAGC,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAEI,MADAD,GAAGuC,CAAAA,IAAKC,CAAAA,IAAR,CAAa,CAAC,CAAD,CAAI,CAAJ,CAAA,CAAS,CAAT,CAAb,CACO,CAAA,CAAC,CAAD,CA5HhB0D,IAAA,CA4HqDpJ,GAnDjD0E,CAAAA,OAAQkC,CAAAA,KAzEZ,CAyEoB,GAzEpB,CA4HqD5G,GAnDvBY,CAAAA,IAzE9B,CA4HgB,CACX,MAAK,CAAL,CAEI,MADAyF,MACO,CADCnD,EAAGE,CAAAA,IAAH,EACD,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAII,MAHAmG,IAGO,CAHDrG,EAAGE,CAAAA,IAAH,EAGC,CADPqG,MAAOC,CAAAA,IAAP,CAAY,8CAAZ,CAA6DH,GAA7D,CACO,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAelD,KAAf,CACf,MAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAegD,IAAAA,EAAf,CAjBnB,CADyC,CAAtC,CAF8C,CAAlD,CADwB,CA6BnCM,QAASA,oBAAmB,CAAC3J,GAAD,CAAMqG,KAAN,CAAa,CACrC,MAAI7E,KAAKgI,CAAAA,oBAAL,EAAJ,CA5IOd,KAAA,CA6I0B1I,GAvEtB0E,CAAAA,OAAQkC,CAAAA,KAtEZ,CAsEoB,GAtEpB,CA6I0B5G,GAvEIY,CAAAA,IAtE9B,CA6I+ByF,KA7I/B,CA6IsCuD,CAAAA,KAAlC,CAAwC,QAAS,CAACnB,CAAD,CAAI,CAExDgB,MAAOC,CAAAA,IAAP,CAAY,6CAAZ;AAA4DjB,CAA5D,CAFwD,CAArD,CADX,CAMOpF,OAAQX,CAAAA,OAAR,EAP8B,CASzCmH,QAASA,kCAAiC,EAAG,CACzC,MAAOnI,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjD+G,kBADiD,CAC7BC,QACxB,OAAOrI,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,EAAD,CAAK,CACzC,OAAQA,EAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CACI2G,kBACA,CADqBT,IAAAA,EACrB,CAAAnG,EAAGC,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAEI,MADAD,GAAGuC,CAAAA,IAAKC,CAAAA,IAAR,CAAa,CAAC,CAAD,CAAI,CAAJ,CAAA,CAAS,CAAT,CAAb,CACO,CAAA,CAAC,CAAD,CAxJhB0D,IAAA,CAnDWY,aAmDX,CAwJgB,CACX,MAAK,CAAL,CAEI,MADAF,mBACO,CADc5G,EAAGE,CAAAA,IAAH,EACd,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAEI,MADAF,GAAGE,CAAAA,IAAH,EACO,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CACI,GAAK0G,kBAAL,CAeI,MAAO,CAAC,CAAD,CAAeA,kBAAf,CAdPC,SAAA,CAAWlJ,MAAA,EApKxB6H,MAAA,CAhDWsB,aAgDX,CA0KwCD,QA1KxC,CA0KkDH,CAAAA,KAArC,CAA2C,QAAS,CAACnB,CAAD,CAAI,CACpD,MAAOgB,OAAOC,CAAAA,IAAP,CAAY,qDAAZ;AAAoEjB,CAApE,CAD6C,CAAxD,CAIAwB,QAAQC,CAAAA,GAAR,CAAY,wBAAZ,CAAuCH,QAAvC,CAAkD,wEAAlD,CACA,OAAO,CAAC,CAAD,CAAeA,QAAf,CA1BnB,CADyC,CAAtC,CAF8C,CAAlD,CADkC,CA4D7CI,QAASA,cAAa,EAAG,CACrB,MAAOzI,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CACrD,IAAI1C,KACJ,OAAOqB,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,EAAD,CAAK,CACzC7C,KAAA,CA5qBD+J,WA6qBC,IAAI/J,KAAMgK,CAAAA,OAAV,EAAqBhK,KAAMgG,CAAAA,KAA3B,CACI,MAAO,CAAC,CAAD,CAAehG,KAAMgG,CAAAA,KAAMxD,CAAAA,OAA3B,CAIP,MAAMD,MAAA,CAAM,mEAAN,CAAN,CAPqC,CAAtC,CAF8C,CAAlD,CADc,CAkEzB0H,QAASA,WAAU,CAACtK,GAAD,CAAMsE,sBAAN,CAA8BiG,YAA9B,CAA4C,CACtC,IAAK,EAA1B;AAAIA,YAAJ,GAA+BA,YAA/B,CAA8C,CAAA,CAA9C,CACA,OAAO7I,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CAAA,IACjD1C,KADiD,CAC1CgG,KAD0C,CACnC4B,KADmC,CAC5BuC,WAD4B,CACfC,sBADe,CACSvH,EADT,CACagC,EADb,CACiBwF,EADjB,CACqBC,WADrB,CACkCC,mBADlC,CACuDpE,kBADvD,CAC2EqE,mBAD3E,CACgGtB,GADhG,CACqGuB,kBAC1J,OAAOpJ,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAAC8H,EAAD,CAAK,CACzC,OAAQA,EAAG5H,CAAAA,KAAX,EACI,KAAK,CAAL,CAKI,MAJA5C,gBAAA,CAAgBP,GAAhB,CAIA,CAHAK,KAGA,CAHQN,QAAA,CAASC,GAAT,CAGR,CAFAqG,KAEA,CAFQhG,KAAMgG,CAAAA,KAEd,CADA4B,KACA,CADQoB,IAAAA,EACR,CAAMhD,KAAN,CAAoB,CAAC,CAAD,CAAc,CAAd,CAApB,CACO,CAAC,CAAD,CAAciD,oBAAA,CAAqBtJ,GAArB,CAAd,CACX,MAAK,CAAL,CAQI,CAPAwK,WAOA,CAPcO,EAAG3H,CAAAA,IAAH,EAOd,GAiM6B,CAjM7B,CAN2BoH,WAuM9BjE,CAAAA,gBAjMG,CAiMgBH,IAAKnB,CAAAA,GAAL,EAjMhB;CALIoB,KAGA,CAHQmE,WAGR,CAFApK,QAAA,CAASJ,GAAT,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAASgG,KAAT,CAA1C,CAAd,CAEA,CAAA2E,oBAAA,CAAqBhL,GAArB,CAA0B,CAAEqG,MAAOA,KAAMA,CAAAA,KAAf,CAA1B,CAEJ,EAAA0E,EAAG5H,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAEI,GAAI,CAACoH,YAAL,EAAqBlE,KAArB,EA8L6B,CA9L7B,CAAsCA,KA8LzCE,CAAAA,gBA9LG,CA8LgBH,IAAKnB,CAAAA,GAAL,EA9LhB,CACI,MAAO,CAAC,CAAD,CAAe,CACdoB,MAAOA,KAAMA,CAAAA,KADC,CAAf,CAIX,IAAI,CAvwBb+D,WAsqBWC,CAAAA,OAiGF,CAAoB,MAAO,CAAC,CAAD,CAAc,CAAd,CAC3BnH,GAAA,CAAKmB,aACLa,GAAA,CAAK6B,4BACL2D,GAAA,CAAK,CAAC1K,GAAD,CACL,OAAO,CAAC,CAAD,CAAcmK,aAAA,EAAd,CACX,MAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAcjH,EAAG+H,CAAAA,KAAH,CAAS,IAAK,EAAd,CAAiB,CAAC/F,EAAG+F,CAAAA,KAAH,CAAS,IAAK,EAAd,CAAiBP,EAAGQ,CAAAA,MAAH,CAAU,CAACH,EAAG3H,CAAAA,IAAH,EAAD,CAAV,CAAjB,CAAD,CAA2CkB,sBAA3C,CAAjB,CAAd,CACf,MAAK,CAAL,CAGI,MAFAmG,uBAEO,CAFkBM,EAAG3H,CAAAA,IAAH,EAElB;AAAA,CAAC,CAAD,CAAcuG,mBAAA,CAAoB3J,GAApB,CAAyByK,sBAAzB,CAAd,CACX,MAAK,CAAL,CAKI,MAHAM,GAAG3H,CAAAA,IAAH,EAGO,CADPhD,QAAA,CAASJ,GAAT,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAAEgG,MAAOoE,sBAAT,CAA1C,CAAd,CACO,CAAA,CAAC,CAAD,CAAe,CAAEpE,MAAOoE,sBAAuBpE,CAAAA,KAAhC,CAAf,CACX,MAAK,CAAL,CAEI,MADA0E,GAAGtF,CAAAA,IAAKC,CAAAA,IAAR,CAAa,CAAC,CAAD,CAAI,EAAJ,CAAA,CAAU,EAAV,CAAb,CACA,CAAKrF,KAAM8K,CAAAA,cAAX,CACO,CAAC,CAAD,CAAc9K,KAAM8K,CAAAA,cAAeC,CAAAA,QAArB,EAAd,CADP,CAAkC,CAAC,CAAD,CAAc,CAAd,CAEtC,MAAK,CAAL,CASI,MARAT,YAQO,CAROI,EAAG3H,CAAAA,IAAH,EAQP,CAPPwH,mBAOO,CAPepJ,IAAK6J,CAAAA,YAAL,CAAkBV,WAAYtE,CAAAA,KAA9B,CAOf,CANPG,kBAMO,CANsC,IAAxB,GAAAoE,mBAAA,EACjBA,mBADiB,CACKxE,IAAKnB,CAAAA,GAAL,EADL,EAEK,CAFL,CAEjB2F,mBAFiB,CAGO,GAHP;AAGfA,mBAHe,CAIfxE,IAAKnB,CAAAA,GAAL,EAEC,CADPoB,KACO,CADC3E,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBgJ,WAAnB,CAAf,CAAgD,CAAsBnE,kBAAtB,CAAhD,CACD,CAAA,CAAC,CAAD,CAAc,EAAd,CACX,MAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAc1D,UAAA,CAAW9C,GAAX,CAAgB4J,CAAAA,KAAhB,CAAsB,QAAS,CAAC0B,EAAD,CAAK,CAEzD,KAAM7K,cAAcC,CAAAA,MAAd,CAAqB,iBAArB,CAAN,CAFyD,CAApC,CAAd,CAIf,MAAK,CAAL,CAEI,MADAmK,oBACO,CADeE,EAAG3H,CAAAA,IAAH,EACf,CAAA,CAAC,CAAD,CAAciB,aAAA,CAAcoC,gCAAA,CAAiCzG,GAAjC,CAAsC6K,mBAAtC,CAAd,CAA0EvG,sBAA1E,CAAd,CACX,MAAK,EAAL,CACI+B,KACA,CADQ0E,EAAG3H,CAAAA,IAAH,EACR,CAAA2H,EAAG5H,CAAAA,KAAH,CAAW,EACf,MAAK,EAAL,CAAS,MAAO,CAAC,CAAD,CAAc,EAAd,CAChB,MAAK,EAAL,CAKI,MAJAoG,IAIO,CAJDwB,EAAG3H,CAAAA,IAAH,EAIC,CAFPqG,MAAOxB,CAAAA,KAAP,CAAasB,GAAb,CAEO,CADPtB,KACO,CADCsB,GACD,CAAA,CAAC,CAAD,CAAc,EAAd,CACX,MAAK,EAAL,CACI,GAAMlD,KAAN,CAAa,MAAO,CAAC,CAAD;AAAc,EAAd,CAGpByE,mBAAA,CAAqBS,oBAAA,CAAqBtD,KAArB,CACrB,OAAO,CAAC,CAAD,CAAc,EAAd,CACX,MAAK,EAAL,CAOI,MANA6C,mBAMO,CANc,CACjBzE,MAAOA,KAAMA,CAAAA,KADI,CAMd,CADPjG,QAAA,CAASJ,GAAT,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAASgG,KAAT,CAA1C,CAAd,CACO,CAAA,CAAC,CAAD,CAAcsD,mBAAA,CAAoB3J,GAApB,CAAyBqG,KAAzB,CAAd,CACX,MAAK,EAAL,CACI0E,EAAG3H,CAAAA,IAAH,EACA,CAAA2H,EAAG5H,CAAAA,KAAH,CAAW,EACf,MAAK,EAAL,CAEI,MADA6H,qBAAA,CAAqBhL,GAArB,CAA0B8K,kBAA1B,CACO,CAAA,CAAC,CAAD,CAAeA,kBAAf,CA1Ff,CADyC,CAAtC,CAF8C,CAAlD,CAFoD,CAoG/DU,QAASA,iBAAgB,CAACxL,GAAD,CAAMsE,sBAAN,CAA8BmH,IAA9B,CAAoCC,QAApC,CAA8CC,OAA9C,CAAuD,CAC5E,IAAItL,MAAQN,QAAA,CAASC,GAAT,CACR4L,KAAAA,CAAgB,CAChBC,KAAMH,QADU,CAEhBzD,MAAO0D,OAFS,CAGVF,IAHU,CAKhBK,KAAAA,CAAWpK,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf;AAAmBtB,KAAnB,CAAf,CAA0C,CAAE0L,eAAgBrK,KAAMsK,CAAAA,aAAN,CAAoBtK,KAAMsK,CAAAA,aAAN,CAAoB,EAApB,CAAwB3L,KAAM0L,CAAAA,cAA9B,CAApB,CAAmE,CAACH,IAAD,CAAnE,CAAlB,CAA1C,CAIVE,KAASG,CAAAA,cAAd,GACQA,sBACJ,CADqBC,oBAAA,CAAqBlM,GAArB,CAA0BsE,sBAA1B,CACrB,CAAAwH,IAASG,CAAAA,cAAT,CAA0BA,sBAF9B,CAMI,EAACH,IAASG,CAAAA,cAAeE,CAAAA,SAAxB,EAAL,EAA4C9L,KAAM+L,CAAAA,yBAAlD,EACIN,IAASG,CAAAA,cAAeI,CAAAA,KAAxB,EAGJ,IAAIhM,KAAMgG,CAAAA,KAAV,EA6F6C,CA7F7C,CAA2BhG,KAAMgG,CAAAA,KA6FpBE,CAAAA,gBA7Fb,CA6FgCH,IAAKnB,CAAAA,GAAL,EA7FhC,CAAyC,CACrC,IAAIqH,aAAejM,KAAMgG,CAAAA,KACzBhD,QAAQX,CAAAA,OAAR,EACK6J,CAAAA,IADL,CACU,QAAS,EAAG,CAAE,MAAOb,SAAA,CAAS,CAAErF,MAAOiG,YAAajG,CAAAA,KAAtB,CAAT,CAAT,CADtB,CAEKuD,CAAAA,KAFL,CAEW,QAAS,EAAG,EAFvB,CAFqC,CAQzCxJ,QAAA,CAASJ,GAAT;AAAc8L,IAAd,CA7B4E,CA+BhFU,QAASA,oBAAmB,CAACxM,GAAD,CAAM0L,QAAN,CAAgB,CACxC,IAAIrL,MAAQN,QAAA,CAASC,GAAT,CAAZ,CACIyM,aAAepM,KAAM0L,CAAAA,cAAeW,CAAAA,MAArB,CAA4B,QAAS,CAACC,aAAD,CAAgB,CAAE,MAAOA,cAAcd,CAAAA,IAArB,GAA8BH,QAAhC,CAArD,CACS,EAA5B,GAAIe,YAAaG,CAAAA,MAAjB,EACIvM,KAAM4L,CAAAA,cADV,EAEI5L,KAAM4L,CAAAA,cAAeE,CAAAA,SAArB,EAFJ,EAGI9L,KAAM4L,CAAAA,cAAeY,CAAAA,IAArB,EAEJzM,SAAA,CAASJ,GAAT,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAAE0L,eAAgBU,YAAlB,CAA1C,CAAd,CARwC,CAU5CP,QAASA,qBAAoB,CAAClM,GAAD,CAAMsE,sBAAN,CAA8B,CACvD,IAAIwI,MAAQ,IACZ,OAAO,KAAIC,SAAJ,CAGP,QAAS,EAAG,CAAE,MAAOrL,MAAMqB,CAAAA,SAAN,CAAgB+J,KAAhB;AAAuB,IAAK,EAA5B,CAA+B,IAAK,EAApC,CAAuC,QAAS,EAAG,CAAA,IAChEzM,KADgE,CACzDyH,MACX,OAAOpG,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,EAAD,CAAK,CACzC,OAAQA,EAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CAEI,MADA9C,MACA,CADQN,QAAA,CAASC,GAAT,CACR,CAAMK,KAAMgG,CAAAA,KAAZ,CAA0B,CAAC,CAAD,CAAc,CAAd,CAA1B,CACO,CAAC,CAAD,CAAciE,UAAA,CAAWtK,GAAX,CAAgBsE,sBAAhB,CAAd,CACX,MAAK,CAAL,CAEI,MADAwD,OACO,CADE5E,EAAGE,CAAAA,IAAH,EACF,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAckH,UAAA,CAAWtK,GAAX,CAAgBsE,sBAAhB,CAAwC,CAAA,CAAxC,CAAd,CACf,MAAK,CAAL,CACIwD,MACA,CADS5E,EAAGE,CAAAA,IAAH,EACT,CAAAF,EAAGC,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAEI,GAAI2E,MAAOG,CAAAA,KAAX,CACI,KAAMH,OAAOG,CAAAA,KAAb,CAEJ,MAAO,CAAC,CAAD,CAjBf,CADyC,CAAtC,CAF6D,CAAnD,CAAT,CAHL,CA0BA,QAAS,EAAG,CAEf,MAAO,CAAA,CAFQ,CA1BZ,CA6BJ,QAAS,EAAG,CACX,IAAI5H,MAAQN,QAAA,CAASC,GAAT,CACZ,IAAIK,KAAMgG,CAAAA,KAAV,CAAiB,CAEb,IAAI2G,sBAAwB3M,KAAMgG,CAAAA,KAAMG,CAAAA,kBAApCwG;AAEI,EAFJA,EACC3M,KAAMgG,CAAAA,KAAME,CAAAA,gBADbyG,CACgC3M,KAAMgG,CAAAA,KAAMG,CAAAA,kBAD5CwG,EAGA,GAGJA,sBAAA,CAAwB/L,IAAKgM,CAAAA,GAAL,CAASD,qBAAT,CADK3M,KAAMgG,CAAAA,KAAME,CAAAA,gBACjB,CADoC,GACpC,CACxB,OAAOtF,KAAKiM,CAAAA,GAAL,CAAS,CAAT,CAAYF,qBAAZ,CAAoC5G,IAAKnB,CAAAA,GAAL,EAApC,CATM,CAYb,MAAO,EAdA,CA7BR,CA6CJkI,kBAAmBC,CAAAA,gBA7Cf,CA6CiCD,kBAAmBE,CAAAA,gBA7CpD,CAFgD,CAiD3DrC,QAASA,qBAAoB,CAAChL,GAAD,CAAMqG,KAAN,CAAa,CAAA,IAE7BiH,GAAK,CAAd,KAAiBC,GAAjB,CADgBxN,QAAA,CAASC,GAAT,CAAc+L,CAAAA,cAC9B,CAA0CuB,EAA1C,CAA+CC,GAAYX,CAAAA,MAA3D,CAAmEU,EAAA,EAAnE,CAAyE,CACrE,IAAIE,SAAWD,GAAA,CAAYD,EAAZ,CACf,IAAI,CACsB,UAAtB,GAAIE,QAAS/B,CAAAA,IAAb,EAAkE,IAAlE,EAAmDpF,KAAM4B,CAAAA,KAAzD,CAIIuF,QAASvF,CAAAA,KAAT,CAAe5B,KAAM4B,CAAAA,KAArB,CAJJ,CAUIuF,QAAS3B,CAAAA,IAAT,CAAcxF,KAAd,CAXJ,CAcJ,MAAOoH,OAAP,CAAgB,EAhBqD,CAFnC;AA0B1ClC,QAASA,qBAAoB,CAACtD,KAAD,CAAQ,CACjC,MAAO,CACH5B,MAlOG7E,IAAKkM,CAAAA,MAAOC,CAAAA,YAAZ,CAAyBpI,IAAKC,CAAAA,SAAL,CAkOJoI,qBAlOI,CAAzB,CACQ,CAAA,CADR,CAiOA,CAEI3F,KAFJ,CAD0B,CA+BrC4F,QAASA,SAAQ,CAAC7N,GAAD,CAAM8N,iBAAN,CAAyB1B,yBAAzB,CAAoD,CACjE,IAAI/L,MAAQN,QAAA,CAASC,GAAT,CACZ,IAAIK,KAAMG,CAAAA,SAAV,CACI,KAAMC,cAAcC,CAAAA,MAAd,CAAqB,mBAArB,CAAkE,CACpEC,QAASX,GAAIY,CAAAA,IADuD,CAAlE,CAAN,CAIAkL,KAAAA,CAAWpK,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAAEG,UAAW,CAAA,CAAb,CAA1C,CACkB,SAAjC,GAAI,MAAOsN,kBAAX,CACIhC,KAASxK,CAAAA,OADb,CACuBwM,iBADvB,CAIIhC,KAASX,CAAAA,cAJb,CAI8B2C,iBAK9BhC,MAASM,CAAAA,yBAAT;AACkC/C,IAAAA,EAA9B,GAAA+C,yBAAA,CACMpM,GAAI+N,CAAAA,8BADV,CAEM3B,yBACVhM,SAAA,CAASJ,GAAT,CAAc8L,KAAd,CAEIA,MAASxK,CAAAA,OAAb,EACID,UAAA,CAAWrB,GAAX,CAAgB8L,KAASxK,CAAAA,OAAzB,CAAkCsI,CAAAA,KAAlC,CAAwC,QAAS,EAAG,EAApD,CAxB6D,CA8CrEwB,QAASA,SAAQ,CAACpL,GAAD,CAAMsE,sBAAN,CAA8BiG,YAA9B,CAA4C,CACzD,MAAO7I,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CACrD,IAAI+E,MACJ,OAAOpG,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,EAAD,CAAK,CACzC,OAAQA,EAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CAAcmH,UAAA,CAAWtK,GAAX,CAAgBsE,sBAAhB,CAAwCiG,YAAxC,CAAd,CACf,MAAK,CAAL,CACIzC,MAAA,CAAS5E,EAAGE,CAAAA,IAAH,EACT,IAAI0E,MAAOG,CAAAA,KAAX,CACI,KAAMH,OAAOG,CAAAA,KAAb,CAEJ,MAAO,CAAC,CAAD;AAAe,CAAE5B,MAAOyB,MAAOzB,CAAAA,KAAhB,CAAf,CAPf,CADyC,CAAtC,CAF8C,CAAlD,CADkD,CAgB7D2H,QAASA,eAAc,CAAChO,GAAD,CAAMsE,sBAAN,CAA8B2J,gBAA9B,CAAgDtC,OAAhD,CAQvBuC,YARuB,CAQT,CACV,IAAIC,OAASA,QAAS,EAAG,EACrBC,aAAAA,CAAUA,QAAS,EAAG,EAEtBD,OAAA,CADyB,IAA7B,EAAIF,gBAAiBpC,CAAAA,IAArB,CACaoC,gBAAiBpC,CAAAA,IAAKwC,CAAAA,IAAtB,CAA2BJ,gBAA3B,CADb,CAIaA,gBAEiB,KAA9B,EAAIA,gBAAiBhG,CAAAA,KAArB,CACImG,YADJ,CACcH,gBAAiBhG,CAAAA,KAAMoG,CAAAA,IAAvB,CAA4BJ,gBAA5B,CADd,CAGStC,OAHT,GAIIyC,YAJJ,CAIczC,OAJd,CAMAH,iBAAA,CAAiBxL,GAAjB,CAAsBsE,sBAAtB,CAA8C,UAA9C,CAAyE6J,MAAzE,CAAiFC,YAAjF,CACA,OAAO,SAAS,EAAG,CAAE,MAAO5B,oBAAA,CAAoBxM,GAApB;AAAyBmO,MAAzB,CAAT,CAhBT,CAmCdG,QAASA,QAAO,CAACtO,GAAD,CAAMsE,sBAAN,CAA8B,CAC1C,MAAO,CACEtE,GADF,CAEH6N,SAAUA,QAAS,CAACC,iBAAD,CAAoB1B,yBAApB,CAA+C,CAAE,MAAOyB,SAAA,CAAS7N,GAAT,CAAc8N,iBAAd,CAAiC1B,yBAAjC,CAAT,CAF/D,CAGHmC,2BAA4BA,QAAS,CAACnC,yBAAD,CAA4B,CA/ErE,IAAI/L,MAAQN,QAAA,CAgF8BC,GAhF9B,CAGRK,MAAM4L,CAAAA,cAAV,GACsC,CAAA,CAAlC,GA4E2CG,yBA5E3C,CACI/L,KAAM4L,CAAAA,cAAeI,CAAAA,KAArB,EADJ,CAIIhM,KAAM4L,CAAAA,cAAeY,CAAAA,IAArB,EALR,CAQAzM,SAAA,CAqE0CJ,GArE1C,CAAc0B,KAAMC,CAAAA,QAAN,CAAeD,KAAMC,CAAAA,QAAN,CAAe,EAAf,CAAmBtB,KAAnB,CAAf,CAA0C,CAqET+L,yBArES,CAA1C,CAAd,CAoEqE,CAH9D,CAMHhB,SAAUA,QAAS,CAACb,YAAD,CAAe,CAC9B,MAAOa,SAAA,CAASpL,GAAT;AAAcsE,sBAAd,CAAsCiG,YAAtC,CADuB,CAN/B,CASHyD,eAAgBA,QAAS,CAACC,gBAAD,CAAmBtC,OAAnB,CAA4BuC,YAA5B,CAA0C,CAC/D,MAAOF,eAAA,CAAehO,GAAf,CAAoBsE,sBAApB,CAMP2J,gBANO,CAMWtC,OANX,CADwD,CAThE,CAkBH6C,SAAU,CACNC,OAAQA,QAAS,EAAG,CAEhB,IAFgB,IAEPnB,GAAK,CAFE,CAECoB,iBADI3O,QAAA,CAASC,GAAT,CAAc+L,CAAAA,cACnC,CAAoDuB,EAApD,CAAyDoB,gBAAiB9B,CAAAA,MAA1E,CAAkFU,EAAA,EAAlF,CAEId,mBAAA,CAAoBxM,GAApB,CADoB0O,gBAAA/B,CAAiBW,EAAjBX,CACmBd,CAAAA,IAAvC,CAEJ,OAAOxI,QAAQX,CAAAA,OAAR,EANS,CADd,CAlBP,CADmC,CA+B9CiM,QAASA,gBAAe,CAAC3O,GAAD,CAAMsE,sBAAN,CAA8B,CAClD,MAAO,CACH8G,SAAUA,QAAS,CAACb,YAAD,CAAe,CAC9B,MAAOD,WAAA,CAAWtK,GAAX,CAAgBsE,sBAAhB;AAAwCiG,YAAxC,CADuB,CAD/B,CAIHiB,iBAAkBA,QAAS,CAACE,QAAD,CAAW,CAClC,MAAOF,iBAAA,CAAiBxL,GAAjB,CAAsBsE,sBAAtB,CAA8C,UAA9C,CAAyEoH,QAAzE,CAD2B,CAJnC,CAOHc,oBAAqBA,QAAS,CAACd,QAAD,CAAW,CAAE,MAAOc,oBAAA,CAAoBxM,GAApB,CAAyB0L,QAAzB,CAAT,CAPtC,CAD2C,CArrClDkD,MAAAA,CAAWhP,OAAA,CAAQ,kDAAR,CACf,KAAIiP,UAAYjP,OAAA,CAAQ,wDAAR,CAAhB,CACI8B,MAAQ9B,OAAA,CAAQ,iCAAR,CADZ,CAEI4B,KAAO5B,OAAA,CAAQ,mDAAR,CACPkP,QAAAA,CAAWlP,OAAA,CAAQ,qDAAR,CAIXmP;MAAAA,CAAuDH,MAFf,EAAkB,QAAlB,GAAK,MAEUA,OAFf,EAA8B,SAA9B,EAEeA,OAFf,CAEeA,MAFf,CAAmD,CAAE,UAEtCA,MAFoC,CAoB/F,KAAI1L,WACA8L,OAAAA,EAAU9L,WAAA,CAAK,EAAL,CACVA,WAAA,CAAG,mBAAH,CADU,CACwC,qIADxC,CAIVA,WAAA,CAAG,uBAAH,CAJU,CAIgD,mKAJhD,CAMVA,WAAA,CAAG,qBAAH,CANU;AAM4C,2GAN5C,CAQVA,WAAA,CAAG,mBAAH,CARU,CAQwC,iFARxC,CAUVA,WAAA,CAAG,oBAAH,CAVU,CAU0C,yEAV1C,CAWVA,WAAA,CAAG,cAAH,CAXU,CAW8B,6EAX9B,CAYVA,WAAA,CAAG,aAAH,CAZU,CAY4B,kFAZ5B;AAaVA,WAAA,CAAG,aAAH,CAbU,CAa8B,gFAb9B,CAcVA,WAAA,CAAG,iBAAH,CAdU,CAcoC,kBAdpC,CAeVA,WAfA8L,CAgBJ,KAAIvO,cAAgB,IAAIe,IAAKyN,CAAAA,YAAT,CAAsB,UAAtB,CAAkC,UAAlC,CAA8CD,MAA9C,CAApB,CAkBI/O,iBAAmB,IAAIiP,GAlB3B,CAmBI/O,cAAgB,CAChBK,UAAW,CAAA,CADK,CAEhBuL,eAAgB,EAFA,CAnBpB,CAuBI3B,YAAc,CACdC,QAAS,CAAA,CADK,CAvBlB,CA2LI8C,mBAAqB,CAKrBgC,gBAAiB,GALI,CAUrB/B,iBAAkB,GAVG,CAcrBC,iBAAkB,IAdG,CA3LzB,CAkOIN,UAA2B,QAAS,EAAG,CACvCA,QAASA,UAAS,CAACqC,SAAD,CAAYC,WAAZ,CAAyBC,eAAzB,CAA0CC,UAA1C;AAAsDC,UAAtD,CAAkE,CAChF,IAAKJ,CAAAA,SAAL,CAAiBA,SACjB,KAAKC,CAAAA,WAAL,CAAmBA,WACnB,KAAKC,CAAAA,eAAL,CAAuBA,eACvB,KAAKC,CAAAA,UAAL,CAAkBA,UAClB,KAAKC,CAAAA,UAAL,CAAkBA,UAClB,KAAKC,CAAAA,OAAL,CAAe,IACf,KAAKC,CAAAA,qBAAL,CAA6BH,UAC7B,IAAIA,UAAJ,CAAiBC,UAAjB,CACI,KAAU5M,MAAJ,CAAU,yDAAV,CAAN,CAT4E,CAYpFmK,SAAU4C,CAAAA,SAAUtD,CAAAA,KAApB,CAA4BuD,QAAS,EAAG,CACpC,IAAKF,CAAAA,qBAAL,CAA6B,IAAKH,CAAAA,UAClC,KAAKM,CAAAA,OAAL,CAAa,CAAA,CAAb,CAAmBjG,CAAAA,KAAnB,CAAyB,QAAS,EAAG,EAArC,CAFoC,CAMxCmD,UAAU4C,CAAAA,SAAU9C,CAAAA,IAApB,CAA2BiD,QAAS,EAAG,CAC/B,IAAKL,CAAAA,OAAT,GACI,IAAKA,CAAAA,OAAQrI,CAAAA,MAAb,CAAoB,WAApB,CACA;AAAA,IAAKqI,CAAAA,OAAL,CAAe,IAFnB,CADmC,CAMvC1C,UAAU4C,CAAAA,SAAUxD,CAAAA,SAApB,CAAgC4D,QAAS,EAAG,CACxC,MAAO,CAAC,CAAC,IAAKN,CAAAA,OAD0B,CAG5C1C,UAAU4C,CAAAA,SAAUE,CAAAA,OAApB,CAA8BG,QAAS,CAACC,YAAD,CAAe,CAClD,MAAOvO,MAAMqB,CAAAA,SAAN,CAAgB,IAAhB,CAAsB,IAAK,EAA3B,CAA8B,IAAK,EAAnC,CAAsC,QAAS,EAAG,CACrD,IAAImN,OACJ,OAAOxO,MAAMuB,CAAAA,WAAN,CAAkB,IAAlB,CAAwB,QAAS,CAACC,EAAD,CAAK,CACzC,OAAQA,EAAGC,CAAAA,KAAX,EACI,KAAK,CAAL,CACI,IAAK0J,CAAAA,IAAL,EACA,CAAA3J,EAAGC,CAAAA,KAAH,CAAW,CACf,MAAK,CAAL,CAGI,MAFAD,GAAGuC,CAAAA,IAAKC,CAAAA,IAAR,CAAa,CAAC,CAAD,CAAI,CAAJ,CAAA,CAAS,CAAT,CAAb,CAEO,CADP,IAAK+J,CAAAA,OACE,CADQ,IAAIjO,IAAKC,CAAAA,QACjB,CAAA,CAAC,CAAD,CAAcyC,KAAA,CAAM,IAAKiM,CAAAA,UAAL,CAAgBF,YAAhB,CAAN,CAAd,CACX,MAAK,CAAL,CAQI,MAPA/M,GAAGE,CAAAA,IAAH,EAOO,CADP,IAAKqM,CAAAA,OAAQ/M,CAAAA,OAAb,EACO,CAAA,CAAC,CAAD,CAAc,IAAK+M,CAAAA,OAAQ5M,CAAAA,OAA3B,CACX,MAAK,CAAL,CAGI,MAFAK,GAAGE,CAAAA,IAAH,EAEO,CADP,IAAKqM,CAAAA,OACE;AADQ,IAAIjO,IAAKC,CAAAA,QACjB,CAAA,CAAC,CAAD,CAAc,IAAK2N,CAAAA,SAAL,EAAd,CACX,MAAK,CAAL,CAGI,MAFAlM,GAAGE,CAAAA,IAAH,EAEO,CADP,IAAKqM,CAAAA,OAAQ/M,CAAAA,OAAb,EACO,CAAA,CAAC,CAAD,CAAc,IAAK+M,CAAAA,OAAQ5M,CAAAA,OAA3B,CACX,MAAK,CAAL,CAKI,MAJAK,GAAGE,CAAAA,IAAH,EAIO,CAHP,IAAKyM,CAAAA,OAAL,CAAa,CAAA,CAAb,CAAmBjG,CAAAA,KAAnB,CAAyB,QAAS,EAAG,EAArC,CAGO,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAUI,MATAsG,QASO,CATGhN,EAAGE,CAAAA,IAAH,EASH,CARH,IAAKiM,CAAAA,WAAL,CAAiBa,OAAjB,CAAJ,CACI,IAAKL,CAAAA,OAAL,CAAa,CAAA,CAAb,CAAoBjG,CAAAA,KAApB,CAA0B,QAAS,EAAG,EAAtC,CADJ,CAMI,IAAKiD,CAAAA,IAAL,EAEG,CAAA,CAAC,CAAD,CAAc,CAAd,CACX,MAAK,CAAL,CAAQ,MAAO,CAAC,CAAD,CA1CnB,CADyC,CAAtC,CAF8C,CAAlD,CAD2C,CAmDtDE,UAAU4C,CAAAA,SAAUQ,CAAAA,UAApB,CAAiCC,QAAS,CAACH,YAAD,CAAe,CACrD,GAAIA,YAAJ,CAKI,MAFA,KAAKP,CAAAA,qBAEE,CAFsB,IAAKH,CAAAA,UAE3B,CAAA,IAAKD,CAAAA,eAAL,EAIHe,aAAAA,CAA2B,IAAKX,CAAAA,qBAEpC,KAAKA,CAAAA,qBAAL;AAA8B,CAE1B,KAAKA,CAAAA,qBAAT,CAAiC,IAAKF,CAAAA,UAAtC,GACI,IAAKE,CAAAA,qBADT,CACiC,IAAKF,CAAAA,UADtC,CAGA,OAAOa,aAjB0C,CAoBzD,OAAOtD,UAnGgC,CAAZ,EAlO/B,CA6cI5F,UAAY,IA7chB,CAklBIsC,OAAS,IAAIqF,OAASwB,CAAAA,MAAb,CAAoB,qBAApB,CAllBb,CA4vBI1C,sBAAwB,CAAE3F,MAAO,eAAT,CA+a5BsI,UAAyB,CAAC3B,QAAD,CAAW,CAEhCA,QAASJ,CAAAA,QAASgC,CAAAA,iBAAlB,CAYKC,CAZ+B,IAAI5B,SAAU6B,CAAAA,SAAd,CAJnBC,UAImB,CAAwC,QAAS,CAACjN,SAAD,CAAY,CAE7F,IAAI1D,IAAM0D,SAAUkN,CAAAA,WAAV,CAAsB,KAAtB,CAA6BzL,CAAAA,YAA7B,EACNb,UAAAA,CAAyBZ,SAAUkN,CAAAA,WAAV,CAAsB,iBAAtB,CAC7B,OAAOtC,QAAA,CAAQtO,GAAR,CAAasE,SAAb,CAJsF,CAA7D,CAKjC,QALiC,CAY/BmM,EAAAA,oBAZ+B,CAYV,UAZU,CAkB/BI,CAAAA,0BAlB+B,CAkBJ,QAAS,CAACnN,SAAD;AAAYoN,mBAAZ,CAAiCC,SAAjC,CAA4C,CAClDrN,SAAUkN,CAAAA,WAAVI,CAtBTC,oBAsBSD,CACN3P,CAAAA,UAAzB,EAFiF,CAlBjD,CAApC,CAuBAuN,SAASJ,CAAAA,QAASgC,CAAAA,iBAAlB,CAK0BC,CALU,IAAI5B,SAAU6B,CAAAA,SAAd,CA1BVO,oBA0BU,CAAiD,QAAS,CAACvN,SAAD,CAAY,CAEtG,IAAI1D,IAAM0D,SAAUkN,CAAAA,WAAV,CAAsB,KAAtB,CAA6BzL,CAAAA,YAA7B,EACNb,UAAAA,CAAyBZ,SAAUkN,CAAAA,WAAV,CAAsB,iBAAtB,CAC7B,OAAOjC,gBAAA,CAAgB3O,GAAhB,CAAqBsE,SAArB,CAJ+F,CAAtE,CAKjC,QALiC,CAKVmM,EAAAA,oBALU,CAKW,UALX,CAApC,CAMA7B,SAASsC,CAAAA,eAAT,CApDOtQ,qBAoDP,CAnDUuQ,OAmDV,CA/BgC,CAApCZ,CAiCA,CAAiBxB,MAAA,CAAkB,SAAlB,CAAjB,CApfAqC,UAA4B,EAAG,CAC3B,IAAIC,QAAU7P,IAAK8P,CAAAA,SAAL,EACd,IAAqD,QAArD;AAAI,MAAOD,QAAQE,CAAAA,6BAAnB,EAC8C,CAAA,CAD9C,GACIF,OAAQE,CAAAA,6BADZ,CAAA,CAIA,IAAIC,WA7rBGpH,WA8rBPoH,WAAWnH,CAAAA,OAAX,CAAqB,CAAA,CACrB,KAAIoH,cAAgB,IAAIjQ,IAAKC,CAAAA,QAC7B+P,WAAWnL,CAAAA,KAAX,CAAmBoL,aACkC,SAArD,GAAI,MAAOJ,QAAQE,CAAAA,6BAAnB,CACIE,aAAc/O,CAAAA,OAAd,CAAsB2O,OAAQE,CAAAA,6BAA9B,CADJ,CAIIE,aAAc/O,CAAAA,OAAd,CAAsBmH,iCAAA,EAAtB,CAZJ,CAF2B,CAA/BuH,CAqfA,EA3vCmH;\",\n\"sources\":[\"node_modules/@firebase/app-check/dist/index.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$app_check$dist$index_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nvar firebase = require('@firebase/app');\\nvar component = require('@firebase/component');\\nvar tslib = require('tslib');\\nvar util = require('@firebase/util');\\nvar logger$1 = require('@firebase/logger');\\n\\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\\n\\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar _a;\\r\\nvar ERRORS = (_a = {},\\r\\n    _a[\\\"already-activated\\\" /* ALREADY_ACTIVATED */] = 'You are trying to activate AppCheck for FirebaseApp {$appName}, ' +\\r\\n        'while it is already activated. ' +\\r\\n        'AppCheck can only be activated once.',\\r\\n    _a[\\\"use-before-activation\\\" /* USE_BEFORE_ACTIVATION */] = 'AppCheck is being used before activate() is called for FirebaseApp {$appName}. ' +\\r\\n        'Please make sure you call activate() before instantiating other Firebase services.',\\r\\n    _a[\\\"fetch-network-error\\\" /* FETCH_NETWORK_ERROR */] = 'Fetch failed to connect to a network. Check Internet connection. ' +\\r\\n        'Original error: {$originalErrorMessage}.',\\r\\n    _a[\\\"fetch-parse-error\\\" /* FETCH_PARSE_ERROR */] = 'Fetch client could not parse response.' +\\r\\n        ' Original error: {$originalErrorMessage}.',\\r\\n    _a[\\\"fetch-status-error\\\" /* FETCH_STATUS_ERROR */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\\r\\n    _a[\\\"storage-open\\\" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\\r\\n    _a[\\\"storage-get\\\" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\\r\\n    _a[\\\"storage-set\\\" /* STORAGE_WRITE */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\\r\\n    _a[\\\"recaptcha-error\\\" /* RECAPTCHA_ERROR */] = 'ReCAPTCHA error.',\\r\\n    _a);\\r\\nvar ERROR_FACTORY = new util.ErrorFactory('appCheck', 'AppCheck', ERRORS);\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar APP_CHECK_STATES = new Map();\\r\\nvar DEFAULT_STATE = {\\r\\n    activated: false,\\r\\n    tokenObservers: []\\r\\n};\\r\\nvar DEBUG_STATE = {\\r\\n    enabled: false\\r\\n};\\r\\nfunction getState(app) {\\r\\n    return APP_CHECK_STATES.get(app) || DEFAULT_STATE;\\r\\n}\\r\\nfunction setState(app, state) {\\r\\n    APP_CHECK_STATES.set(app, state);\\r\\n}\\r\\nfunction getDebugState() {\\r\\n    return DEBUG_STATE;\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nfunction getRecaptcha() {\\r\\n    return self.grecaptcha;\\r\\n}\\r\\nfunction ensureActivated(app) {\\r\\n    if (!getState(app).activated) {\\r\\n        throw ERROR_FACTORY.create(\\\"use-before-activation\\\" /* USE_BEFORE_ACTIVATION */, {\\r\\n            appName: app.name\\r\\n        });\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Copied from https://stackoverflow.com/a/2117523\\r\\n */\\r\\nfunction uuidv4() {\\r\\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\\r\\n        var r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\\r\\n        return v.toString(16);\\r\\n    });\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\\r\\nfunction initialize(app, siteKey) {\\r\\n    var state = getState(app);\\r\\n    var initialized = new util.Deferred();\\r\\n    setState(app, tslib.__assign(tslib.__assign({}, state), { reCAPTCHAState: { initialized: initialized } }));\\r\\n    var divId = \\\"fire_app_check_\\\" + app.name;\\r\\n    var invisibleDiv = document.createElement('div');\\r\\n    invisibleDiv.id = divId;\\r\\n    invisibleDiv.style.display = 'none';\\r\\n    document.body.appendChild(invisibleDiv);\\r\\n    var grecaptcha = getRecaptcha();\\r\\n    if (!grecaptcha) {\\r\\n        loadReCAPTCHAScript(function () {\\r\\n            var grecaptcha = getRecaptcha();\\r\\n            if (!grecaptcha) {\\r\\n                // it shouldn't happen.\\r\\n                throw new Error('no recaptcha');\\r\\n            }\\r\\n            grecaptcha.ready(function () {\\r\\n                // Invisible widgets allow us to set a different siteKey for each widget, so we use them to support multiple apps\\r\\n                renderInvisibleWidget(app, siteKey, grecaptcha, divId);\\r\\n                initialized.resolve(grecaptcha);\\r\\n            });\\r\\n        });\\r\\n    }\\r\\n    else {\\r\\n        grecaptcha.ready(function () {\\r\\n            renderInvisibleWidget(app, siteKey, grecaptcha, divId);\\r\\n            initialized.resolve(grecaptcha);\\r\\n        });\\r\\n    }\\r\\n    return initialized.promise;\\r\\n}\\r\\nfunction getToken$2(app) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var reCAPTCHAState, recaptcha;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    ensureActivated(app);\\r\\n                    reCAPTCHAState = getState(app).reCAPTCHAState;\\r\\n                    return [4 /*yield*/, reCAPTCHAState.initialized.promise];\\r\\n                case 1:\\r\\n                    recaptcha = _a.sent();\\r\\n                    return [2 /*return*/, new Promise(function (resolve, _reject) {\\r\\n                            // Updated after initialization is complete.\\r\\n                            var reCAPTCHAState = getState(app).reCAPTCHAState;\\r\\n                            recaptcha.ready(function () {\\r\\n                                resolve(\\r\\n                                // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\\r\\n                                recaptcha.execute(reCAPTCHAState.widgetId, {\\r\\n                                    action: 'fire_app_check'\\r\\n                                }));\\r\\n                            });\\r\\n                        })];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n *\\r\\n * @param app\\r\\n * @param container - Id of a HTML element.\\r\\n */\\r\\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\\r\\n    var widgetId = grecaptcha.render(container, {\\r\\n        sitekey: siteKey,\\r\\n        size: 'invisible'\\r\\n    });\\r\\n    var state = getState(app);\\r\\n    setState(app, tslib.__assign(tslib.__assign({}, state), { reCAPTCHAState: tslib.__assign(tslib.__assign({}, state.reCAPTCHAState), { // state.reCAPTCHAState is set in the initialize()\\r\\n            widgetId: widgetId }) }));\\r\\n}\\r\\nfunction loadReCAPTCHAScript(onload) {\\r\\n    var script = document.createElement('script');\\r\\n    script.src = \\\"\\\" + RECAPTCHA_URL;\\r\\n    script.onload = onload;\\r\\n    document.head.appendChild(script);\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1beta';\\r\\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaToken';\\r\\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\\r\\nvar TOKEN_REFRESH_TIME = {\\r\\n    /**\\r\\n     * The offset time before token natural expiration to run the refresh.\\r\\n     * This is currently 5 minutes.\\r\\n     */\\r\\n    OFFSET_DURATION: 5 * 60 * 1000,\\r\\n    /**\\r\\n     * This is the first retrial wait after an error. This is currently\\r\\n     * 30 seconds.\\r\\n     */\\r\\n    RETRIAL_MIN_WAIT: 30 * 1000,\\r\\n    /**\\r\\n     * This is the maximum retrial wait, currently 16 minutes.\\r\\n     */\\r\\n    RETRIAL_MAX_WAIT: 16 * 60 * 1000\\r\\n};\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Port from auth proactiverefresh.js\\r\\n *\\r\\n */\\r\\n// TODO: move it to @firebase/util?\\r\\n// TODO: allow to config whether refresh should happen in the background\\r\\nvar Refresher = /** @class */ (function () {\\r\\n    function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\\r\\n        this.operation = operation;\\r\\n        this.retryPolicy = retryPolicy;\\r\\n        this.getWaitDuration = getWaitDuration;\\r\\n        this.lowerBound = lowerBound;\\r\\n        this.upperBound = upperBound;\\r\\n        this.pending = null;\\r\\n        this.nextErrorWaitInterval = lowerBound;\\r\\n        if (lowerBound > upperBound) {\\r\\n            throw new Error('Proactive refresh lower bound greater than upper bound!');\\r\\n        }\\r\\n    }\\r\\n    Refresher.prototype.start = function () {\\r\\n        this.nextErrorWaitInterval = this.lowerBound;\\r\\n        this.process(true).catch(function () {\\r\\n            /* we don't care about the result */\\r\\n        });\\r\\n    };\\r\\n    Refresher.prototype.stop = function () {\\r\\n        if (this.pending) {\\r\\n            this.pending.reject('cancelled');\\r\\n            this.pending = null;\\r\\n        }\\r\\n    };\\r\\n    Refresher.prototype.isRunning = function () {\\r\\n        return !!this.pending;\\r\\n    };\\r\\n    Refresher.prototype.process = function (hasSucceeded) {\\r\\n        return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n            var error_1;\\r\\n            return tslib.__generator(this, function (_a) {\\r\\n                switch (_a.label) {\\r\\n                    case 0:\\r\\n                        this.stop();\\r\\n                        _a.label = 1;\\r\\n                    case 1:\\r\\n                        _a.trys.push([1, 6, , 7]);\\r\\n                        this.pending = new util.Deferred();\\r\\n                        return [4 /*yield*/, sleep(this.getNextRun(hasSucceeded))];\\r\\n                    case 2:\\r\\n                        _a.sent();\\r\\n                        // Why do we resolve a promise, then immediate wait for it?\\r\\n                        // We do it to make the promise chain cancellable.\\r\\n                        // We can call stop() which rejects the promise before the following line execute, which makes\\r\\n                        // the code jump to the catch block.\\r\\n                        // TODO: unit test this\\r\\n                        this.pending.resolve();\\r\\n                        return [4 /*yield*/, this.pending.promise];\\r\\n                    case 3:\\r\\n                        _a.sent();\\r\\n                        this.pending = new util.Deferred();\\r\\n                        return [4 /*yield*/, this.operation()];\\r\\n                    case 4:\\r\\n                        _a.sent();\\r\\n                        this.pending.resolve();\\r\\n                        return [4 /*yield*/, this.pending.promise];\\r\\n                    case 5:\\r\\n                        _a.sent();\\r\\n                        this.process(true).catch(function () {\\r\\n                            /* we don't care about the result */\\r\\n                        });\\r\\n                        return [3 /*break*/, 7];\\r\\n                    case 6:\\r\\n                        error_1 = _a.sent();\\r\\n                        if (this.retryPolicy(error_1)) {\\r\\n                            this.process(false).catch(function () {\\r\\n                                /* we don't care about the result */\\r\\n                            });\\r\\n                        }\\r\\n                        else {\\r\\n                            this.stop();\\r\\n                        }\\r\\n                        return [3 /*break*/, 7];\\r\\n                    case 7: return [2 /*return*/];\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n    };\\r\\n    Refresher.prototype.getNextRun = function (hasSucceeded) {\\r\\n        if (hasSucceeded) {\\r\\n            // If last operation succeeded, reset next error wait interval and return\\r\\n            // the default wait duration.\\r\\n            this.nextErrorWaitInterval = this.lowerBound;\\r\\n            // Return typical wait duration interval after a successful operation.\\r\\n            return this.getWaitDuration();\\r\\n        }\\r\\n        else {\\r\\n            // Get next error wait interval.\\r\\n            var currentErrorWaitInterval = this.nextErrorWaitInterval;\\r\\n            // Double interval for next consecutive error.\\r\\n            this.nextErrorWaitInterval *= 2;\\r\\n            // Make sure next wait interval does not exceed the maximum upper bound.\\r\\n            if (this.nextErrorWaitInterval > this.upperBound) {\\r\\n                this.nextErrorWaitInterval = this.upperBound;\\r\\n            }\\r\\n            return currentErrorWaitInterval;\\r\\n        }\\r\\n    };\\r\\n    return Refresher;\\r\\n}());\\r\\nfunction sleep(ms) {\\r\\n    return new Promise(function (resolve) {\\r\\n        setTimeout(resolve, ms);\\r\\n    });\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nfunction exchangeToken(_a, platformLoggerProvider) {\\r\\n    var url = _a.url, body = _a.body;\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;\\r\\n        return tslib.__generator(this, function (_b) {\\r\\n            switch (_b.label) {\\r\\n                case 0:\\r\\n                    headers = {\\r\\n                        'Content-Type': 'application/json'\\r\\n                    };\\r\\n                    platformLogger = platformLoggerProvider.getImmediate({\\r\\n                        optional: true\\r\\n                    });\\r\\n                    if (platformLogger) {\\r\\n                        headers['X-Firebase-Client'] = platformLogger.getPlatformInfoString();\\r\\n                    }\\r\\n                    options = {\\r\\n                        method: 'POST',\\r\\n                        body: JSON.stringify(body),\\r\\n                        headers: headers\\r\\n                    };\\r\\n                    _b.label = 1;\\r\\n                case 1:\\r\\n                    _b.trys.push([1, 3, , 4]);\\r\\n                    return [4 /*yield*/, fetch(url, options)];\\r\\n                case 2:\\r\\n                    response = _b.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 3:\\r\\n                    originalError_1 = _b.sent();\\r\\n                    throw ERROR_FACTORY.create(\\\"fetch-network-error\\\" /* FETCH_NETWORK_ERROR */, {\\r\\n                        originalErrorMessage: originalError_1.message\\r\\n                    });\\r\\n                case 4:\\r\\n                    if (response.status !== 200) {\\r\\n                        throw ERROR_FACTORY.create(\\\"fetch-status-error\\\" /* FETCH_STATUS_ERROR */, {\\r\\n                            httpStatus: response.status\\r\\n                        });\\r\\n                    }\\r\\n                    _b.label = 5;\\r\\n                case 5:\\r\\n                    _b.trys.push([5, 7, , 8]);\\r\\n                    return [4 /*yield*/, response.json()];\\r\\n                case 6:\\r\\n                    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\\r\\n                    responseBody = _b.sent();\\r\\n                    return [3 /*break*/, 8];\\r\\n                case 7:\\r\\n                    originalError_2 = _b.sent();\\r\\n                    throw ERROR_FACTORY.create(\\\"fetch-parse-error\\\" /* FETCH_PARSE_ERROR */, {\\r\\n                        originalErrorMessage: originalError_2.message\\r\\n                    });\\r\\n                case 8:\\r\\n                    match = responseBody.ttl.match(/^([\\\\d.]+)(s)$/);\\r\\n                    if (!match || !match[2] || isNaN(Number(match[1]))) {\\r\\n                        throw ERROR_FACTORY.create(\\\"fetch-parse-error\\\" /* FETCH_PARSE_ERROR */, {\\r\\n                            originalErrorMessage: \\\"ttl field (timeToLive) is not in standard Protobuf Duration \\\" +\\r\\n                                (\\\"format: \\\" + responseBody.ttl)\\r\\n                        });\\r\\n                    }\\r\\n                    timeToLiveAsNumber = Number(match[1]) * 1000;\\r\\n                    now = Date.now();\\r\\n                    return [2 /*return*/, {\\r\\n                            token: responseBody.attestationToken,\\r\\n                            expireTimeMillis: now + timeToLiveAsNumber,\\r\\n                            issuedAtTimeMillis: now\\r\\n                        }];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\nfunction getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {\\r\\n    var _a = app.options, projectId = _a.projectId, appId = _a.appId, apiKey = _a.apiKey;\\r\\n    return {\\r\\n        url: BASE_ENDPOINT + \\\"/projects/\\\" + projectId + \\\"/apps/\\\" + appId + \\\":\\\" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + \\\"?key=\\\" + apiKey,\\r\\n        body: {\\r\\n            // eslint-disable-next-line\\r\\n            recaptcha_token: reCAPTCHAToken\\r\\n        }\\r\\n    };\\r\\n}\\r\\nfunction getExchangeDebugTokenRequest(app, debugToken) {\\r\\n    var _a = app.options, projectId = _a.projectId, appId = _a.appId, apiKey = _a.apiKey;\\r\\n    return {\\r\\n        url: BASE_ENDPOINT + \\\"/projects/\\\" + projectId + \\\"/apps/\\\" + appId + \\\":\\\" + EXCHANGE_DEBUG_TOKEN_METHOD + \\\"?key=\\\" + apiKey,\\r\\n        body: {\\r\\n            // eslint-disable-next-line\\r\\n            debug_token: debugToken\\r\\n        }\\r\\n    };\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar DB_NAME = 'firebase-app-check-database';\\r\\nvar DB_VERSION = 1;\\r\\nvar STORE_NAME = 'firebase-app-check-store';\\r\\nvar DEBUG_TOKEN_KEY = 'debug-token';\\r\\nvar dbPromise = null;\\r\\nfunction getDBPromise() {\\r\\n    if (dbPromise) {\\r\\n        return dbPromise;\\r\\n    }\\r\\n    dbPromise = new Promise(function (resolve, reject) {\\r\\n        try {\\r\\n            var request = indexedDB.open(DB_NAME, DB_VERSION);\\r\\n            request.onsuccess = function (event) {\\r\\n                resolve(event.target.result);\\r\\n            };\\r\\n            request.onerror = function (event) {\\r\\n                var _a;\\r\\n                reject(ERROR_FACTORY.create(\\\"storage-open\\\" /* STORAGE_OPEN */, {\\r\\n                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\\r\\n                }));\\r\\n            };\\r\\n            request.onupgradeneeded = function (event) {\\r\\n                var db = event.target.result;\\r\\n                // We don't use 'break' in this switch statement, the fall-through\\r\\n                // behavior is what we want, because if there are multiple versions between\\r\\n                // the old version and the current version, we want ALL the migrations\\r\\n                // that correspond to those versions to run, not only the last one.\\r\\n                // eslint-disable-next-line default-case\\r\\n                switch (event.oldVersion) {\\r\\n                    case 0:\\r\\n                        db.createObjectStore(STORE_NAME, {\\r\\n                            keyPath: 'compositeKey'\\r\\n                        });\\r\\n                }\\r\\n            };\\r\\n        }\\r\\n        catch (e) {\\r\\n            reject(ERROR_FACTORY.create(\\\"storage-open\\\" /* STORAGE_OPEN */, {\\r\\n                originalErrorMessage: e.message\\r\\n            }));\\r\\n        }\\r\\n    });\\r\\n    return dbPromise;\\r\\n}\\r\\nfunction readTokenFromIndexedDB(app) {\\r\\n    return read(computeKey(app));\\r\\n}\\r\\nfunction writeTokenToIndexedDB(app, token) {\\r\\n    return write(computeKey(app), token);\\r\\n}\\r\\nfunction writeDebugTokenToIndexedDB(token) {\\r\\n    return write(DEBUG_TOKEN_KEY, token);\\r\\n}\\r\\nfunction readDebugTokenFromIndexedDB() {\\r\\n    return read(DEBUG_TOKEN_KEY);\\r\\n}\\r\\nfunction write(key, value) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var db, transaction, store, request;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0: return [4 /*yield*/, getDBPromise()];\\r\\n                case 1:\\r\\n                    db = _a.sent();\\r\\n                    transaction = db.transaction(STORE_NAME, 'readwrite');\\r\\n                    store = transaction.objectStore(STORE_NAME);\\r\\n                    request = store.put({\\r\\n                        compositeKey: key,\\r\\n                        value: value\\r\\n                    });\\r\\n                    return [2 /*return*/, new Promise(function (resolve, reject) {\\r\\n                            request.onsuccess = function (_event) {\\r\\n                                resolve();\\r\\n                            };\\r\\n                            transaction.onerror = function (event) {\\r\\n                                var _a;\\r\\n                                reject(ERROR_FACTORY.create(\\\"storage-set\\\" /* STORAGE_WRITE */, {\\r\\n                                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\\r\\n                                }));\\r\\n                            };\\r\\n                        })];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\nfunction read(key) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var db, transaction, store, request;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0: return [4 /*yield*/, getDBPromise()];\\r\\n                case 1:\\r\\n                    db = _a.sent();\\r\\n                    transaction = db.transaction(STORE_NAME, 'readonly');\\r\\n                    store = transaction.objectStore(STORE_NAME);\\r\\n                    request = store.get(key);\\r\\n                    return [2 /*return*/, new Promise(function (resolve, reject) {\\r\\n                            request.onsuccess = function (event) {\\r\\n                                var result = event.target.result;\\r\\n                                if (result) {\\r\\n                                    resolve(result.value);\\r\\n                                }\\r\\n                                else {\\r\\n                                    resolve(undefined);\\r\\n                                }\\r\\n                            };\\r\\n                            transaction.onerror = function (event) {\\r\\n                                var _a;\\r\\n                                reject(ERROR_FACTORY.create(\\\"storage-get\\\" /* STORAGE_GET */, {\\r\\n                                    originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\\r\\n                                }));\\r\\n                            };\\r\\n                        })];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\nfunction computeKey(app) {\\r\\n    return app.options.appId + \\\"-\\\" + app.name;\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar logger = new logger$1.Logger('@firebase/app-check');\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\\r\\n */\\r\\nfunction readTokenFromStorage(app) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var token, e_1;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    if (!util.isIndexedDBAvailable()) return [3 /*break*/, 5];\\r\\n                    token = undefined;\\r\\n                    _a.label = 1;\\r\\n                case 1:\\r\\n                    _a.trys.push([1, 3, , 4]);\\r\\n                    return [4 /*yield*/, readTokenFromIndexedDB(app)];\\r\\n                case 2:\\r\\n                    token = _a.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 3:\\r\\n                    e_1 = _a.sent();\\r\\n                    // swallow the error and return undefined\\r\\n                    logger.warn(\\\"Failed to read token from indexeddb. Error: \\\" + e_1);\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 4: return [2 /*return*/, token];\\r\\n                case 5: return [2 /*return*/, undefined];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\\r\\n */\\r\\nfunction writeTokenToStorage(app, token) {\\r\\n    if (util.isIndexedDBAvailable()) {\\r\\n        return writeTokenToIndexedDB(app, token).catch(function (e) {\\r\\n            // swallow the error and resolve the promise\\r\\n            logger.warn(\\\"Failed to write token to indexeddb. Error: \\\" + e);\\r\\n        });\\r\\n    }\\r\\n    return Promise.resolve();\\r\\n}\\r\\nfunction readOrCreateDebugTokenFromStorage() {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var existingDebugToken, newToken;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    existingDebugToken = undefined;\\r\\n                    _a.label = 1;\\r\\n                case 1:\\r\\n                    _a.trys.push([1, 3, , 4]);\\r\\n                    return [4 /*yield*/, readDebugTokenFromIndexedDB()];\\r\\n                case 2:\\r\\n                    existingDebugToken = _a.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 3:\\r\\n                    _a.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 4:\\r\\n                    if (!existingDebugToken) {\\r\\n                        newToken = uuidv4();\\r\\n                        // We don't need to block on writing to indexeddb\\r\\n                        // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\\r\\n                        // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\\r\\n                        // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\\r\\n                        // You should switch to a different browser that supports indexeddb\\r\\n                        writeDebugTokenToIndexedDB(newToken).catch(function (e) {\\r\\n                            return logger.warn(\\\"Failed to persist debug token to indexeddb. Error: \\\" + e);\\r\\n                        });\\r\\n                        // Not using logger because I don't think we ever want this accidentally hidden?\\r\\n                        console.log(\\\"AppCheck debug token: \\\" + newToken + \\\". You will need to whitelist it in the Firebase console for it to work\\\");\\r\\n                        return [2 /*return*/, newToken];\\r\\n                    }\\r\\n                    else {\\r\\n                        return [2 /*return*/, existingDebugToken];\\r\\n                    }\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nfunction isDebugMode() {\\r\\n    var debugState = getDebugState();\\r\\n    return debugState.enabled;\\r\\n}\\r\\nfunction getDebugToken() {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var state;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            state = getDebugState();\\r\\n            if (state.enabled && state.token) {\\r\\n                return [2 /*return*/, state.token.promise];\\r\\n            }\\r\\n            else {\\r\\n                // should not happen!\\r\\n                throw Error(\\\"\\\\n            Can't get debug token in production mode.\\\\n        \\\");\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\nfunction initializeDebugMode() {\\r\\n    var globals = util.getGlobal();\\r\\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\\r\\n        globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\\r\\n        return;\\r\\n    }\\r\\n    var debugState = getDebugState();\\r\\n    debugState.enabled = true;\\r\\n    var deferredToken = new util.Deferred();\\r\\n    debugState.token = deferredToken;\\r\\n    if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\\r\\n        deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\\r\\n    }\\r\\n    else {\\r\\n        deferredToken.resolve(readOrCreateDebugTokenFromStorage());\\r\\n    }\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n// Initial hardcoded value agreed upon across platforms for initial launch.\\r\\n// Format left open for possible dynamic error values and other fields in the future.\\r\\nvar defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\\r\\n/**\\r\\n * Stringify and base64 encode token error data.\\r\\n *\\r\\n * @param tokenError Error data, currently hardcoded.\\r\\n */\\r\\nfunction formatDummyToken(tokenErrorData) {\\r\\n    return util.base64.encodeString(JSON.stringify(tokenErrorData), \\r\\n    /* webSafe= */ false);\\r\\n}\\r\\n/**\\r\\n * This function will always resolve.\\r\\n * The result will contain an error field if there is any error.\\r\\n * In case there is an error, the token field in the result will be populated with a dummy value\\r\\n */\\r\\nfunction getToken$1(app, platformLoggerProvider, forceRefresh) {\\r\\n    if (forceRefresh === void 0) { forceRefresh = false; }\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var state, token, error, cachedToken, tokenFromDebugExchange, _a, _b, _c, customToken, issuedAtTimeSeconds, issuedAtTimeMillis, attestedClaimsToken, e_1, interopTokenResult;\\r\\n        return tslib.__generator(this, function (_d) {\\r\\n            switch (_d.label) {\\r\\n                case 0:\\r\\n                    ensureActivated(app);\\r\\n                    state = getState(app);\\r\\n                    token = state.token;\\r\\n                    error = undefined;\\r\\n                    if (!!token) return [3 /*break*/, 2];\\r\\n                    return [4 /*yield*/, readTokenFromStorage(app)];\\r\\n                case 1:\\r\\n                    cachedToken = _d.sent();\\r\\n                    if (cachedToken && isValid(cachedToken)) {\\r\\n                        token = cachedToken;\\r\\n                        setState(app, tslib.__assign(tslib.__assign({}, state), { token: token }));\\r\\n                        // notify all listeners with the cached token\\r\\n                        notifyTokenListeners(app, { token: token.token });\\r\\n                    }\\r\\n                    _d.label = 2;\\r\\n                case 2:\\r\\n                    // Return the cached token (from either memory or indexedDB) if it's valid\\r\\n                    if (!forceRefresh && token && isValid(token)) {\\r\\n                        return [2 /*return*/, {\\r\\n                                token: token.token\\r\\n                            }];\\r\\n                    }\\r\\n                    if (!isDebugMode()) return [3 /*break*/, 6];\\r\\n                    _a = exchangeToken;\\r\\n                    _b = getExchangeDebugTokenRequest;\\r\\n                    _c = [app];\\r\\n                    return [4 /*yield*/, getDebugToken()];\\r\\n                case 3: return [4 /*yield*/, _a.apply(void 0, [_b.apply(void 0, _c.concat([_d.sent()])), platformLoggerProvider])];\\r\\n                case 4:\\r\\n                    tokenFromDebugExchange = _d.sent();\\r\\n                    // Write debug token to indexedDB.\\r\\n                    return [4 /*yield*/, writeTokenToStorage(app, tokenFromDebugExchange)];\\r\\n                case 5:\\r\\n                    // Write debug token to indexedDB.\\r\\n                    _d.sent();\\r\\n                    // Write debug token to state.\\r\\n                    setState(app, tslib.__assign(tslib.__assign({}, state), { token: tokenFromDebugExchange }));\\r\\n                    return [2 /*return*/, { token: tokenFromDebugExchange.token }];\\r\\n                case 6:\\r\\n                    _d.trys.push([6, 12, , 13]);\\r\\n                    if (!state.customProvider) return [3 /*break*/, 8];\\r\\n                    return [4 /*yield*/, state.customProvider.getToken()];\\r\\n                case 7:\\r\\n                    customToken = _d.sent();\\r\\n                    issuedAtTimeSeconds = util.issuedAtTime(customToken.token);\\r\\n                    issuedAtTimeMillis = issuedAtTimeSeconds !== null &&\\r\\n                        issuedAtTimeSeconds < Date.now() &&\\r\\n                        issuedAtTimeSeconds > 0\\r\\n                        ? issuedAtTimeSeconds * 1000\\r\\n                        : Date.now();\\r\\n                    token = tslib.__assign(tslib.__assign({}, customToken), { issuedAtTimeMillis: issuedAtTimeMillis });\\r\\n                    return [3 /*break*/, 11];\\r\\n                case 8: return [4 /*yield*/, getToken$2(app).catch(function (_e) {\\r\\n                        // reCaptcha.execute() throws null which is not very descriptive.\\r\\n                        throw ERROR_FACTORY.create(\\\"recaptcha-error\\\" /* RECAPTCHA_ERROR */);\\r\\n                    })];\\r\\n                case 9:\\r\\n                    attestedClaimsToken = _d.sent();\\r\\n                    return [4 /*yield*/, exchangeToken(getExchangeRecaptchaTokenRequest(app, attestedClaimsToken), platformLoggerProvider)];\\r\\n                case 10:\\r\\n                    token = _d.sent();\\r\\n                    _d.label = 11;\\r\\n                case 11: return [3 /*break*/, 13];\\r\\n                case 12:\\r\\n                    e_1 = _d.sent();\\r\\n                    // `getToken()` should never throw, but logging error text to console will aid debugging.\\r\\n                    logger.error(e_1);\\r\\n                    error = e_1;\\r\\n                    return [3 /*break*/, 13];\\r\\n                case 13:\\r\\n                    if (!!token) return [3 /*break*/, 14];\\r\\n                    // if token is undefined, there must be an error.\\r\\n                    // we return a dummy token along with the error\\r\\n                    interopTokenResult = makeDummyTokenResult(error);\\r\\n                    return [3 /*break*/, 16];\\r\\n                case 14:\\r\\n                    interopTokenResult = {\\r\\n                        token: token.token\\r\\n                    };\\r\\n                    // write the new token to the memory state as well as the persistent storage.\\r\\n                    // Only do it if we got a valid new token\\r\\n                    setState(app, tslib.__assign(tslib.__assign({}, state), { token: token }));\\r\\n                    return [4 /*yield*/, writeTokenToStorage(app, token)];\\r\\n                case 15:\\r\\n                    _d.sent();\\r\\n                    _d.label = 16;\\r\\n                case 16:\\r\\n                    notifyTokenListeners(app, interopTokenResult);\\r\\n                    return [2 /*return*/, interopTokenResult];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\nfunction addTokenListener(app, platformLoggerProvider, type, listener, onError) {\\r\\n    var state = getState(app);\\r\\n    var tokenListener = {\\r\\n        next: listener,\\r\\n        error: onError,\\r\\n        type: type\\r\\n    };\\r\\n    var newState = tslib.__assign(tslib.__assign({}, state), { tokenObservers: tslib.__spreadArray(tslib.__spreadArray([], state.tokenObservers), [tokenListener]) });\\r\\n    /**\\r\\n     * Invoke the listener with the valid token, then start the token refresher\\r\\n     */\\r\\n    if (!newState.tokenRefresher) {\\r\\n        var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);\\r\\n        newState.tokenRefresher = tokenRefresher;\\r\\n    }\\r\\n    // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\\r\\n    // is not true.\\r\\n    if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {\\r\\n        newState.tokenRefresher.start();\\r\\n    }\\r\\n    // invoke the listener async immediately if there is a valid token\\r\\n    if (state.token && isValid(state.token)) {\\r\\n        var validToken_1 = state.token;\\r\\n        Promise.resolve()\\r\\n            .then(function () { return listener({ token: validToken_1.token }); })\\r\\n            .catch(function () {\\r\\n            /** Ignore errors in listeners. */\\r\\n        });\\r\\n    }\\r\\n    setState(app, newState);\\r\\n}\\r\\nfunction removeTokenListener(app, listener) {\\r\\n    var state = getState(app);\\r\\n    var newObservers = state.tokenObservers.filter(function (tokenObserver) { return tokenObserver.next !== listener; });\\r\\n    if (newObservers.length === 0 &&\\r\\n        state.tokenRefresher &&\\r\\n        state.tokenRefresher.isRunning()) {\\r\\n        state.tokenRefresher.stop();\\r\\n    }\\r\\n    setState(app, tslib.__assign(tslib.__assign({}, state), { tokenObservers: newObservers }));\\r\\n}\\r\\nfunction createTokenRefresher(app, platformLoggerProvider) {\\r\\n    var _this = this;\\r\\n    return new Refresher(\\r\\n    // Keep in mind when this fails for any reason other than the ones\\r\\n    // for which we should retry, it will effectively stop the proactive refresh.\\r\\n    function () { return tslib.__awaiter(_this, void 0, void 0, function () {\\r\\n        var state, result;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    state = getState(app);\\r\\n                    if (!!state.token) return [3 /*break*/, 2];\\r\\n                    return [4 /*yield*/, getToken$1(app, platformLoggerProvider)];\\r\\n                case 1:\\r\\n                    result = _a.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 2: return [4 /*yield*/, getToken$1(app, platformLoggerProvider, true)];\\r\\n                case 3:\\r\\n                    result = _a.sent();\\r\\n                    _a.label = 4;\\r\\n                case 4:\\r\\n                    // getToken() always resolves. In case the result has an error field defined, it means the operation failed, and we should retry.\\r\\n                    if (result.error) {\\r\\n                        throw result.error;\\r\\n                    }\\r\\n                    return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    }); }, function () {\\r\\n        // TODO: when should we retry?\\r\\n        return true;\\r\\n    }, function () {\\r\\n        var state = getState(app);\\r\\n        if (state.token) {\\r\\n            // issuedAtTime + (50% * total TTL) + 5 minutes\\r\\n            var nextRefreshTimeMillis = state.token.issuedAtTimeMillis +\\r\\n                (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\\r\\n                    0.5 +\\r\\n                5 * 60 * 1000;\\r\\n            // Do not allow refresh time to be past (expireTime - 5 minutes)\\r\\n            var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\\r\\n            nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\\r\\n            return Math.max(0, nextRefreshTimeMillis - Date.now());\\r\\n        }\\r\\n        else {\\r\\n            return 0;\\r\\n        }\\r\\n    }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\\r\\n}\\r\\nfunction notifyTokenListeners(app, token) {\\r\\n    var observers = getState(app).tokenObservers;\\r\\n    for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\\r\\n        var observer = observers_1[_i];\\r\\n        try {\\r\\n            if (observer.type === \\\"EXTERNAL\\\" /* EXTERNAL */ && token.error != null) {\\r\\n                // If this listener was added by a 3P call, send any token error to\\r\\n                // the supplied error handler. A 3P observer always has an error\\r\\n                // handler.\\r\\n                observer.error(token.error);\\r\\n            }\\r\\n            else {\\r\\n                // If the token has no error field, always return the token.\\r\\n                // If this is a 2P listener, return the token, whether or not it\\r\\n                // has an error field.\\r\\n                observer.next(token);\\r\\n            }\\r\\n        }\\r\\n        catch (ignored) {\\r\\n            // Errors in the listener function itself are always ignored.\\r\\n        }\\r\\n    }\\r\\n}\\r\\nfunction isValid(token) {\\r\\n    return token.expireTimeMillis - Date.now() > 0;\\r\\n}\\r\\nfunction makeDummyTokenResult(error) {\\r\\n    return {\\r\\n        token: formatDummyToken(defaultTokenErrorData),\\r\\n        error: error\\r\\n    };\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n *\\r\\n * @param app\\r\\n * @param siteKeyOrProvider - optional custom attestation provider\\r\\n * or reCAPTCHA siteKey\\r\\n * @param isTokenAutoRefreshEnabled - if true, enables auto refresh\\r\\n * of appCheck token.\\r\\n */\\r\\nfunction activate(app, siteKeyOrProvider, isTokenAutoRefreshEnabled) {\\r\\n    var state = getState(app);\\r\\n    if (state.activated) {\\r\\n        throw ERROR_FACTORY.create(\\\"already-activated\\\" /* ALREADY_ACTIVATED */, {\\r\\n            appName: app.name\\r\\n        });\\r\\n    }\\r\\n    var newState = tslib.__assign(tslib.__assign({}, state), { activated: true });\\r\\n    if (typeof siteKeyOrProvider === 'string') {\\r\\n        newState.siteKey = siteKeyOrProvider;\\r\\n    }\\r\\n    else {\\r\\n        newState.customProvider = siteKeyOrProvider;\\r\\n    }\\r\\n    // Use value of global `automaticDataCollectionEnabled` (which\\r\\n    // itself defaults to false if not specified in config) if\\r\\n    // `isTokenAutoRefreshEnabled` param was not provided by user.\\r\\n    newState.isTokenAutoRefreshEnabled =\\r\\n        isTokenAutoRefreshEnabled === undefined\\r\\n            ? app.automaticDataCollectionEnabled\\r\\n            : isTokenAutoRefreshEnabled;\\r\\n    setState(app, newState);\\r\\n    // initialize reCAPTCHA if siteKey is provided\\r\\n    if (newState.siteKey) {\\r\\n        initialize(app, newState.siteKey).catch(function () {\\r\\n            /* we don't care about the initialization result in activate() */\\r\\n        });\\r\\n    }\\r\\n}\\r\\nfunction setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {\\r\\n    var state = getState(app);\\r\\n    // This will exist if any product libraries have called\\r\\n    // `addTokenListener()`\\r\\n    if (state.tokenRefresher) {\\r\\n        if (isTokenAutoRefreshEnabled === true) {\\r\\n            state.tokenRefresher.start();\\r\\n        }\\r\\n        else {\\r\\n            state.tokenRefresher.stop();\\r\\n        }\\r\\n    }\\r\\n    setState(app, tslib.__assign(tslib.__assign({}, state), { isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled }));\\r\\n}\\r\\n/**\\r\\n * Differs from internal getToken in that it throws the error.\\r\\n */\\r\\nfunction getToken(app, platformLoggerProvider, forceRefresh) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var result;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0: return [4 /*yield*/, getToken$1(app, platformLoggerProvider, forceRefresh)];\\r\\n                case 1:\\r\\n                    result = _a.sent();\\r\\n                    if (result.error) {\\r\\n                        throw result.error;\\r\\n                    }\\r\\n                    return [2 /*return*/, { token: result.token }];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\nfunction onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError, \\r\\n/**\\r\\n * NOTE: Although an `onCompletion` callback can be provided, it will\\r\\n * never be called because the token stream is never-ending.\\r\\n * It is added only for API consistency with the observer pattern, which\\r\\n * we follow in JS APIs.\\r\\n */\\r\\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\\r\\nonCompletion) {\\r\\n    var nextFn = function () { };\\r\\n    var errorFn = function () { };\\r\\n    if (onNextOrObserver.next != null) {\\r\\n        nextFn = onNextOrObserver.next.bind(onNextOrObserver);\\r\\n    }\\r\\n    else {\\r\\n        nextFn = onNextOrObserver;\\r\\n    }\\r\\n    if (onNextOrObserver.error != null) {\\r\\n        errorFn = onNextOrObserver.error.bind(onNextOrObserver);\\r\\n    }\\r\\n    else if (onError) {\\r\\n        errorFn = onError;\\r\\n    }\\r\\n    addTokenListener(app, platformLoggerProvider, \\\"EXTERNAL\\\" /* EXTERNAL */, nextFn, errorFn);\\r\\n    return function () { return removeTokenListener(app, nextFn); };\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nfunction factory(app, platformLoggerProvider) {\\r\\n    return {\\r\\n        app: app,\\r\\n        activate: function (siteKeyOrProvider, isTokenAutoRefreshEnabled) { return activate(app, siteKeyOrProvider, isTokenAutoRefreshEnabled); },\\r\\n        setTokenAutoRefreshEnabled: function (isTokenAutoRefreshEnabled) {\\r\\n            return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);\\r\\n        },\\r\\n        getToken: function (forceRefresh) {\\r\\n            return getToken(app, platformLoggerProvider, forceRefresh);\\r\\n        },\\r\\n        onTokenChanged: function (onNextOrObserver, onError, onCompletion) {\\r\\n            return onTokenChanged(app, platformLoggerProvider, \\r\\n            /**\\r\\n             * This can still be an observer. Need to do this casting because\\r\\n             * according to Typescript: \\\"Implementation signatures of overloads\\r\\n             * are not externally visible\\\"\\r\\n             */\\r\\n            onNextOrObserver, onError);\\r\\n        },\\r\\n        INTERNAL: {\\r\\n            delete: function () {\\r\\n                var tokenObservers = getState(app).tokenObservers;\\r\\n                for (var _i = 0, tokenObservers_1 = tokenObservers; _i < tokenObservers_1.length; _i++) {\\r\\n                    var tokenObserver = tokenObservers_1[_i];\\r\\n                    removeTokenListener(app, tokenObserver.next);\\r\\n                }\\r\\n                return Promise.resolve();\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n}\\r\\nfunction internalFactory(app, platformLoggerProvider) {\\r\\n    return {\\r\\n        getToken: function (forceRefresh) {\\r\\n            return getToken$1(app, platformLoggerProvider, forceRefresh);\\r\\n        },\\r\\n        addTokenListener: function (listener) {\\r\\n            return addTokenListener(app, platformLoggerProvider, \\\"INTERNAL\\\" /* INTERNAL */, listener);\\r\\n        },\\r\\n        removeTokenListener: function (listener) { return removeTokenListener(app, listener); }\\r\\n    };\\r\\n}\\n\\nvar name = \\\"@firebase/app-check\\\";\\nvar version = \\\"0.2.1\\\";\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2017 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar APP_CHECK_NAME = 'appCheck';\\r\\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\\r\\nfunction registerAppCheck(firebase) {\\r\\n    // The public interface\\r\\n    firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME, function (container) {\\r\\n        // getImmediate for FirebaseApp will always succeed\\r\\n        var app = container.getProvider('app').getImmediate();\\r\\n        var platformLoggerProvider = container.getProvider('platform-logger');\\r\\n        return factory(app, platformLoggerProvider);\\r\\n    }, \\\"PUBLIC\\\" /* PUBLIC */)\\r\\n        /**\\r\\n         * AppCheck can only be initialized by explicitly calling firebase.appCheck()\\r\\n         * We don't want firebase products that consume AppCheck to gate on AppCheck\\r\\n         * if the user doesn't intend them to, just because the AppCheck component\\r\\n         * is registered.\\r\\n         */\\r\\n        .setInstantiationMode(\\\"EXPLICIT\\\" /* EXPLICIT */)\\r\\n        /**\\r\\n         * Because all firebase products that depend on app-check depend on app-check-internal directly,\\r\\n         * we need to initialize app-check-internal after app-check is initialized to make it\\r\\n         * available to other firebase products.\\r\\n         */\\r\\n        .setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\\r\\n        var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);\\r\\n        appCheckInternalProvider.initialize();\\r\\n    }));\\r\\n    // The internal interface used by other Firebase products\\r\\n    firebase.INTERNAL.registerComponent(new component.Component(APP_CHECK_NAME_INTERNAL, function (container) {\\r\\n        // getImmediate for FirebaseApp will always succeed\\r\\n        var app = container.getProvider('app').getImmediate();\\r\\n        var platformLoggerProvider = container.getProvider('platform-logger');\\r\\n        return internalFactory(app, platformLoggerProvider);\\r\\n    }, \\\"PUBLIC\\\" /* PUBLIC */).setInstantiationMode(\\\"EXPLICIT\\\" /* EXPLICIT */));\\r\\n    firebase.registerVersion(name, version);\\r\\n}\\r\\nregisterAppCheck(firebase__default['default']);\\r\\ninitializeDebugMode();\\n//# sourceMappingURL=index.cjs.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"getState\",\"app\",\"APP_CHECK_STATES\",\"get\",\"DEFAULT_STATE\",\"setState\",\"state\",\"set\",\"ensureActivated\",\"activated\",\"ERROR_FACTORY\",\"create\",\"appName\",\"name\",\"uuidv4\",\"replace\",\"c\",\"r\",\"Math\",\"random\",\"toString\",\"v\",\"initialize\",\"siteKey\",\"initialized\",\"util\",\"Deferred\",\"tslib\",\"__assign\",\"reCAPTCHAState\",\"divId\",\"invisibleDiv\",\"document\",\"createElement\",\"id\",\"style\",\"display\",\"body\",\"appendChild\",\"grecaptcha\",\"self\",\"ready\",\"renderInvisibleWidget\",\"resolve\",\"loadReCAPTCHAScript\",\"Error\",\"promise\",\"getToken$2\",\"__awaiter\",\"recaptcha\",\"__generator\",\"_a\",\"label\",\"sent\",\"Promise\",\"_reject\",\"execute\",\"widgetId\",\"action\",\"container\",\"render\",\"sitekey\",\"size\",\"onload\",\"script\",\"src\",\"head\",\"sleep\",\"ms\",\"setTimeout\",\"exchangeToken\",\"platformLoggerProvider\",\"url\",\"headers\",\"platformLogger\",\"options\",\"response\",\"originalError_1\",\"responseBody\",\"originalError_2\",\"match\",\"timeToLiveAsNumber\",\"now\",\"_b\",\"getImmediate\",\"optional\",\"getPlatformInfoString\",\"method\",\"JSON\",\"stringify\",\"trys\",\"push\",\"fetch\",\"originalErrorMessage\",\"message\",\"status\",\"httpStatus\",\"json\",\"ttl\",\"isNaN\",\"Number\",\"Date\",\"token\",\"attestationToken\",\"expireTimeMillis\",\"issuedAtTimeMillis\",\"getExchangeRecaptchaTokenRequest\",\"reCAPTCHAToken\",\"projectId\",\"appId\",\"apiKey\",\"recaptcha_token\",\"getExchangeDebugTokenRequest\",\"debugToken\",\"debug_token\",\"getDBPromise\",\"dbPromise\",\"reject\",\"request\",\"indexedDB\",\"open\",\"DB_NAME\",\"DB_VERSION\",\"onsuccess\",\"request.onsuccess\",\"event\",\"target\",\"result\",\"onerror\",\"request.onerror\",\"error\",\"onupgradeneeded\",\"request.onupgradeneeded\",\"db\",\"oldVersion\",\"createObjectStore\",\"STORE_NAME\",\"keyPath\",\"e\",\"write\",\"key\",\"value\",\"transaction\",\"store\",\"objectStore\",\"put\",\"compositeKey\",\"_event\",\"transaction.onerror\",\"read\",\"undefined\",\"readTokenFromStorage\",\"e_1\",\"isIndexedDBAvailable\",\"logger\",\"warn\",\"writeTokenToStorage\",\"catch\",\"readOrCreateDebugTokenFromStorage\",\"existingDebugToken\",\"newToken\",\"DEBUG_TOKEN_KEY\",\"console\",\"log\",\"getDebugToken\",\"DEBUG_STATE\",\"enabled\",\"getToken$1\",\"forceRefresh\",\"cachedToken\",\"tokenFromDebugExchange\",\"_c\",\"customToken\",\"issuedAtTimeSeconds\",\"attestedClaimsToken\",\"interopTokenResult\",\"_d\",\"notifyTokenListeners\",\"apply\",\"concat\",\"customProvider\",\"getToken\",\"issuedAtTime\",\"_e\",\"makeDummyTokenResult\",\"addTokenListener\",\"type\",\"listener\",\"onError\",\"tokenListener\",\"next\",\"newState\",\"tokenObservers\",\"__spreadArray\",\"tokenRefresher\",\"createTokenRefresher\",\"isRunning\",\"isTokenAutoRefreshEnabled\",\"start\",\"validToken_1\",\"then\",\"removeTokenListener\",\"newObservers\",\"filter\",\"tokenObserver\",\"length\",\"stop\",\"_this\",\"Refresher\",\"nextRefreshTimeMillis\",\"min\",\"max\",\"TOKEN_REFRESH_TIME\",\"RETRIAL_MIN_WAIT\",\"RETRIAL_MAX_WAIT\",\"_i\",\"observers_1\",\"observer\",\"ignored\",\"base64\",\"encodeString\",\"defaultTokenErrorData\",\"activate\",\"siteKeyOrProvider\",\"automaticDataCollectionEnabled\",\"onTokenChanged\",\"onNextOrObserver\",\"onCompletion\",\"nextFn\",\"errorFn\",\"bind\",\"factory\",\"setTokenAutoRefreshEnabled\",\"INTERNAL\",\"delete\",\"tokenObservers_1\",\"internalFactory\",\"firebase\",\"component\",\"logger$1\",\"firebase__default\",\"ERRORS\",\"ErrorFactory\",\"Map\",\"OFFSET_DURATION\",\"operation\",\"retryPolicy\",\"getWaitDuration\",\"lowerBound\",\"upperBound\",\"pending\",\"nextErrorWaitInterval\",\"prototype\",\"Refresher.prototype.start\",\"process\",\"Refresher.prototype.stop\",\"Refresher.prototype.isRunning\",\"Refresher.prototype.process\",\"hasSucceeded\",\"error_1\",\"getNextRun\",\"Refresher.prototype.getNextRun\",\"currentErrorWaitInterval\",\"Logger\",\"registerAppCheck\",\"registerComponent\",\"setInstantiationMode\",\"Component\",\"APP_CHECK_NAME\",\"getProvider\",\"setInstanceCreatedCallback\",\"_instanceIdentifier\",\"_instance\",\"appCheckInternalProvider\",\"APP_CHECK_NAME_INTERNAL\",\"registerVersion\",\"version\",\"initializeDebugMode\",\"globals\",\"getGlobal\",\"FIREBASE_APPCHECK_DEBUG_TOKEN\",\"debugState\",\"deferredToken\"]\n}\n"]