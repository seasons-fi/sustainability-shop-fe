["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/performance/node_modules/@firebase/component/dist/index.cjs.js"],"~:js","shadow$provide.module$node_modules$$firebase$performance$node_modules$$firebase$component$dist$index_cjs=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});var tslib=require(\"module$node_modules$$firebase$performance$node_modules$tslib$tslib\"),util=require(\"module$node_modules$$firebase$performance$node_modules$$firebase$util$dist$index_cjs\");global=function(){function Component(name,instanceFactory,type){this.name=name;this.instanceFactory=instanceFactory;\nthis.type=type;this.multipleInstances=!1;this.serviceProps={};this.instantiationMode=\"LAZY\"}Component.prototype.setInstantiationMode=function(mode){this.instantiationMode=mode;return this};Component.prototype.setMultipleInstances=function(multipleInstances){this.multipleInstances=multipleInstances;return this};Component.prototype.setServiceProps=function(props){this.serviceProps=props;return this};return Component}();var Provider$jscomp$0=function(){function Provider(name,container){this.name=name;\nthis.container=container;this.component=null;this.instances=new Map;this.instancesDeferred=new Map}Provider.prototype.get=function(identifier){void 0===identifier&&(identifier=\"[DEFAULT]\");identifier=this.normalizeInstanceIdentifier(identifier);if(!this.instancesDeferred.has(identifier)){var deferred=new util.Deferred;this.instancesDeferred.set(identifier,deferred);try{var instance=this.getOrInitializeService(identifier);instance&&deferred.resolve(instance)}catch(e){}}return this.instancesDeferred.get(identifier).promise};\nProvider.prototype.getImmediate=function(options){var _a=tslib.__assign({identifier:\"[DEFAULT]\",optional:!1},options);options=_a.optional;_a=this.normalizeInstanceIdentifier(_a.identifier);try{var instance=this.getOrInitializeService(_a);if(!instance){if(options)return null;throw Error(\"Service \"+this.name+\" is not available\");}return instance}catch(e){if(options)return null;throw e;}};Provider.prototype.getComponent=function(){return this.component};Provider.prototype.setComponent=function(component){var _a;\nif(component.name!==this.name)throw Error(\"Mismatching Component \"+component.name+\" for Provider \"+this.name+\".\");if(this.component)throw Error(\"Component for \"+this.name+\" has already been provided\");this.component=component;if(\"EAGER\"===component.instantiationMode)try{this.getOrInitializeService(\"[DEFAULT]\")}catch(e){}try{for(var _b=tslib.__values(this.instancesDeferred.entries()),_c=_b.next();!_c.done;_c=_b.next()){var _d=tslib.__read(_c.value,2),instanceDeferred=_d[1],normalizedIdentifier=this.normalizeInstanceIdentifier(_d[0]);\ntry{var instance=this.getOrInitializeService(normalizedIdentifier);instanceDeferred.resolve(instance)}catch(e){}}}catch(e_1_1){var e_1={error:e_1_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&_a.call(_b)}finally{if(e_1)throw e_1.error;}}};Provider.prototype.clearInstance=function(identifier){void 0===identifier&&(identifier=\"[DEFAULT]\");this.instancesDeferred.delete(identifier);this.instances.delete(identifier)};Provider.prototype.delete=function(){return tslib.__awaiter(this,void 0,void 0,function(){var services;\nreturn tslib.__generator(this,function(_a){switch(_a.label){case 0:return services=Array.from(this.instances.values()),[4,Promise.all(tslib.__spread(services.filter(function(service){return\"INTERNAL\"in service}).map(function(service){return service.INTERNAL.delete()}),services.filter(function(service){return\"_delete\"in service}).map(function(service){return service._delete()})))];case 1:return _a.sent(),[2]}})})};Provider.prototype.isComponentSet=function(){return null!=this.component};Provider.prototype.getOrInitializeService=\nfunction(identifier){var instance=this.instances.get(identifier);!instance&&this.component&&(instance=this.component.instanceFactory(this.container,\"[DEFAULT]\"===identifier?void 0:identifier),this.instances.set(identifier,instance));return instance||null};Provider.prototype.normalizeInstanceIdentifier=function(identifier){return this.component?this.component.multipleInstances?identifier:\"[DEFAULT]\":identifier};return Provider}();require=function(){function ComponentContainer(name){this.name=name;\nthis.providers=new Map}ComponentContainer.prototype.addComponent=function(component){var provider=this.getProvider(component.name);if(provider.isComponentSet())throw Error(\"Component \"+component.name+\" has already been registered with \"+this.name);provider.setComponent(component)};ComponentContainer.prototype.addOrOverwriteComponent=function(component){this.getProvider(component.name).isComponentSet()&&this.providers.delete(component.name);this.addComponent(component)};ComponentContainer.prototype.getProvider=\nfunction(name){if(this.providers.has(name))return this.providers.get(name);var provider=new Provider$jscomp$0(name,this);this.providers.set(name,provider);return provider};ComponentContainer.prototype.getProviders=function(){return Array.from(this.providers.values())};return ComponentContainer}();exports.Component=global;exports.ComponentContainer=require;exports.Provider=Provider$jscomp$0}","~:source","shadow$provide[\"module$node_modules$$firebase$performance$node_modules$$firebase$component$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar Component = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    function Component(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n    }\r\n    Component.prototype.setInstantiationMode = function (mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    };\r\n    Component.prototype.setMultipleInstances = function (multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    };\r\n    Component.prototype.setServiceProps = function (props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    };\r\n    return Component;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nvar Provider = /** @class */ (function () {\r\n    function Provider(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    Provider.prototype.get = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            var deferred = new util.Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            // If the service instance is available, resolve the promise with it immediately\r\n            try {\r\n                var instance = this.getOrInitializeService(normalizedIdentifier);\r\n                if (instance) {\r\n                    deferred.resolve(instance);\r\n                }\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception during get(), it should not cause\r\n                // a fatal error. We just return the unresolved promise in this case.\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    };\r\n    Provider.prototype.getImmediate = function (options) {\r\n        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;\r\n        // if multipleInstances is not supported, use the default name\r\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        try {\r\n            var instance = this.getOrInitializeService(normalizedIdentifier);\r\n            if (!instance) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                throw Error(\"Service \" + this.name + \" is not available\");\r\n            }\r\n            return instance;\r\n        }\r\n        catch (e) {\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    };\r\n    Provider.prototype.getComponent = function () {\r\n        return this.component;\r\n    };\r\n    Provider.prototype.setComponent = function (component) {\r\n        var e_1, _a;\r\n        if (component.name !== this.name) {\r\n            throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\r\n        }\r\n        if (this.component) {\r\n            throw Error(\"Component for \" + this.name + \" has already been provided\");\r\n        }\r\n        this.component = component;\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService(DEFAULT_ENTRY_NAME);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        try {\r\n            // Create service instances for the pending promises and resolve them\r\n            // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n            // and all promises with resolve with it regardless of the identifier.\r\n            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];\r\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n                try {\r\n                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                    var instance = this.getOrInitializeService(normalizedIdentifier);\r\n                    instanceDeferred.resolve(instance);\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception, it should not cause\r\n                    // a fatal error. We just leave the promise unresolved.\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    Provider.prototype.clearInstance = function (identifier) {\r\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    };\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    Provider.prototype.delete = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var services;\r\n            return tslib.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        services = Array.from(this.instances.values());\r\n                        return [4 /*yield*/, Promise.all(tslib.__spread(services\r\n                                .filter(function (service) { return 'INTERNAL' in service; }) // legacy services\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service.INTERNAL.delete(); }), services\r\n                                .filter(function (service) { return '_delete' in service; }) // modularized services\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                .map(function (service) { return service._delete(); })))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Provider.prototype.isComponentSet = function () {\r\n        return this.component != null;\r\n    };\r\n    Provider.prototype.getOrInitializeService = function (identifier) {\r\n        var instance = this.instances.get(identifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));\r\n            this.instances.set(identifier, instance);\r\n        }\r\n        return instance || null;\r\n    };\r\n    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    };\r\n    return Provider;\r\n}());\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nvar ComponentContainer = /** @class */ (function () {\r\n    function ComponentContainer(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    ComponentContainer.prototype.addComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\r\n        }\r\n        provider.setComponent(component);\r\n    };\r\n    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\r\n        var provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    };\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    ComponentContainer.prototype.getProvider = function (name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        var provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    };\r\n    ComponentContainer.prototype.getProviders = function () {\r\n        return Array.from(this.providers.values());\r\n    };\r\n    return ComponentContainer;\r\n}());\n\nexports.Component = Component;\nexports.ComponentContainer = ComponentContainer;\nexports.Provider = Provider;\n//# sourceMappingURL=index.cjs.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$firebase$performance$node_modules$$firebase$util$dist$index_cjs","~$shadow.js","~$module$node_modules$$firebase$performance$node_modules$tslib$tslib"]],"~:properties",["^5",["addOrOverwriteComponent","getComponent","normalizeInstanceIdentifier","getProviders","optional","multipleInstances","delete","ComponentContainer","setMultipleInstances","component","__esModule","error","setInstantiationMode","getProvider","getImmediate","instantiationMode","serviceProps","name","value","Provider","getOrInitializeService","identifier","setServiceProps","setComponent","providers","type","instanceFactory","instancesDeferred","clearInstance","Component","instances","get","isComponentSet","addComponent","container"]],"~:compiled-at",1627827208540,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$performance$node_modules$$firebase$component$dist$index_cjs.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@firebase/performance/node_modules/@firebase/component/dist/index.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$performance$node_modules$$firebase$component$dist$index_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar tslib = require('tslib');\\nvar util = require('@firebase/util');\\n\\n/**\\r\\n * Component for service name T, e.g. `auth`, `auth-internal`\\r\\n */\\r\\nvar Component = /** @class */ (function () {\\r\\n    /**\\r\\n     *\\r\\n     * @param name The public service name, e.g. app, auth, firestore, database\\r\\n     * @param instanceFactory Service factory responsible for creating the public interface\\r\\n     * @param type whether the service provided by the component is public or private\\r\\n     */\\r\\n    function Component(name, instanceFactory, type) {\\r\\n        this.name = name;\\r\\n        this.instanceFactory = instanceFactory;\\r\\n        this.type = type;\\r\\n        this.multipleInstances = false;\\r\\n        /**\\r\\n         * Properties to be added to the service namespace\\r\\n         */\\r\\n        this.serviceProps = {};\\r\\n        this.instantiationMode = \\\"LAZY\\\" /* LAZY */;\\r\\n    }\\r\\n    Component.prototype.setInstantiationMode = function (mode) {\\r\\n        this.instantiationMode = mode;\\r\\n        return this;\\r\\n    };\\r\\n    Component.prototype.setMultipleInstances = function (multipleInstances) {\\r\\n        this.multipleInstances = multipleInstances;\\r\\n        return this;\\r\\n    };\\r\\n    Component.prototype.setServiceProps = function (props) {\\r\\n        this.serviceProps = props;\\r\\n        return this;\\r\\n    };\\r\\n    return Component;\\r\\n}());\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\\r\\n * NameServiceMapping[T] is an alias for the type of the instance\\r\\n */\\r\\nvar Provider = /** @class */ (function () {\\r\\n    function Provider(name, container) {\\r\\n        this.name = name;\\r\\n        this.container = container;\\r\\n        this.component = null;\\r\\n        this.instances = new Map();\\r\\n        this.instancesDeferred = new Map();\\r\\n    }\\r\\n    /**\\r\\n     * @param identifier A provider can provide mulitple instances of a service\\r\\n     * if this.component.multipleInstances is true.\\r\\n     */\\r\\n    Provider.prototype.get = function (identifier) {\\r\\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\\r\\n        // if multipleInstances is not supported, use the default name\\r\\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\\r\\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\\r\\n            var deferred = new util.Deferred();\\r\\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\\r\\n            // If the service instance is available, resolve the promise with it immediately\\r\\n            try {\\r\\n                var instance = this.getOrInitializeService(normalizedIdentifier);\\r\\n                if (instance) {\\r\\n                    deferred.resolve(instance);\\r\\n                }\\r\\n            }\\r\\n            catch (e) {\\r\\n                // when the instance factory throws an exception during get(), it should not cause\\r\\n                // a fatal error. We just return the unresolved promise in this case.\\r\\n            }\\r\\n        }\\r\\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\\r\\n    };\\r\\n    Provider.prototype.getImmediate = function (options) {\\r\\n        var _a = tslib.__assign({ identifier: DEFAULT_ENTRY_NAME, optional: false }, options), identifier = _a.identifier, optional = _a.optional;\\r\\n        // if multipleInstances is not supported, use the default name\\r\\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\\r\\n        try {\\r\\n            var instance = this.getOrInitializeService(normalizedIdentifier);\\r\\n            if (!instance) {\\r\\n                if (optional) {\\r\\n                    return null;\\r\\n                }\\r\\n                throw Error(\\\"Service \\\" + this.name + \\\" is not available\\\");\\r\\n            }\\r\\n            return instance;\\r\\n        }\\r\\n        catch (e) {\\r\\n            if (optional) {\\r\\n                return null;\\r\\n            }\\r\\n            else {\\r\\n                throw e;\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n    Provider.prototype.getComponent = function () {\\r\\n        return this.component;\\r\\n    };\\r\\n    Provider.prototype.setComponent = function (component) {\\r\\n        var e_1, _a;\\r\\n        if (component.name !== this.name) {\\r\\n            throw Error(\\\"Mismatching Component \\\" + component.name + \\\" for Provider \\\" + this.name + \\\".\\\");\\r\\n        }\\r\\n        if (this.component) {\\r\\n            throw Error(\\\"Component for \\\" + this.name + \\\" has already been provided\\\");\\r\\n        }\\r\\n        this.component = component;\\r\\n        // if the service is eager, initialize the default instance\\r\\n        if (isComponentEager(component)) {\\r\\n            try {\\r\\n                this.getOrInitializeService(DEFAULT_ENTRY_NAME);\\r\\n            }\\r\\n            catch (e) {\\r\\n                // when the instance factory for an eager Component throws an exception during the eager\\r\\n                // initialization, it should not cause a fatal error.\\r\\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\\r\\n                // a fatal error in this case?\\r\\n            }\\r\\n        }\\r\\n        try {\\r\\n            // Create service instances for the pending promises and resolve them\\r\\n            // NOTE: if this.multipleInstances is false, only the default instance will be created\\r\\n            // and all promises with resolve with it regardless of the identifier.\\r\\n            for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\\r\\n                var _d = tslib.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];\\r\\n                var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\\r\\n                try {\\r\\n                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\\r\\n                    var instance = this.getOrInitializeService(normalizedIdentifier);\\r\\n                    instanceDeferred.resolve(instance);\\r\\n                }\\r\\n                catch (e) {\\r\\n                    // when the instance factory throws an exception, it should not cause\\r\\n                    // a fatal error. We just leave the promise unresolved.\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\\r\\n        finally {\\r\\n            try {\\r\\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\\r\\n            }\\r\\n            finally { if (e_1) throw e_1.error; }\\r\\n        }\\r\\n    };\\r\\n    Provider.prototype.clearInstance = function (identifier) {\\r\\n        if (identifier === void 0) { identifier = DEFAULT_ENTRY_NAME; }\\r\\n        this.instancesDeferred.delete(identifier);\\r\\n        this.instances.delete(identifier);\\r\\n    };\\r\\n    // app.delete() will call this method on every provider to delete the services\\r\\n    // TODO: should we mark the provider as deleted?\\r\\n    Provider.prototype.delete = function () {\\r\\n        return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n            var services;\\r\\n            return tslib.__generator(this, function (_a) {\\r\\n                switch (_a.label) {\\r\\n                    case 0:\\r\\n                        services = Array.from(this.instances.values());\\r\\n                        return [4 /*yield*/, Promise.all(tslib.__spread(services\\r\\n                                .filter(function (service) { return 'INTERNAL' in service; }) // legacy services\\r\\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n                                .map(function (service) { return service.INTERNAL.delete(); }), services\\r\\n                                .filter(function (service) { return '_delete' in service; }) // modularized services\\r\\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n                                .map(function (service) { return service._delete(); })))];\\r\\n                    case 1:\\r\\n                        _a.sent();\\r\\n                        return [2 /*return*/];\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n    };\\r\\n    Provider.prototype.isComponentSet = function () {\\r\\n        return this.component != null;\\r\\n    };\\r\\n    Provider.prototype.getOrInitializeService = function (identifier) {\\r\\n        var instance = this.instances.get(identifier);\\r\\n        if (!instance && this.component) {\\r\\n            instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));\\r\\n            this.instances.set(identifier, instance);\\r\\n        }\\r\\n        return instance || null;\\r\\n    };\\r\\n    Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\\r\\n        if (this.component) {\\r\\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\\r\\n        }\\r\\n        else {\\r\\n            return identifier; // assume multiple instances are supported before the component is provided.\\r\\n        }\\r\\n    };\\r\\n    return Provider;\\r\\n}());\\r\\n// undefined should be passed to the service factory for the default instance\\r\\nfunction normalizeIdentifierForFactory(identifier) {\\r\\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\\r\\n}\\r\\nfunction isComponentEager(component) {\\r\\n    return component.instantiationMode === \\\"EAGER\\\" /* EAGER */;\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\\r\\n */\\r\\nvar ComponentContainer = /** @class */ (function () {\\r\\n    function ComponentContainer(name) {\\r\\n        this.name = name;\\r\\n        this.providers = new Map();\\r\\n    }\\r\\n    /**\\r\\n     *\\r\\n     * @param component Component being added\\r\\n     * @param overwrite When a component with the same name has already been registered,\\r\\n     * if overwrite is true: overwrite the existing component with the new component and create a new\\r\\n     * provider with the new component. It can be useful in tests where you want to use different mocks\\r\\n     * for different tests.\\r\\n     * if overwrite is false: throw an exception\\r\\n     */\\r\\n    ComponentContainer.prototype.addComponent = function (component) {\\r\\n        var provider = this.getProvider(component.name);\\r\\n        if (provider.isComponentSet()) {\\r\\n            throw new Error(\\\"Component \\\" + component.name + \\\" has already been registered with \\\" + this.name);\\r\\n        }\\r\\n        provider.setComponent(component);\\r\\n    };\\r\\n    ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\\r\\n        var provider = this.getProvider(component.name);\\r\\n        if (provider.isComponentSet()) {\\r\\n            // delete the existing provider from the container, so we can register the new component\\r\\n            this.providers.delete(component.name);\\r\\n        }\\r\\n        this.addComponent(component);\\r\\n    };\\r\\n    /**\\r\\n     * getProvider provides a type safe interface where it can only be called with a field name\\r\\n     * present in NameServiceMapping interface.\\r\\n     *\\r\\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\\r\\n     * themselves.\\r\\n     */\\r\\n    ComponentContainer.prototype.getProvider = function (name) {\\r\\n        if (this.providers.has(name)) {\\r\\n            return this.providers.get(name);\\r\\n        }\\r\\n        // create a Provider for a service that hasn't registered with Firebase\\r\\n        var provider = new Provider(name, this);\\r\\n        this.providers.set(name, provider);\\r\\n        return provider;\\r\\n    };\\r\\n    ComponentContainer.prototype.getProviders = function () {\\r\\n        return Array.from(this.providers.values());\\r\\n    };\\r\\n    return ComponentContainer;\\r\\n}());\\n\\nexports.Component = Component;\\nexports.ComponentContainer = ComponentContainer;\\nexports.Provider = Provider;\\n//# sourceMappingURL=index.cjs.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"tslib\",\"util\",\"Component\",\"name\",\"instanceFactory\",\"type\",\"multipleInstances\",\"serviceProps\",\"instantiationMode\",\"prototype\",\"setInstantiationMode\",\"Component.prototype.setInstantiationMode\",\"mode\",\"setMultipleInstances\",\"Component.prototype.setMultipleInstances\",\"setServiceProps\",\"Component.prototype.setServiceProps\",\"props\",\"Provider\",\"container\",\"component\",\"instances\",\"Map\",\"instancesDeferred\",\"get\",\"Provider.prototype.get\",\"identifier\",\"DEFAULT_ENTRY_NAME\",\"normalizedIdentifier\",\"normalizeInstanceIdentifier\",\"has\",\"deferred\",\"Deferred\",\"set\",\"instance\",\"getOrInitializeService\",\"resolve\",\"e\",\"promise\",\"getImmediate\",\"Provider.prototype.getImmediate\",\"options\",\"_a\",\"__assign\",\"optional\",\"Error\",\"getComponent\",\"Provider.prototype.getComponent\",\"setComponent\",\"Provider.prototype.setComponent\",\"_b\",\"__values\",\"entries\",\"_c\",\"next\",\"done\",\"_d\",\"__read\",\"instanceDeferred\",\"instanceIdentifier\",\"e_1_1\",\"e_1\",\"error\",\"return\",\"call\",\"clearInstance\",\"Provider.prototype.clearInstance\",\"delete\",\"Provider.prototype.delete\",\"__awaiter\",\"services\",\"__generator\",\"label\",\"Array\",\"from\",\"values\",\"Promise\",\"all\",\"__spread\",\"filter\",\"service\",\"map\",\"INTERNAL\",\"_delete\",\"sent\",\"isComponentSet\",\"Provider.prototype.isComponentSet\",\"Provider.prototype.getOrInitializeService\",\"undefined\",\"Provider.prototype.normalizeInstanceIdentifier\",\"ComponentContainer\",\"providers\",\"addComponent\",\"ComponentContainer.prototype.addComponent\",\"provider\",\"getProvider\",\"addOrOverwriteComponent\",\"ComponentContainer.prototype.addOrOverwriteComponent\",\"ComponentContainer.prototype.getProvider\",\"getProviders\",\"ComponentContainer.prototype.getProviders\"]\n}\n"]