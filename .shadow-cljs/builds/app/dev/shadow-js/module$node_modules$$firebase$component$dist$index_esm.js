["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/component/dist/index.esm.js"],"~:js","shadow$provide.module$node_modules$$firebase$component$dist$index_esm=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.Provider=exports.ComponentContainer=exports.Component=void 0;var _tslib=require(\"module$node_modules$tslib$tslib\"),_util=require(\"module$node_modules$$firebase$util$dist$index_esm\");global=function(){function Component(name,instanceFactory,type){this.name=name;this.instanceFactory=instanceFactory;this.type=type;this.multipleInstances=\n!1;this.serviceProps={};this.instantiationMode=\"LAZY\";this.onInstanceCreated=null}Component.prototype.setInstantiationMode=function(mode){this.instantiationMode=mode;return this};Component.prototype.setMultipleInstances=function(multipleInstances){this.multipleInstances=multipleInstances;return this};Component.prototype.setServiceProps=function(props){this.serviceProps=props;return this};Component.prototype.setInstanceCreatedCallback=function(callback){this.onInstanceCreated=callback;return this};\nreturn Component}();exports.Component=global;var Provider=function(){function Provider(name,container){this.name=name;this.container=container;this.component=null;this.instances=new Map;this.instancesDeferred=new Map;this.onInitCallbacks=new Map}Provider.prototype.get=function(identifier){identifier=this.normalizeInstanceIdentifier(identifier);if(!this.instancesDeferred.has(identifier)){var deferred=new _util.Deferred;this.instancesDeferred.set(identifier,deferred);if(this.isInitialized(identifier)||\nthis.shouldAutoInitialize())try{var instance=this.getOrInitializeService({instanceIdentifier:identifier});instance&&deferred.resolve(instance)}catch(e){}}return this.instancesDeferred.get(identifier).promise};Provider.prototype.getImmediate=function(options){var _a,normalizedIdentifier=this.normalizeInstanceIdentifier(null===options||void 0===options?void 0:options.identifier);options=null!==(_a=null===options||void 0===options?void 0:options.optional)&&void 0!==_a?_a:!1;if(this.isInitialized(normalizedIdentifier)||\nthis.shouldAutoInitialize())try{return this.getOrInitializeService({instanceIdentifier:normalizedIdentifier})}catch(e){if(options)return null;throw e;}else{if(options)return null;throw Error(\"Service \"+this.name+\" is not available\");}};Provider.prototype.getComponent=function(){return this.component};Provider.prototype.setComponent=function(component){var _a;if(component.name!==this.name)throw Error(\"Mismatching Component \"+component.name+\" for Provider \"+this.name+\".\");if(this.component)throw Error(\"Component for \"+\nthis.name+\" has already been provided\");this.component=component;if(this.shouldAutoInitialize()){if(\"EAGER\"===component.instantiationMode)try{this.getOrInitializeService({instanceIdentifier:\"[DEFAULT]\"})}catch(e){}try{for(var _b=(0,_tslib.__values)(this.instancesDeferred.entries()),_c=_b.next();!_c.done;_c=_b.next()){var _d=(0,_tslib.__read)(_c.value,2),instanceDeferred=_d[1],normalizedIdentifier=this.normalizeInstanceIdentifier(_d[0]);try{var instance=this.getOrInitializeService({instanceIdentifier:normalizedIdentifier});\ninstanceDeferred.resolve(instance)}catch(e){}}}catch(e_1_1){var e_1={error:e_1_1}}finally{try{_c&&!_c.done&&(_a=_b[\"return\"])&&_a.call(_b)}finally{if(e_1)throw e_1.error;}}}};Provider.prototype.clearInstance=function(identifier){void 0===identifier&&(identifier=\"[DEFAULT]\");this.instancesDeferred[\"delete\"](identifier);this.instances[\"delete\"](identifier)};Provider.prototype[\"delete\"]=function(){return(0,_tslib.__awaiter)(this,void 0,void 0,function(){var services;return(0,_tslib.__generator)(this,\nfunction(_a){switch(_a.label){case 0:return services=Array.from(this.instances.values()),[4,Promise.all((0,_tslib.__spreadArray)((0,_tslib.__spreadArray)([],(0,_tslib.__read)(services.filter(function(service){return\"INTERNAL\"in service}).map(function(service){return service.INTERNAL[\"delete\"]()}))),(0,_tslib.__read)(services.filter(function(service){return\"_delete\"in service}).map(function(service){return service._delete()}))))];case 1:return _a.sent(),[2]}})})};Provider.prototype.isComponentSet=\nfunction(){return null!=this.component};Provider.prototype.isInitialized=function(identifier){void 0===identifier&&(identifier=\"[DEFAULT]\");return this.instances.has(identifier)};Provider.prototype.initialize=function(opts){var _a;void 0===opts&&(opts={});var _b=opts.options;_b=void 0===_b?{}:_b;opts=this.normalizeInstanceIdentifier(opts.instanceIdentifier);if(this.isInitialized(opts))throw Error(this.name+\"(\"+opts+\") has already been initialized\");if(!this.isComponentSet())throw Error(\"Component \"+\nthis.name+\" has not been registered yet\");_b=this.getOrInitializeService({instanceIdentifier:opts,options:_b});try{for(var _c=(0,_tslib.__values)(this.instancesDeferred.entries()),_d=_c.next();!_d.done;_d=_c.next()){var _e=(0,_tslib.__read)(_d.value,2),instanceDeferred=_e[1],normalizedDeferredIdentifier=this.normalizeInstanceIdentifier(_e[0]);opts===normalizedDeferredIdentifier&&instanceDeferred.resolve(_b)}}catch(e_2_1){var e_2={error:e_2_1}}finally{try{_d&&!_d.done&&(_a=_c[\"return\"])&&_a.call(_c)}finally{if(e_2)throw e_2.error;\n}}return _b};Provider.prototype.onInit=function(callback,identifier){var _a;identifier=this.normalizeInstanceIdentifier(identifier);var existingCallbacks=null!==(_a=this.onInitCallbacks.get(identifier))&&void 0!==_a?_a:new Set;existingCallbacks.add(callback);this.onInitCallbacks.set(identifier,existingCallbacks);(_a=this.instances.get(identifier))&&callback(_a,identifier);return function(){existingCallbacks[\"delete\"](callback)}};Provider.prototype.invokeOnInitCallbacks=function(instance,identifier){var _a,\ncallbacks=this.onInitCallbacks.get(identifier);if(callbacks)try{for(var callbacks_1=(0,_tslib.__values)(callbacks),callbacks_1_1=callbacks_1.next();!callbacks_1_1.done;callbacks_1_1=callbacks_1.next()){var callback=callbacks_1_1.value;try{callback(instance,identifier)}catch(_b){}}}catch(e_3_1){var e_3={error:e_3_1}}finally{try{callbacks_1_1&&!callbacks_1_1.done&&(_a=callbacks_1[\"return\"])&&_a.call(callbacks_1)}finally{if(e_3)throw e_3.error;}}};Provider.prototype.getOrInitializeService=function(_a){var instanceIdentifier=\n_a.instanceIdentifier;_a=_a.options;_a=void 0===_a?{}:_a;var instance=this.instances.get(instanceIdentifier);if(!instance&&this.component&&(instance=this.component.instanceFactory(this.container,{instanceIdentifier:\"[DEFAULT]\"===instanceIdentifier?void 0:instanceIdentifier,options:_a}),this.instances.set(instanceIdentifier,instance),this.invokeOnInitCallbacks(instance,instanceIdentifier),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,instanceIdentifier,instance)}catch(_c){}return instance||\nnull};Provider.prototype.normalizeInstanceIdentifier=function(identifier){void 0===identifier&&(identifier=\"[DEFAULT]\");return this.component?this.component.multipleInstances?identifier:\"[DEFAULT]\":identifier};Provider.prototype.shouldAutoInitialize=function(){return!!this.component&&\"EXPLICIT\"!==this.component.instantiationMode};return Provider}();exports.Provider=Provider;global=function(){function ComponentContainer(name){this.name=name;this.providers=new Map}ComponentContainer.prototype.addComponent=\nfunction(component){var provider=this.getProvider(component.name);if(provider.isComponentSet())throw Error(\"Component \"+component.name+\" has already been registered with \"+this.name);provider.setComponent(component)};ComponentContainer.prototype.addOrOverwriteComponent=function(component){if(this.getProvider(component.name).isComponentSet())this.providers[\"delete\"](component.name);this.addComponent(component)};ComponentContainer.prototype.getProvider=function(name){if(this.providers.has(name))return this.providers.get(name);\nvar provider=new Provider(name,this);this.providers.set(name,provider);return provider};ComponentContainer.prototype.getProviders=function(){return Array.from(this.providers.values())};return ComponentContainer}();exports.ComponentContainer=global}","~:source","shadow$provide[\"module$node_modules$$firebase$component$dist$index_esm\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Provider = exports.ComponentContainer = exports.Component = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _util = require(\"@firebase/util\");\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar Component =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n    this.onInstanceCreated = null;\n  }\n\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n\n  Component.prototype.setInstanceCreatedCallback = function (callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  };\n\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nexports.Component = Component;\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nvar Provider =\n/** @class */\nfunction () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  Provider.prototype.get = function (identifier) {\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new _util.Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n\n  Provider.prototype.getImmediate = function (options) {\n    var _a; // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n    var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(\"Service \" + this.name + \" is not available\");\n      }\n    }\n  };\n\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\n    }\n\n    if (this.component) {\n      throw Error(\"Component for \" + this.name + \" has already been provided\");\n    }\n\n    this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n\n    if (!this.shouldAutoInitialize()) {\n      return;\n    } // if the service is eager, initialize the default instance\n\n\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = (0, _tslib.__values)(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = (0, _tslib.__read)(_c.value, 2),\n            instanceIdentifier = _d[0],\n            instanceDeferred = _d[1];\n\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {// when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    this.instancesDeferred[\"delete\"](identifier);\n    this.instances[\"delete\"](identifier);\n  }; // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n\n\n  Provider.prototype[\"delete\"] = function () {\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\n      var services;\n      return (0, _tslib.__generator)(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4\n            /*yield*/\n            , Promise.all((0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL[\"delete\"]();\n            }))), (0, _tslib.__read)(services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            }))))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n\n  Provider.prototype.isInitialized = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    return this.instances.has(identifier);\n  };\n\n  Provider.prototype.initialize = function (opts) {\n    var e_2, _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _b = opts.options,\n        options = _b === void 0 ? {} : _b;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(this.name + \"(\" + normalizedIdentifier + \") has already been initialized\");\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(\"Component \" + this.name + \" has not been registered yet\");\n    }\n\n    var instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options: options\n    });\n\n    try {\n      // resolve any pending promise waiting for the service instance\n      for (var _c = (0, _tslib.__values)(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = (0, _tslib.__read)(_d.value, 2),\n            instanceIdentifier = _e[0],\n            instanceDeferred = _e[1];\n\n        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c[\"return\"])) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return instance;\n  };\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @param identifier An optional instance identifier\r\n   * @returns a function to unregister the callback\r\n   */\n\n\n  Provider.prototype.onInit = function (callback, identifier) {\n    var _a;\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n    var existingInstance = this.instances.get(normalizedIdentifier);\n\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return function () {\n      existingCallbacks[\"delete\"](callback);\n    };\n  };\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n\n\n  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\n    var e_3, _a;\n\n    var callbacks = this.onInitCallbacks.get(identifier);\n\n    if (!callbacks) {\n      return;\n    }\n\n    try {\n      for (var callbacks_1 = (0, _tslib.__values)(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\n        var callback = callbacks_1_1.value;\n\n        try {\n          callback(instance, identifier);\n        } catch (_b) {// ignore errors in the onInit callback\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1[\"return\"])) _a.call(callbacks_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  Provider.prototype.getOrInitializeService = function (_a) {\n    var instanceIdentifier = _a.instanceIdentifier,\n        _b = _a.options,\n        options = _b === void 0 ? {} : _b;\n    var instance = this.instances.get(instanceIdentifier);\n\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options: options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      /**\r\n       * Invoke onInit listeners.\r\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n       * while onInit listeners are registered by consumers of the provider.\r\n       */\n\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_c) {// ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  };\n\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  Provider.prototype.shouldAutoInitialize = function () {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\"\n    /* EXPLICIT */\n    ;\n  };\n\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\n\n\nexports.Provider = Provider;\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar ComponentContainer =\n/** @class */\nfunction () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\n    }\n\n    provider.setComponent(component);\n  };\n\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers[\"delete\"](component.name);\n    }\n\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n\n\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    } // create a Provider for a service that hasn't registered with Firebase\n\n\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n\n  return ComponentContainer;\n}();\n\nexports.ComponentContainer = ComponentContainer;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$firebase$util$dist$index_esm","~$module$node_modules$tslib$tslib","~$shadow.js"]],"~:properties",["^5",["addOrOverwriteComponent","getComponent","setInstanceCreatedCallback","normalizeInstanceIdentifier","getProviders","multipleInstances","onInit","isInitialized","ComponentContainer","setMultipleInstances","component","__esModule","error","setInstantiationMode","getProvider","getImmediate","instantiationMode","serviceProps","name","value","invokeOnInitCallbacks","Provider","getOrInitializeService","instanceIdentifier","onInstanceCreated","setServiceProps","setComponent","providers","type","initialize","instanceFactory","instancesDeferred","clearInstance","Component","shouldAutoInitialize","instances","options","get","isComponentSet","addComponent","container","onInitCallbacks"]],"~:compiled-at",1627822785121,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$component$dist$index_esm.js\",\n\"lineCount\":16,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@firebase/component/dist/index.esm.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$component$dist$index_esm\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.Provider = exports.ComponentContainer = exports.Component = void 0;\\n\\nvar _tslib = require(\\\"tslib\\\");\\n\\nvar _util = require(\\\"@firebase/util\\\");\\n\\n/**\\r\\n * Component for service name T, e.g. `auth`, `auth-internal`\\r\\n */\\nvar Component =\\n/** @class */\\nfunction () {\\n  /**\\r\\n   *\\r\\n   * @param name The public service name, e.g. app, auth, firestore, database\\r\\n   * @param instanceFactory Service factory responsible for creating the public interface\\r\\n   * @param type whether the service provided by the component is public or private\\r\\n   */\\n  function Component(name, instanceFactory, type) {\\n    this.name = name;\\n    this.instanceFactory = instanceFactory;\\n    this.type = type;\\n    this.multipleInstances = false;\\n    /**\\r\\n     * Properties to be added to the service namespace\\r\\n     */\\n\\n    this.serviceProps = {};\\n    this.instantiationMode = \\\"LAZY\\\"\\n    /* LAZY */\\n    ;\\n    this.onInstanceCreated = null;\\n  }\\n\\n  Component.prototype.setInstantiationMode = function (mode) {\\n    this.instantiationMode = mode;\\n    return this;\\n  };\\n\\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\\n    this.multipleInstances = multipleInstances;\\n    return this;\\n  };\\n\\n  Component.prototype.setServiceProps = function (props) {\\n    this.serviceProps = props;\\n    return this;\\n  };\\n\\n  Component.prototype.setInstanceCreatedCallback = function (callback) {\\n    this.onInstanceCreated = callback;\\n    return this;\\n  };\\n\\n  return Component;\\n}();\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n\\nexports.Component = Component;\\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n/**\\r\\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\\r\\n * NameServiceMapping[T] is an alias for the type of the instance\\r\\n */\\n\\nvar Provider =\\n/** @class */\\nfunction () {\\n  function Provider(name, container) {\\n    this.name = name;\\n    this.container = container;\\n    this.component = null;\\n    this.instances = new Map();\\n    this.instancesDeferred = new Map();\\n    this.onInitCallbacks = new Map();\\n  }\\n  /**\\r\\n   * @param identifier A provider can provide mulitple instances of a service\\r\\n   * if this.component.multipleInstances is true.\\r\\n   */\\n\\n\\n  Provider.prototype.get = function (identifier) {\\n    // if multipleInstances is not supported, use the default name\\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\\n\\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\\n      var deferred = new _util.Deferred();\\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\\n\\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\\n        // initialize the service if it can be auto-initialized\\n        try {\\n          var instance = this.getOrInitializeService({\\n            instanceIdentifier: normalizedIdentifier\\n          });\\n\\n          if (instance) {\\n            deferred.resolve(instance);\\n          }\\n        } catch (e) {// when the instance factory throws an exception during get(), it should not cause\\n          // a fatal error. We just return the unresolved promise in this case.\\n        }\\n      }\\n    }\\n\\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\\n  };\\n\\n  Provider.prototype.getImmediate = function (options) {\\n    var _a; // if multipleInstances is not supported, use the default name\\n\\n\\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\\n    var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\\n\\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\\n      try {\\n        return this.getOrInitializeService({\\n          instanceIdentifier: normalizedIdentifier\\n        });\\n      } catch (e) {\\n        if (optional) {\\n          return null;\\n        } else {\\n          throw e;\\n        }\\n      }\\n    } else {\\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\\n      if (optional) {\\n        return null;\\n      } else {\\n        throw Error(\\\"Service \\\" + this.name + \\\" is not available\\\");\\n      }\\n    }\\n  };\\n\\n  Provider.prototype.getComponent = function () {\\n    return this.component;\\n  };\\n\\n  Provider.prototype.setComponent = function (component) {\\n    var e_1, _a;\\n\\n    if (component.name !== this.name) {\\n      throw Error(\\\"Mismatching Component \\\" + component.name + \\\" for Provider \\\" + this.name + \\\".\\\");\\n    }\\n\\n    if (this.component) {\\n      throw Error(\\\"Component for \\\" + this.name + \\\" has already been provided\\\");\\n    }\\n\\n    this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\\n\\n    if (!this.shouldAutoInitialize()) {\\n      return;\\n    } // if the service is eager, initialize the default instance\\n\\n\\n    if (isComponentEager(component)) {\\n      try {\\n        this.getOrInitializeService({\\n          instanceIdentifier: DEFAULT_ENTRY_NAME\\n        });\\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\\n        // initialization, it should not cause a fatal error.\\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\\n        // a fatal error in this case?\\n      }\\n    }\\n\\n    try {\\n      // Create service instances for the pending promises and resolve them\\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\\n      // and all promises with resolve with it regardless of the identifier.\\n      for (var _b = (0, _tslib.__values)(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\\n        var _d = (0, _tslib.__read)(_c.value, 2),\\n            instanceIdentifier = _d[0],\\n            instanceDeferred = _d[1];\\n\\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\\n\\n        try {\\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\\n          var instance = this.getOrInitializeService({\\n            instanceIdentifier: normalizedIdentifier\\n          });\\n          instanceDeferred.resolve(instance);\\n        } catch (e) {// when the instance factory throws an exception, it should not cause\\n          // a fatal error. We just leave the promise unresolved.\\n        }\\n      }\\n    } catch (e_1_1) {\\n      e_1 = {\\n        error: e_1_1\\n      };\\n    } finally {\\n      try {\\n        if (_c && !_c.done && (_a = _b[\\\"return\\\"])) _a.call(_b);\\n      } finally {\\n        if (e_1) throw e_1.error;\\n      }\\n    }\\n  };\\n\\n  Provider.prototype.clearInstance = function (identifier) {\\n    if (identifier === void 0) {\\n      identifier = DEFAULT_ENTRY_NAME;\\n    }\\n\\n    this.instancesDeferred[\\\"delete\\\"](identifier);\\n    this.instances[\\\"delete\\\"](identifier);\\n  }; // app.delete() will call this method on every provider to delete the services\\n  // TODO: should we mark the provider as deleted?\\n\\n\\n  Provider.prototype[\\\"delete\\\"] = function () {\\n    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {\\n      var services;\\n      return (0, _tslib.__generator)(this, function (_a) {\\n        switch (_a.label) {\\n          case 0:\\n            services = Array.from(this.instances.values());\\n            return [4\\n            /*yield*/\\n            , Promise.all((0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(services.filter(function (service) {\\n              return 'INTERNAL' in service;\\n            }) // legacy services\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n            .map(function (service) {\\n              return service.INTERNAL[\\\"delete\\\"]();\\n            }))), (0, _tslib.__read)(services.filter(function (service) {\\n              return '_delete' in service;\\n            }) // modularized services\\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\\n            .map(function (service) {\\n              return service._delete();\\n            }))))];\\n\\n          case 1:\\n            _a.sent();\\n\\n            return [2\\n            /*return*/\\n            ];\\n        }\\n      });\\n    });\\n  };\\n\\n  Provider.prototype.isComponentSet = function () {\\n    return this.component != null;\\n  };\\n\\n  Provider.prototype.isInitialized = function (identifier) {\\n    if (identifier === void 0) {\\n      identifier = DEFAULT_ENTRY_NAME;\\n    }\\n\\n    return this.instances.has(identifier);\\n  };\\n\\n  Provider.prototype.initialize = function (opts) {\\n    var e_2, _a;\\n\\n    if (opts === void 0) {\\n      opts = {};\\n    }\\n\\n    var _b = opts.options,\\n        options = _b === void 0 ? {} : _b;\\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\\n\\n    if (this.isInitialized(normalizedIdentifier)) {\\n      throw Error(this.name + \\\"(\\\" + normalizedIdentifier + \\\") has already been initialized\\\");\\n    }\\n\\n    if (!this.isComponentSet()) {\\n      throw Error(\\\"Component \\\" + this.name + \\\" has not been registered yet\\\");\\n    }\\n\\n    var instance = this.getOrInitializeService({\\n      instanceIdentifier: normalizedIdentifier,\\n      options: options\\n    });\\n\\n    try {\\n      // resolve any pending promise waiting for the service instance\\n      for (var _c = (0, _tslib.__values)(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\\n        var _e = (0, _tslib.__read)(_d.value, 2),\\n            instanceIdentifier = _e[0],\\n            instanceDeferred = _e[1];\\n\\n        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\\n\\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\\n          instanceDeferred.resolve(instance);\\n        }\\n      }\\n    } catch (e_2_1) {\\n      e_2 = {\\n        error: e_2_1\\n      };\\n    } finally {\\n      try {\\n        if (_d && !_d.done && (_a = _c[\\\"return\\\"])) _a.call(_c);\\n      } finally {\\n        if (e_2) throw e_2.error;\\n      }\\n    }\\n\\n    return instance;\\n  };\\n  /**\\r\\n   *\\r\\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\\r\\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\\r\\n   *\\r\\n   * @param identifier An optional instance identifier\\r\\n   * @returns a function to unregister the callback\\r\\n   */\\n\\n\\n  Provider.prototype.onInit = function (callback, identifier) {\\n    var _a;\\n\\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\\n    var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\\n    existingCallbacks.add(callback);\\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\\n    var existingInstance = this.instances.get(normalizedIdentifier);\\n\\n    if (existingInstance) {\\n      callback(existingInstance, normalizedIdentifier);\\n    }\\n\\n    return function () {\\n      existingCallbacks[\\\"delete\\\"](callback);\\n    };\\n  };\\n  /**\\r\\n   * Invoke onInit callbacks synchronously\\r\\n   * @param instance the service instance`\\r\\n   */\\n\\n\\n  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\\n    var e_3, _a;\\n\\n    var callbacks = this.onInitCallbacks.get(identifier);\\n\\n    if (!callbacks) {\\n      return;\\n    }\\n\\n    try {\\n      for (var callbacks_1 = (0, _tslib.__values)(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\\n        var callback = callbacks_1_1.value;\\n\\n        try {\\n          callback(instance, identifier);\\n        } catch (_b) {// ignore errors in the onInit callback\\n        }\\n      }\\n    } catch (e_3_1) {\\n      e_3 = {\\n        error: e_3_1\\n      };\\n    } finally {\\n      try {\\n        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1[\\\"return\\\"])) _a.call(callbacks_1);\\n      } finally {\\n        if (e_3) throw e_3.error;\\n      }\\n    }\\n  };\\n\\n  Provider.prototype.getOrInitializeService = function (_a) {\\n    var instanceIdentifier = _a.instanceIdentifier,\\n        _b = _a.options,\\n        options = _b === void 0 ? {} : _b;\\n    var instance = this.instances.get(instanceIdentifier);\\n\\n    if (!instance && this.component) {\\n      instance = this.component.instanceFactory(this.container, {\\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\\n        options: options\\n      });\\n      this.instances.set(instanceIdentifier, instance);\\n      /**\\r\\n       * Invoke onInit listeners.\\r\\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\\r\\n       * while onInit listeners are registered by consumers of the provider.\\r\\n       */\\n\\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\\n      /**\\r\\n       * Order is important\\r\\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\\r\\n       * makes `isInitialized()` return true.\\r\\n       */\\n\\n      if (this.component.onInstanceCreated) {\\n        try {\\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\\n        } catch (_c) {// ignore errors in the onInstanceCreatedCallback\\n        }\\n      }\\n    }\\n\\n    return instance || null;\\n  };\\n\\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\\n    if (identifier === void 0) {\\n      identifier = DEFAULT_ENTRY_NAME;\\n    }\\n\\n    if (this.component) {\\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\\n    } else {\\n      return identifier; // assume multiple instances are supported before the component is provided.\\n    }\\n  };\\n\\n  Provider.prototype.shouldAutoInitialize = function () {\\n    return !!this.component && this.component.instantiationMode !== \\\"EXPLICIT\\\"\\n    /* EXPLICIT */\\n    ;\\n  };\\n\\n  return Provider;\\n}(); // undefined should be passed to the service factory for the default instance\\n\\n\\nexports.Provider = Provider;\\n\\nfunction normalizeIdentifierForFactory(identifier) {\\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\\n}\\n\\nfunction isComponentEager(component) {\\n  return component.instantiationMode === \\\"EAGER\\\"\\n  /* EAGER */\\n  ;\\n}\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\n\\n/**\\r\\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\\r\\n */\\n\\n\\nvar ComponentContainer =\\n/** @class */\\nfunction () {\\n  function ComponentContainer(name) {\\n    this.name = name;\\n    this.providers = new Map();\\n  }\\n  /**\\r\\n   *\\r\\n   * @param component Component being added\\r\\n   * @param overwrite When a component with the same name has already been registered,\\r\\n   * if overwrite is true: overwrite the existing component with the new component and create a new\\r\\n   * provider with the new component. It can be useful in tests where you want to use different mocks\\r\\n   * for different tests.\\r\\n   * if overwrite is false: throw an exception\\r\\n   */\\n\\n\\n  ComponentContainer.prototype.addComponent = function (component) {\\n    var provider = this.getProvider(component.name);\\n\\n    if (provider.isComponentSet()) {\\n      throw new Error(\\\"Component \\\" + component.name + \\\" has already been registered with \\\" + this.name);\\n    }\\n\\n    provider.setComponent(component);\\n  };\\n\\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\\n    var provider = this.getProvider(component.name);\\n\\n    if (provider.isComponentSet()) {\\n      // delete the existing provider from the container, so we can register the new component\\n      this.providers[\\\"delete\\\"](component.name);\\n    }\\n\\n    this.addComponent(component);\\n  };\\n  /**\\r\\n   * getProvider provides a type safe interface where it can only be called with a field name\\r\\n   * present in NameServiceMapping interface.\\r\\n   *\\r\\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\\r\\n   * themselves.\\r\\n   */\\n\\n\\n  ComponentContainer.prototype.getProvider = function (name) {\\n    if (this.providers.has(name)) {\\n      return this.providers.get(name);\\n    } // create a Provider for a service that hasn't registered with Firebase\\n\\n\\n    var provider = new Provider(name, this);\\n    this.providers.set(name, provider);\\n    return provider;\\n  };\\n\\n  ComponentContainer.prototype.getProviders = function () {\\n    return Array.from(this.providers.values());\\n  };\\n\\n  return ComponentContainer;\\n}();\\n\\nexports.ComponentContainer = ComponentContainer;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"Provider\",\"ComponentContainer\",\"Component\",\"_tslib\",\"_util\",\"name\",\"instanceFactory\",\"type\",\"multipleInstances\",\"serviceProps\",\"instantiationMode\",\"onInstanceCreated\",\"prototype\",\"setInstantiationMode\",\"Component.prototype.setInstantiationMode\",\"mode\",\"setMultipleInstances\",\"Component.prototype.setMultipleInstances\",\"setServiceProps\",\"Component.prototype.setServiceProps\",\"props\",\"setInstanceCreatedCallback\",\"Component.prototype.setInstanceCreatedCallback\",\"callback\",\"container\",\"component\",\"instances\",\"Map\",\"instancesDeferred\",\"onInitCallbacks\",\"get\",\"Provider.prototype.get\",\"identifier\",\"normalizedIdentifier\",\"normalizeInstanceIdentifier\",\"has\",\"deferred\",\"Deferred\",\"set\",\"isInitialized\",\"shouldAutoInitialize\",\"instance\",\"getOrInitializeService\",\"instanceIdentifier\",\"resolve\",\"e\",\"promise\",\"getImmediate\",\"Provider.prototype.getImmediate\",\"options\",\"_a\",\"optional\",\"Error\",\"getComponent\",\"Provider.prototype.getComponent\",\"setComponent\",\"Provider.prototype.setComponent\",\"DEFAULT_ENTRY_NAME\",\"_b\",\"__values\",\"entries\",\"_c\",\"next\",\"done\",\"_d\",\"__read\",\"instanceDeferred\",\"e_1_1\",\"e_1\",\"error\",\"call\",\"clearInstance\",\"Provider.prototype.clearInstance\",\"__awaiter\",\"services\",\"__generator\",\"label\",\"Array\",\"from\",\"values\",\"Promise\",\"all\",\"__spreadArray\",\"filter\",\"service\",\"map\",\"INTERNAL\",\"_delete\",\"sent\",\"isComponentSet\",\"Provider.prototype.isComponentSet\",\"Provider.prototype.isInitialized\",\"initialize\",\"Provider.prototype.initialize\",\"opts\",\"_e\",\"normalizedDeferredIdentifier\",\"e_2_1\",\"e_2\",\"onInit\",\"Provider.prototype.onInit\",\"existingCallbacks\",\"Set\",\"add\",\"existingInstance\",\"invokeOnInitCallbacks\",\"Provider.prototype.invokeOnInitCallbacks\",\"callbacks\",\"callbacks_1\",\"callbacks_1_1\",\"e_3_1\",\"e_3\",\"Provider.prototype.getOrInitializeService\",\"undefined\",\"Provider.prototype.normalizeInstanceIdentifier\",\"Provider.prototype.shouldAutoInitialize\",\"providers\",\"addComponent\",\"ComponentContainer.prototype.addComponent\",\"provider\",\"getProvider\",\"addOrOverwriteComponent\",\"ComponentContainer.prototype.addOrOverwriteComponent\",\"ComponentContainer.prototype.getProvider\",\"getProviders\",\"ComponentContainer.prototype.getProviders\"]\n}\n"]