["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/enquire_DOT_js/src/MediaQueryDispatch.js"],"~:js","shadow$provide.module$node_modules$enquire_DOT_js$src$MediaQueryDispatch=function(global,require,module,exports){function MediaQueryDispatch(){if(!window.matchMedia)throw Error(\"matchMedia not present, legacy browsers require a polyfill\");this.queries={};this.browserIsIncapable=!window.matchMedia(\"only all\").matches}var MediaQuery=require(\"module$node_modules$enquire_DOT_js$src$MediaQuery\");global=require(\"module$node_modules$enquire_DOT_js$src$Util\");var each=global.each,isFunction=global.isFunction,\nisArray=global.isArray;MediaQueryDispatch.prototype={constructor:MediaQueryDispatch,register:function(q,options,shouldDegrade){var queries=this.queries;shouldDegrade=shouldDegrade&&this.browserIsIncapable;queries[q]||(queries[q]=new MediaQuery(q,shouldDegrade));isFunction(options)&&(options={match:options});isArray(options)||(options=[options]);each(options,function(handler){isFunction(handler)&&(handler={match:handler});queries[q].addHandler(handler)});return this},unregister:function(q,handler){var query=\nthis.queries[q];query&&(handler?query.removeHandler(handler):(query.clear(),delete this.queries[q]));return this}};module.exports=MediaQueryDispatch}","~:source","shadow$provide[\"module$node_modules$enquire_DOT_js$src$MediaQueryDispatch\"] = function(global,require,module,exports) {\nvar MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$enquire_DOT_js$src$MediaQuery","~$shadow.js","~$module$node_modules$enquire_DOT_js$src$Util"]],"~:properties",["^5",["queries","unregister","prototype","register","match","browserIsIncapable","constructor"]],"~:compiled-at",1627822784996,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$enquire_DOT_js$src$MediaQueryDispatch.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAatHC,QAASA,mBAAmB,EAAG,CAC3B,GAAG,CAACC,MAAOC,CAAAA,UAAX,CACI,KAAUC,MAAJ,CAAU,4DAAV,CAAN,CAGJ,IAAKC,CAAAA,OAAL,CAAe,EACf,KAAKC,CAAAA,kBAAL,CAA0B,CAACJ,MAAOC,CAAAA,UAAP,CAAkB,UAAlB,CAA8BI,CAAAA,OAN9B,CAZ/B,IAAIC,WAAaV,OAAA,CAAQ,mDAAR,CACbW,OAAAA,CAAOX,OAAA,CAAQ,6CAAR,CACX,KAAIY,KAAOD,MAAKC,CAAAA,IAAhB,CACIC,WAAaF,MAAKE,CAAAA,UADtB;AAEIC,QAAUH,MAAKG,CAAAA,OAiBnBX,mBAAmBY,CAAAA,SAAnB,CAA+B,CAE3BC,YAAcb,kBAFa,CAe3Bc,SAAWA,QAAQ,CAACC,CAAD,CAAIC,OAAJ,CAAaC,aAAb,CAA4B,CAAA,IACvCb,QAAkB,IAAKA,CAAAA,OACvBc,cAAAA,CAAkBD,aAAlBC,EAAmC,IAAKb,CAAAA,kBAExCD,QAAA,CAAQW,CAAR,CAAJ,GACIX,OAAA,CAAQW,CAAR,CADJ,CACiB,IAAIR,UAAJ,CAAeQ,CAAf,CAAkBG,aAAlB,CADjB,CAKGR,WAAA,CAAWM,OAAX,CAAH,GACIA,OADJ,CACc,CAAEG,MAAQH,OAAV,CADd,CAGIL,QAAA,CAAQK,OAAR,CAAJ,GACIA,OADJ,CACc,CAACA,OAAD,CADd,CAGAP,KAAA,CAAKO,OAAL,CAAc,QAAQ,CAACI,OAAD,CAAU,CACxBV,UAAA,CAAWU,OAAX,CAAJ,GACIA,OADJ,CACc,CAAED,MAAQC,OAAV,CADd,CAGAhB,QAAA,CAAQW,CAAR,CAAWM,CAAAA,UAAX,CAAsBD,OAAtB,CAJ4B,CAAhC,CAOA,OAAO,KAtBoC,CAfpB,CA8C3BE,WAAaA,QAAQ,CAACP,CAAD,CAAIK,OAAJ,CAAa,CAC9B,IAAIG;AAAQ,IAAKnB,CAAAA,OAAL,CAAaW,CAAb,CAETQ,MAAH,GACOH,OAAH,CACIG,KAAMC,CAAAA,aAAN,CAAoBJ,OAApB,CADJ,EAIIG,KAAME,CAAAA,KAAN,EACA,CAAA,OAAO,IAAKrB,CAAAA,OAAL,CAAaW,CAAb,CALX,CADJ,CAUA,OAAO,KAbuB,CA9CP,CA+D/BjB,OAAOC,CAAAA,OAAP,CAAiBC,kBArFqG;\",\n\"sources\":[\"node_modules/enquire_DOT_js/src/MediaQueryDispatch.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$enquire_DOT_js$src$MediaQueryDispatch\\\"] = function(global,require,module,exports) {\\nvar MediaQuery = require('./MediaQuery');\\nvar Util = require('./Util');\\nvar each = Util.each;\\nvar isFunction = Util.isFunction;\\nvar isArray = Util.isArray;\\n\\n/**\\n * Allows for registration of query handlers.\\n * Manages the query handler's state and is responsible for wiring up browser events\\n *\\n * @constructor\\n */\\nfunction MediaQueryDispatch () {\\n    if(!window.matchMedia) {\\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\\n    }\\n\\n    this.queries = {};\\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\\n}\\n\\nMediaQueryDispatch.prototype = {\\n\\n    constructor : MediaQueryDispatch,\\n\\n    /**\\n     * Registers a handler for the given media query\\n     *\\n     * @param {string} q the media query\\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\\n     * @param {function} options.match fired when query matched\\n     * @param {function} [options.unmatch] fired when a query is no longer matched\\n     * @param {function} [options.setup] fired when handler first triggered\\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\\n     */\\n    register : function(q, options, shouldDegrade) {\\n        var queries         = this.queries,\\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\\n\\n        if(!queries[q]) {\\n            queries[q] = new MediaQuery(q, isUnconditional);\\n        }\\n\\n        //normalise to object in an array\\n        if(isFunction(options)) {\\n            options = { match : options };\\n        }\\n        if(!isArray(options)) {\\n            options = [options];\\n        }\\n        each(options, function(handler) {\\n            if (isFunction(handler)) {\\n                handler = { match : handler };\\n            }\\n            queries[q].addHandler(handler);\\n        });\\n\\n        return this;\\n    },\\n\\n    /**\\n     * unregisters a query and all it's handlers, or a specific handler for a query\\n     *\\n     * @param {string} q the media query to target\\n     * @param {object || function} [handler] specific handler to unregister\\n     */\\n    unregister : function(q, handler) {\\n        var query = this.queries[q];\\n\\n        if(query) {\\n            if(handler) {\\n                query.removeHandler(handler);\\n            }\\n            else {\\n                query.clear();\\n                delete this.queries[q];\\n            }\\n        }\\n\\n        return this;\\n    }\\n};\\n\\nmodule.exports = MediaQueryDispatch;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"MediaQueryDispatch\",\"window\",\"matchMedia\",\"Error\",\"queries\",\"browserIsIncapable\",\"matches\",\"MediaQuery\",\"Util\",\"each\",\"isFunction\",\"isArray\",\"prototype\",\"constructor\",\"register\",\"q\",\"options\",\"shouldDegrade\",\"isUnconditional\",\"match\",\"handler\",\"addHandler\",\"unregister\",\"query\",\"removeHandler\",\"clear\"]\n}\n"]