["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@firebase/analytics/dist/index.cjs.js"],"~:js","shadow$provide.module$node_modules$$firebase$analytics$dist$index_cjs=function(global,require,module,exports){function logEvent(gtagFunction,initializationPromise,eventName,eventParams,options){return tslib.__awaiter(this,void 0,void 0,function(){var measurementId,params;return tslib.__generator(this,function(_a){switch(_a.label){case 0:if(!options||!options.global)return[3,1];gtagFunction(GtagCommand.EVENT,eventName,eventParams);return[2];case 1:return[4,initializationPromise];case 2:measurementId=\n_a.sent(),params=tslib.__assign(tslib.__assign({},eventParams),{send_to:measurementId}),gtagFunction(GtagCommand.EVENT,eventName,params),_a.label=3;case 3:return[2]}})})}function setCurrentScreen(gtagFunction,initializationPromise,screenName,options){return tslib.__awaiter(this,void 0,void 0,function(){var measurementId;return tslib.__generator(this,function(_a){switch(_a.label){case 0:if(!options||!options.global)return[3,1];gtagFunction(GtagCommand.SET,{screen_name:screenName});return[2,Promise.resolve()];\ncase 1:return[4,initializationPromise];case 2:measurementId=_a.sent(),gtagFunction(GtagCommand.CONFIG,measurementId,{update:!0,screen_name:screenName}),_a.label=3;case 3:return[2]}})})}function setUserId(gtagFunction,initializationPromise,id,options){return tslib.__awaiter(this,void 0,void 0,function(){var measurementId;return tslib.__generator(this,function(_a){switch(_a.label){case 0:if(!options||!options.global)return[3,1];gtagFunction(GtagCommand.SET,{user_id:id});return[2,Promise.resolve()];\ncase 1:return[4,initializationPromise];case 2:measurementId=_a.sent(),gtagFunction(GtagCommand.CONFIG,measurementId,{update:!0,user_id:id}),_a.label=3;case 3:return[2]}})})}function setUserProperties(gtagFunction,initializationPromise,properties,options){return tslib.__awaiter(this,void 0,void 0,function(){var flatProperties,_i,_a,key,measurementId;return tslib.__generator(this,function(_b){switch(_b.label){case 0:if(!options||!options.global)return[3,1];flatProperties={};_i=0;for(_a=Object.keys(properties);_i<\n_a.length;_i++)key=_a[_i],flatProperties[\"user_properties.\"+key]=properties[key];gtagFunction(GtagCommand.SET,flatProperties);return[2,Promise.resolve()];case 1:return[4,initializationPromise];case 2:measurementId=_b.sent(),gtagFunction(GtagCommand.CONFIG,measurementId,{update:!0,user_properties:properties}),_b.label=3;case 3:return[2]}})})}function setAnalyticsCollectionEnabled(initializationPromise,enabled){return tslib.__awaiter(this,void 0,void 0,function(){var measurementId;return tslib.__generator(this,\nfunction(_a){switch(_a.label){case 0:return[4,initializationPromise];case 1:return measurementId=_a.sent(),window[\"ga-disable-\"+measurementId]=!enabled,[2]}})})}function insertScriptTag(dataLayerName,measurementId){var script=document.createElement(\"script\");script.src=\"https://www.googletagmanager.com/gtag/js?l\\x3d\"+dataLayerName+\"\\x26id\\x3d\"+measurementId;script.async=!0;document.head.appendChild(script)}function getOrCreateDataLayer(dataLayerName){var dataLayer=[];Array.isArray(window[dataLayerName])?\ndataLayer=window[dataLayerName]:window[dataLayerName]=dataLayer;return dataLayer}function gtagOnConfig(gtagCore,initializationPromisesMap,dynamicConfigPromisesList,measurementIdToAppId,measurementId,gtagParams){return tslib.__awaiter(this,void 0,void 0,function(){var correspondingAppId,dynamicConfigResults,foundConfig,e_1;return tslib.__generator(this,function(_a){switch(_a.label){case 0:correspondingAppId=measurementIdToAppId[measurementId],_a.label=1;case 1:return _a.trys.push([1,7,,8]),correspondingAppId?\n[4,initializationPromisesMap[correspondingAppId]]:[3,3];case 2:return _a.sent(),[3,6];case 3:return[4,Promise.all(dynamicConfigPromisesList)];case 4:return dynamicConfigResults=_a.sent(),(foundConfig=dynamicConfigResults.find(function(config){return config.measurementId===measurementId}))?[4,initializationPromisesMap[foundConfig.appId]]:[3,6];case 5:_a.sent(),_a.label=6;case 6:return[3,8];case 7:return e_1=_a.sent(),logger.error(e_1),[3,8];case 8:return gtagCore(GtagCommand.CONFIG,measurementId,gtagParams),\n[2]}})})}function gtagOnEvent(gtagCore,initializationPromisesMap,dynamicConfigPromisesList,measurementId,gtagParams){return tslib.__awaiter(this,void 0,void 0,function(){var initializationPromisesToWaitFor,gaSendToList,dynamicConfigResults,_loop_1,_i,gaSendToList_1,sendToId,state_1,e_2;return tslib.__generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,4,,5]);initializationPromisesToWaitFor=[];if(!gtagParams||!gtagParams.send_to)return[3,2];gaSendToList=gtagParams.send_to;Array.isArray(gaSendToList)||\n(gaSendToList=[gaSendToList]);return[4,Promise.all(dynamicConfigPromisesList)];case 1:dynamicConfigResults=_a.sent();_loop_1=function(sendToId){var foundConfig=dynamicConfigResults.find(function(config){return config.measurementId===sendToId});if(foundConfig=foundConfig&&initializationPromisesMap[foundConfig.appId])initializationPromisesToWaitFor.push(foundConfig);else return initializationPromisesToWaitFor=[],\"break\"};_i=0;for(gaSendToList_1=gaSendToList;_i<gaSendToList_1.length&&(sendToId=gaSendToList_1[_i],\nstate_1=_loop_1(sendToId),\"break\"!==state_1);_i++);_a.label=2;case 2:return 0===initializationPromisesToWaitFor.length&&(initializationPromisesToWaitFor=Object.values(initializationPromisesMap)),[4,Promise.all(initializationPromisesToWaitFor)];case 3:return _a.sent(),gtagCore(GtagCommand.EVENT,measurementId,gtagParams||{}),[3,5];case 4:return e_2=_a.sent(),logger.error(e_2),[3,5];case 5:return[2]}})})}function wrapGtag(gtagCore,initializationPromisesMap,dynamicConfigPromisesList,measurementIdToAppId){return function(command,\nidOrNameOrParams,gtagParams){return tslib.__awaiter(this,void 0,void 0,function(){var e_3;return tslib.__generator(this,function(_a){switch(_a.label){case 0:return _a.trys.push([0,6,,7]),command!==GtagCommand.EVENT?[3,2]:[4,gtagOnEvent(gtagCore,initializationPromisesMap,dynamicConfigPromisesList,idOrNameOrParams,gtagParams)];case 1:return _a.sent(),[3,5];case 2:return command!==GtagCommand.CONFIG?[3,4]:[4,gtagOnConfig(gtagCore,initializationPromisesMap,dynamicConfigPromisesList,measurementIdToAppId,\nidOrNameOrParams,gtagParams)];case 3:return _a.sent(),[3,5];case 4:gtagCore(GtagCommand.SET,idOrNameOrParams),_a.label=5;case 5:return[3,7];case 6:return e_3=_a.sent(),logger.error(e_3),[3,7];case 7:return[2]}})})}}function wrapOrCreateGtag(initializationPromisesMap,dynamicConfigPromisesList,measurementIdToAppId,dataLayerName,gtagFunctionName){var gtagCore=function(){for(var _i=0;_i<arguments.length;_i++);window[dataLayerName].push(arguments)};window[gtagFunctionName]&&\"function\"===typeof window[gtagFunctionName]&&\n(gtagCore=window[gtagFunctionName]);window[gtagFunctionName]=wrapGtag(gtagCore,initializationPromisesMap,dynamicConfigPromisesList,measurementIdToAppId);return{gtagCore,wrappedGtag:window[gtagFunctionName]}}function findGtagScriptOnPage(){var scriptTags=window.document.getElementsByTagName(\"script\"),_i=0;for(scriptTags=Object.values(scriptTags);_i<scriptTags.length;_i++){var tag=scriptTags[_i];if(tag.src&&tag.src.includes(\"https://www.googletagmanager.com/gtag/js\"))return tag}return null}function fetchDynamicConfig(appFields){var _a;\nreturn tslib.__awaiter(this,void 0,void 0,function(){var appId,apiKey,request,appUrl,response,errorMessage,jsonResponse;return tslib.__generator(this,function(_b){switch(_b.label){case 0:return appId=appFields.appId,apiKey=appFields.apiKey,request={method:\"GET\",headers:new Headers({Accept:\"application/json\",\"x-goog-api-key\":apiKey})},appUrl=\"https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig\".replace(\"{app-id}\",appId),[4,fetch(appUrl,request)];case 1:response=_b.sent();if(200===\nresponse.status||304===response.status)return[3,6];errorMessage=\"\";_b.label=2;case 2:return _b.trys.push([2,4,,5]),[4,response.json()];case 3:jsonResponse=_b.sent();if(null===(_a=jsonResponse.error)||void 0===_a?0:_a.message)errorMessage=jsonResponse.error.message;return[3,5];case 4:return _b.sent(),[3,5];case 5:throw ERROR_FACTORY.create(\"config-fetch-failed\",{httpStatus:response.status,responseMessage:errorMessage});case 6:return[2,response.json()]}})})}function fetchDynamicConfigWithRetry(app,\nretryData,timeoutMillis){void 0===retryData&&(retryData=defaultRetryData);return tslib.__awaiter(this,void 0,void 0,function(){var _a$jscomp$0,appId,apiKey,measurementId,throttleMetadata,signal,_this=this;return tslib.__generator(this,function(_b){_a$jscomp$0=app.options;appId=_a$jscomp$0.appId;apiKey=_a$jscomp$0.apiKey;measurementId=_a$jscomp$0.measurementId;if(!appId)throw ERROR_FACTORY.create(\"no-app-id\");if(!apiKey){if(measurementId)return[2,{measurementId,appId}];throw ERROR_FACTORY.create(\"no-api-key\");\n}throttleMetadata=retryData.getThrottleMetadata(appId)||{backoffCount:0,throttleEndTimeMillis:Date.now()};signal=new AnalyticsAbortSignal;setTimeout(function(){return tslib.__awaiter(_this,void 0,void 0,function(){return tslib.__generator(this,function(_a){signal.abort();return[2]})})},void 0!==timeoutMillis?timeoutMillis:6E4);return[2,attemptFetchDynamicConfigWithRetry({appId,apiKey,measurementId},throttleMetadata,signal,retryData)]})})}function attemptFetchDynamicConfigWithRetry(appFields,_a,signal,\nretryData){var throttleEndTimeMillis=_a.throttleEndTimeMillis,backoffCount=_a.backoffCount;void 0===retryData&&(retryData=defaultRetryData);return tslib.__awaiter(this,void 0,void 0,function(){var appId,measurementId,e_1,response,e_2,backoffMillis,throttleMetadata;return tslib.__generator(this,function(_b){switch(_b.label){case 0:appId=appFields.appId,measurementId=appFields.measurementId,_b.label=1;case 1:return _b.trys.push([1,3,,4]),[4,setAbortableTimeout(signal,throttleEndTimeMillis)];case 2:return _b.sent(),\n[3,4];case 3:e_1=_b.sent();if(measurementId)return logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID \"+measurementId+(' provided in the \"measurementId\" field in the local Firebase config. ['+e_1.message+\"]\")),[2,{appId,measurementId}];throw e_1;case 4:return _b.trys.push([4,6,,7]),[4,fetchDynamicConfig(appFields)];case 5:return response=_b.sent(),retryData.deleteThrottleMetadata(appId),[2,response];case 6:e_2=_b.sent();e_2 instanceof\nutil.FirebaseError&&e_2.customData?(_b=Number(e_2.customData.httpStatus),_b=429===_b||500===_b||503===_b||504===_b):_b=!1;if(!_b){retryData.deleteThrottleMetadata(appId);if(measurementId)return logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID \"+measurementId+(' provided in the \"measurementId\" field in the local Firebase config. ['+e_2.message+\"]\")),[2,{appId,measurementId}];throw e_2;}backoffMillis=503===Number(e_2.customData.httpStatus)?\nutil.calculateBackoffMillis(backoffCount,retryData.intervalMillis,30):util.calculateBackoffMillis(backoffCount,retryData.intervalMillis);throttleMetadata={throttleEndTimeMillis:Date.now()+backoffMillis,backoffCount:backoffCount+1};retryData.setThrottleMetadata(appId,throttleMetadata);logger.debug(\"Calling attemptFetch again in \"+backoffMillis+\" millis\");return[2,attemptFetchDynamicConfigWithRetry(appFields,throttleMetadata,signal,retryData)];case 7:return[2]}})})}function setAbortableTimeout(signal,\nthrottleEndTimeMillis){return new Promise(function(resolve,reject){var backoffMillis=Math.max(throttleEndTimeMillis-Date.now(),0),timeout=setTimeout(resolve,backoffMillis);signal.addEventListener(function(){clearTimeout(timeout);reject(ERROR_FACTORY.create(\"fetch-throttle\",{throttleEndTimeMillis}))})})}function validateIndexedDB(){return tslib.__awaiter(this,void 0,void 0,function(){var e_1;return tslib.__generator(this,function(_a){switch(_a.label){case 0:if(util.isIndexedDBAvailable())return[3,\n1];logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\",{errorInfo:\"IndexedDB is not available in this environment.\"}).message);return[2,!1];case 1:return _a.trys.push([1,3,,4]),[4,util.validateIndexedDBOpenable()];case 2:return _a.sent(),[3,4];case 3:return e_1=_a.sent(),logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\",{errorInfo:e_1}).message),[2,!1];case 4:return[2,!0]}})})}function initializeIds(app,dynamicConfigPromisesList,measurementIdToAppId,installations,gtagCore,dataLayerName){return tslib.__awaiter(this,\nvoid 0,void 0,function(){var dynamicConfigPromise,fidPromise,_a,dynamicConfig,fid,configProperties,_b;return tslib.__generator(this,function(_c){switch(_c.label){case 0:return dynamicConfigPromise=fetchDynamicConfigWithRetry(app),dynamicConfigPromise.then(function(config){measurementIdToAppId[config.measurementId]=config.appId;app.options.measurementId&&config.measurementId!==app.options.measurementId&&logger.warn(\"The measurement ID in the local Firebase config (\"+app.options.measurementId+\") does not match the measurement ID fetched from the server (\"+\n(config.measurementId+\"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.\"))}).catch(function(e){return logger.error(e)}),dynamicConfigPromisesList.push(dynamicConfigPromise),fidPromise=validateIndexedDB().then(function(envIsValid){if(envIsValid)return installations.getId()}),[4,Promise.all([dynamicConfigPromise,fidPromise])];case 1:return _a=_c.sent(),dynamicConfig=_a[0],fid=_a[1],\nfindGtagScriptOnPage()||insertScriptTag(dataLayerName,dynamicConfig.measurementId),gtagCore(\"js\",new Date),configProperties=(_b={},_b.origin=\"firebase\",_b.update=!0,_b),null!=fid&&(configProperties.firebase_id=fid),gtagCore(GtagCommand.CONFIG,dynamicConfig.measurementId,configProperties),[2,dynamicConfig.measurementId]}})})}function settings(options){if(globalInitDone)throw ERROR_FACTORY.create(\"already-initialized\");options.dataLayerName&&(dataLayerName=options.dataLayerName);options.gtagName&&(gtagName=\noptions.gtagName)}function warnOnBrowserContextMismatch(){var mismatchedEnvMessages=[];util.isBrowserExtension()&&mismatchedEnvMessages.push(\"This is a browser extension environment.\");util.areCookiesEnabled()||mismatchedEnvMessages.push(\"Cookies are not available.\");0<mismatchedEnvMessages.length&&(mismatchedEnvMessages=mismatchedEnvMessages.map(function(message,index){return\"(\"+(index+1)+\") \"+message}).join(\" \"),mismatchedEnvMessages=ERROR_FACTORY.create(\"invalid-analytics-context\",{errorInfo:mismatchedEnvMessages}),\nlogger.warn(mismatchedEnvMessages.message))}function factory(app,installations){warnOnBrowserContextMismatch();var appId=app.options.appId;if(!appId)throw ERROR_FACTORY.create(\"no-app-id\");if(!app.options.apiKey)if(app.options.measurementId)logger.warn('The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+app.options.measurementId+' provided in the \"measurementId\" field in the local Firebase config.');\nelse throw ERROR_FACTORY.create(\"no-api-key\");if(null!=initializationPromisesMap[appId])throw ERROR_FACTORY.create(\"already-exists\",{id:appId});if(!globalInitDone){getOrCreateDataLayer(dataLayerName);var _a=wrapOrCreateGtag(initializationPromisesMap,dynamicConfigPromisesList,measurementIdToAppId,dataLayerName,gtagName),gtagCore=_a.gtagCore;wrappedGtagFunction=_a.wrappedGtag;gtagCoreFunction=gtagCore;globalInitDone=!0}initializationPromisesMap[appId]=initializeIds(app,dynamicConfigPromisesList,measurementIdToAppId,\ninstallations,gtagCoreFunction,dataLayerName);return{app,logEvent:function(eventName,eventParams,options){logEvent(wrappedGtagFunction,initializationPromisesMap[appId],eventName,eventParams,options).catch(function(e){return logger.error(e)})},setCurrentScreen:function(screenName,options){setCurrentScreen(wrappedGtagFunction,initializationPromisesMap[appId],screenName,options).catch(function(e){return logger.error(e)})},setUserId:function(id,options){setUserId(wrappedGtagFunction,initializationPromisesMap[appId],\nid,options).catch(function(e){return logger.error(e)})},setUserProperties:function(properties,options){setUserProperties(wrappedGtagFunction,initializationPromisesMap[appId],properties,options).catch(function(e){return logger.error(e)})},setAnalyticsCollectionEnabled:function(enabled){setAnalyticsCollectionEnabled(initializationPromisesMap[appId],enabled).catch(function(e){return logger.error(e)})},INTERNAL:{delete:function(){delete initializationPromisesMap[appId];return Promise.resolve()}}}}function registerAnalytics(instance){instance.INTERNAL.registerComponent((new component.Component(\"analytics\",\nfunction(container){var app=container.getProvider(\"app\").getImmediate();container=container.getProvider(\"installations\").getImmediate();return factory(app,container)},\"PUBLIC\")).setServiceProps({settings,EventName,isSupported}));instance.INTERNAL.registerComponent(new component.Component(\"analytics-internal\",function(container){try{return{logEvent:container.getProvider(\"analytics\").getImmediate().logEvent}}catch(e){throw ERROR_FACTORY.create(\"interop-component-reg-failed\",{reason:e});}},\"PRIVATE\"));\ninstance.registerVersion(\"@firebase/analytics\",\"0.6.16\")}function isSupported(){return tslib.__awaiter(this,void 0,void 0,function(){var isDBOpenable;return tslib.__generator(this,function(_a){switch(_a.label){case 0:if(util.isBrowserExtension()||!util.areCookiesEnabled()||!util.isIndexedDBAvailable())return[2,!1];_a.label=1;case 1:return _a.trys.push([1,3,,4]),[4,util.validateIndexedDBOpenable()];case 2:return isDBOpenable=_a.sent(),[2,isDBOpenable];case 3:return _a.sent(),[2,!1];case 4:return[2]}})})}\nObject.defineProperty(exports,\"__esModule\",{value:!0});var tslib=require(\"module$node_modules$tslib$tslib\");module=require(\"module$node_modules$$firebase$app$dist$index_esm\");require(\"module$node_modules$$firebase$installations$dist$index_cjs\");global=require(\"module$node_modules$$firebase$logger$dist$index_cjs\");var util=require(\"module$node_modules$$firebase$util$dist$index_esm\"),component=require(\"module$node_modules$$firebase$component$dist$index_esm\");require=module&&\"object\"===typeof module&&\n\"default\"in module?module:{\"default\":module};var GtagCommand;(function(GtagCommand){GtagCommand.EVENT=\"event\";GtagCommand.SET=\"set\";GtagCommand.CONFIG=\"config\"})(GtagCommand||(GtagCommand={}));var EventName;(function(EventName){EventName.ADD_SHIPPING_INFO=\"add_shipping_info\";EventName.ADD_PAYMENT_INFO=\"add_payment_info\";EventName.ADD_TO_CART=\"add_to_cart\";EventName.ADD_TO_WISHLIST=\"add_to_wishlist\";EventName.BEGIN_CHECKOUT=\"begin_checkout\";EventName.CHECKOUT_PROGRESS=\"checkout_progress\";EventName.EXCEPTION=\n\"exception\";EventName.GENERATE_LEAD=\"generate_lead\";EventName.LOGIN=\"login\";EventName.PAGE_VIEW=\"page_view\";EventName.PURCHASE=\"purchase\";EventName.REFUND=\"refund\";EventName.REMOVE_FROM_CART=\"remove_from_cart\";EventName.SCREEN_VIEW=\"screen_view\";EventName.SEARCH=\"search\";EventName.SELECT_CONTENT=\"select_content\";EventName.SELECT_ITEM=\"select_item\";EventName.SELECT_PROMOTION=\"select_promotion\";EventName.SET_CHECKOUT_OPTION=\"set_checkout_option\";EventName.SHARE=\"share\";EventName.SIGN_UP=\"sign_up\";EventName.TIMING_COMPLETE=\n\"timing_complete\";EventName.VIEW_CART=\"view_cart\";EventName.VIEW_ITEM=\"view_item\";EventName.VIEW_ITEM_LIST=\"view_item_list\";EventName.VIEW_PROMOTION=\"view_promotion\";EventName.VIEW_SEARCH_RESULTS=\"view_search_results\"})(EventName||(EventName={}));var logger=new global.Logger(\"@firebase/analytics\"),_a$jscomp$1;global=(_a$jscomp$1={},_a$jscomp$1[\"already-exists\"]=\"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.\",\n_a$jscomp$1[\"already-initialized\"]=\"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.\",_a$jscomp$1[\"interop-component-reg-failed\"]=\"Firebase Analytics Interop Component failed to instantiate: {$reason}\",_a$jscomp$1[\"invalid-analytics-context\"]=\"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}\",\n_a$jscomp$1[\"indexeddb-unavailable\"]=\"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}\",_a$jscomp$1[\"fetch-throttle\"]=\"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.\",_a$jscomp$1[\"config-fetch-failed\"]=\"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}\",\n_a$jscomp$1[\"no-api-key\"]='The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',_a$jscomp$1[\"no-app-id\"]='The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',_a$jscomp$1);var ERROR_FACTORY=new util.ErrorFactory(\"analytics\",\"Analytics\",global),defaultRetryData=new (function(){function RetryData(throttleMetadata,intervalMillis){void 0===throttleMetadata&&(throttleMetadata=\n{});void 0===intervalMillis&&(intervalMillis=1E3);this.throttleMetadata=throttleMetadata;this.intervalMillis=intervalMillis}RetryData.prototype.getThrottleMetadata=function(appId){return this.throttleMetadata[appId]};RetryData.prototype.setThrottleMetadata=function(appId,metadata){this.throttleMetadata[appId]=metadata};RetryData.prototype.deleteThrottleMetadata=function(appId){delete this.throttleMetadata[appId]};return RetryData}()),AnalyticsAbortSignal=function(){function AnalyticsAbortSignal(){this.listeners=\n[]}AnalyticsAbortSignal.prototype.addEventListener=function(listener){this.listeners.push(listener)};AnalyticsAbortSignal.prototype.abort=function(){this.listeners.forEach(function(listener){return listener()})};return AnalyticsAbortSignal}(),initializationPromisesMap={},dynamicConfigPromisesList=[],measurementIdToAppId={},dataLayerName=\"dataLayer\",gtagName=\"gtag\",gtagCoreFunction,wrappedGtagFunction,globalInitDone=!1;registerAnalytics(require[\"default\"]);exports.factory=factory;exports.getGlobalVars=\nfunction(){return{initializationPromisesMap,dynamicConfigPromisesList}};exports.registerAnalytics=registerAnalytics;exports.resetGlobalVars=function(newGlobalInitDone,newInitializationPromisesMap,newDynamicPromises){void 0===newGlobalInitDone&&(newGlobalInitDone=!1);void 0===newInitializationPromisesMap&&(newInitializationPromisesMap={});void 0===newDynamicPromises&&(newDynamicPromises=[]);globalInitDone=newGlobalInitDone;initializationPromisesMap=newInitializationPromisesMap;dynamicConfigPromisesList=\nnewDynamicPromises;dataLayerName=\"dataLayer\";gtagName=\"gtag\"};exports.settings=settings}","~:source","shadow$provide[\"module$node_modules$$firebase$analytics$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar firebase = require('@firebase/app');\nrequire('@firebase/installations');\nvar logger$1 = require('@firebase/logger');\nvar util = require('@firebase/util');\nvar component = require('@firebase/component');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Key to attach FID to in gtag params.\r\nvar GA_FID_KEY = 'firebase_id';\r\nvar ORIGIN_KEY = 'origin';\r\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\r\nvar GtagCommand;\r\n(function (GtagCommand) {\r\n    GtagCommand[\"EVENT\"] = \"event\";\r\n    GtagCommand[\"SET\"] = \"set\";\r\n    GtagCommand[\"CONFIG\"] = \"config\";\r\n})(GtagCommand || (GtagCommand = {}));\r\n/**\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n *\r\n * @public\r\n */\r\nvar EventName;\r\n(function (EventName) {\r\n    EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\r\n    EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\r\n    EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\r\n    EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\r\n    EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\r\n    /**\r\n     * @deprecated\r\n     * This event name is deprecated and is unsupported in updated\r\n     * Enhanced Ecommerce reports.\r\n     */\r\n    EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\r\n    EventName[\"EXCEPTION\"] = \"exception\";\r\n    EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\r\n    EventName[\"LOGIN\"] = \"login\";\r\n    EventName[\"PAGE_VIEW\"] = \"page_view\";\r\n    EventName[\"PURCHASE\"] = \"purchase\";\r\n    EventName[\"REFUND\"] = \"refund\";\r\n    EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\r\n    EventName[\"SCREEN_VIEW\"] = \"screen_view\";\r\n    EventName[\"SEARCH\"] = \"search\";\r\n    EventName[\"SELECT_CONTENT\"] = \"select_content\";\r\n    EventName[\"SELECT_ITEM\"] = \"select_item\";\r\n    EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\r\n    /** @deprecated */\r\n    EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\r\n    EventName[\"SHARE\"] = \"share\";\r\n    EventName[\"SIGN_UP\"] = \"sign_up\";\r\n    EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\r\n    EventName[\"VIEW_CART\"] = \"view_cart\";\r\n    EventName[\"VIEW_ITEM\"] = \"view_item\";\r\n    EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\r\n    EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\r\n    EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\r\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var measurementId, params;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\r\n                    return [2 /*return*/];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    params = tslib.__assign(tslib.__assign({}, eventParams), { 'send_to': measurementId });\r\n                    gtagFunction(GtagCommand.EVENT, eventName, params);\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'screen_name': screenName\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'user_id': id });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_id': id\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var flatProperties, _i, _a, key, measurementId;\r\n        return tslib.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    flatProperties = {};\r\n                    for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\r\n                        key = _a[_i];\r\n                        // use dot notation for merge behavior in gtag.js\r\n                        flatProperties[\"user_properties.\" + key] = properties[key];\r\n                    }\r\n                    gtagFunction(GtagCommand.SET, flatProperties);\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _b.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_properties': properties\r\n                    });\r\n                    _b.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, initializationPromise];\r\n                case 1:\r\n                    measurementId = _a.sent();\r\n                    window[\"ga-disable-\" + measurementId] = !enabled;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logger = new logger$1.Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName, measurementId) {\r\n    var script = document.createElement('script');\r\n    script.src = GTAG_URL + \"?l=\" + dataLayerName + \"&id=\" + measurementId;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    var dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    correspondingAppId = measurementIdToAppId[measurementId];\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 7, , 8]);\r\n                    if (!correspondingAppId) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 4:\r\n                    dynamicConfigResults = _a.sent();\r\n                    foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });\r\n                    if (!foundConfig) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\r\n                case 5:\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6: return [3 /*break*/, 8];\r\n                case 7:\r\n                    e_1 = _a.sent();\r\n                    logger.error(e_1);\r\n                    return [3 /*break*/, 8];\r\n                case 8:\r\n                    gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    _a.trys.push([0, 4, , 5]);\r\n                    initializationPromisesToWaitFor = [];\r\n                    if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\r\n                    gaSendToList = gtagParams['send_to'];\r\n                    // Make it an array if is isn't, so it can be dealt with the same way.\r\n                    if (!Array.isArray(gaSendToList)) {\r\n                        gaSendToList = [gaSendToList];\r\n                    }\r\n                    return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 1:\r\n                    dynamicConfigResults = _a.sent();\r\n                    _loop_1 = function (sendToId) {\r\n                        // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                        var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });\r\n                        var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                        if (initializationPromise) {\r\n                            initializationPromisesToWaitFor.push(initializationPromise);\r\n                        }\r\n                        else {\r\n                            // Found an item in 'send_to' that is not associated\r\n                            // directly with an FID, possibly a group.  Empty this array,\r\n                            // exit the loop early, and let it get populated below.\r\n                            initializationPromisesToWaitFor = [];\r\n                            return \"break\";\r\n                        }\r\n                    };\r\n                    for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\r\n                        sendToId = gaSendToList_1[_i];\r\n                        state_1 = _loop_1(sendToId);\r\n                        if (state_1 === \"break\")\r\n                            break;\r\n                    }\r\n                    _a.label = 2;\r\n                case 2:\r\n                    // This will be unpopulated if there was no 'send_to' field , or\r\n                    // if not all entries in the 'send_to' field could be mapped to\r\n                    // a FID. In these cases, wait on all pending initialization promises.\r\n                    if (initializationPromisesToWaitFor.length === 0) {\r\n                        initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n                    }\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\r\n                case 3:\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    _a.sent();\r\n                    // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n                    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    e_2 = _a.sent();\r\n                    logger.error(e_2);\r\n                    return [3 /*break*/, 5];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    function gtagWrapper(command, idOrNameOrParams, gtagParams) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var e_3;\r\n            return tslib.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 6, , 7]);\r\n                        if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\r\n                        // If EVENT, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\r\n                    case 1:\r\n                        // If EVENT, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 2:\r\n                        if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\r\n                    case 3:\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // If SET, second arg must be params.\r\n                        gtagCore(GtagCommand.SET, idOrNameOrParams);\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        e_3 = _a.sent();\r\n                        logger.error(e_3);\r\n                        return [3 /*break*/, 7];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    var gtagCore = function () {\r\n        var _args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            _args[_i] = arguments[_i];\r\n        }\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore: gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\r\nfunction findGtagScriptOnPage() {\r\n    var scriptTags = window.document.getElementsByTagName('script');\r\n    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\r\n        var tag = _a[_i];\r\n        if (tag.src && tag.src.includes(GTAG_URL)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nvar ERRORS = (_a = {},\r\n    _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    _a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    _a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    _a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    _a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    _a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    _a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    _a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    _a);\r\nvar ERROR_FACTORY = new util.ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nvar LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nvar BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nvar RetryData = /** @class */ (function () {\r\n    function RetryData(throttleMetadata, intervalMillis) {\r\n        if (throttleMetadata === void 0) { throttleMetadata = {}; }\r\n        if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    RetryData.prototype.getThrottleMetadata = function (appId) {\r\n        return this.throttleMetadata[appId];\r\n    };\r\n    RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    };\r\n    RetryData.prototype.deleteThrottleMetadata = function (appId) {\r\n        delete this.throttleMetadata[appId];\r\n    };\r\n    return RetryData;\r\n}());\r\nvar defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\r\n        return tslib.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, apiKey = appFields.apiKey;\r\n                    request = {\r\n                        method: 'GET',\r\n                        headers: getHeaders(apiKey)\r\n                    };\r\n                    appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n                    return [4 /*yield*/, fetch(appUrl, request)];\r\n                case 1:\r\n                    response = _b.sent();\r\n                    if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\r\n                    errorMessage = '';\r\n                    _b.label = 2;\r\n                case 2:\r\n                    _b.trys.push([2, 4, , 5]);\r\n                    return [4 /*yield*/, response.json()];\r\n                case 3:\r\n                    jsonResponse = (_b.sent());\r\n                    if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                        errorMessage = jsonResponse.error.message;\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 5: throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\r\n                    httpStatus: response.status,\r\n                    responseMessage: errorMessage\r\n                });\r\n                case 6: return [2 /*return*/, response.json()];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData, timeoutMillis) {\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var _a, appId, apiKey, measurementId, throttleMetadata, signal;\r\n        var _this = this;\r\n        return tslib.__generator(this, function (_b) {\r\n            _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\r\n            if (!appId) {\r\n                throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n            }\r\n            if (!apiKey) {\r\n                if (measurementId) {\r\n                    return [2 /*return*/, {\r\n                            measurementId: measurementId,\r\n                            appId: appId\r\n                        }];\r\n                }\r\n                throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n            }\r\n            throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n                backoffCount: 0,\r\n                throttleEndTimeMillis: Date.now()\r\n            };\r\n            signal = new AnalyticsAbortSignal();\r\n            setTimeout(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                return tslib.__generator(this, function (_a) {\r\n                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n                    signal.abort();\r\n                    return [2 /*return*/];\r\n                });\r\n            }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n            return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];\r\n        });\r\n    });\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\r\n) {\r\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\r\n        return tslib.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, measurementId = appFields.measurementId;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\r\n                case 2:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _b.sent();\r\n                    if (measurementId) {\r\n                        logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" +\r\n                            (\" Falling back to the measurement ID \" + measurementId) +\r\n                            (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\r\n                        return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                    }\r\n                    throw e_1;\r\n                case 4:\r\n                    _b.trys.push([4, 6, , 7]);\r\n                    return [4 /*yield*/, fetchDynamicConfig(appFields)];\r\n                case 5:\r\n                    response = _b.sent();\r\n                    // Note the SDK only clears throttle state if response is success or non-retriable.\r\n                    retryData.deleteThrottleMetadata(appId);\r\n                    return [2 /*return*/, response];\r\n                case 6:\r\n                    e_2 = _b.sent();\r\n                    if (!isRetriableError(e_2)) {\r\n                        retryData.deleteThrottleMetadata(appId);\r\n                        if (measurementId) {\r\n                            logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" +\r\n                                (\" Falling back to the measurement ID \" + measurementId) +\r\n                                (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\r\n                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                        }\r\n                        else {\r\n                            throw e_2;\r\n                        }\r\n                    }\r\n                    backoffMillis = Number(e_2.customData.httpStatus) === 503\r\n                        ? util.calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n                        : util.calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n                    throttleMetadata = {\r\n                        throttleEndTimeMillis: Date.now() + backoffMillis,\r\n                        backoffCount: backoffCount + 1\r\n                    };\r\n                    // Persists state.\r\n                    retryData.setThrottleMetadata(appId, throttleMetadata);\r\n                    logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\r\n                    return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise(function (resolve, reject) {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        var timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(function () {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis: throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof util.FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    var httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nvar AnalyticsAbortSignal = /** @class */ (function () {\r\n    function AnalyticsAbortSignal() {\r\n        this.listeners = [];\r\n    }\r\n    AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    AnalyticsAbortSignal.prototype.abort = function () {\r\n        this.listeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    return AnalyticsAbortSignal;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateIndexedDB() {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var e_1;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!!util.isIndexedDBAvailable()) return [3 /*break*/, 1];\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: 'IndexedDB is not available in this environment.'\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, util.validateIndexedDBOpenable()];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _a.sent();\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: e_1\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/, true];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\r\n        var _b;\r\n        return tslib.__generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n                    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n                    dynamicConfigPromise\r\n                        .then(function (config) {\r\n                        measurementIdToAppId[config.measurementId] = config.appId;\r\n                        if (app.options.measurementId &&\r\n                            config.measurementId !== app.options.measurementId) {\r\n                            logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" +\r\n                                (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") +\r\n                                \" To ensure analytics events are always sent to the correct Analytics property,\" +\r\n                                \" update the\" +\r\n                                \" measurement ID field in the local config or remove it from the local config.\");\r\n                        }\r\n                    })\r\n                        .catch(function (e) { return logger.error(e); });\r\n                    // Add to list to track state of all dynamic config promises.\r\n                    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n                    fidPromise = validateIndexedDB().then(function (envIsValid) {\r\n                        if (envIsValid) {\r\n                            return installations.getId();\r\n                        }\r\n                        else {\r\n                            return undefined;\r\n                        }\r\n                    });\r\n                    return [4 /*yield*/, Promise.all([\r\n                            dynamicConfigPromise,\r\n                            fidPromise\r\n                        ])];\r\n                case 1:\r\n                    _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\r\n                    // Detect if user has already put the gtag <script> tag on this page.\r\n                    if (!findGtagScriptOnPage()) {\r\n                        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\r\n                    }\r\n                    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n                    // but since it is idempotent, we can call it multiple times.\r\n                    // We keep it together with other initialization logic for better code structure.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    gtagCore('js', new Date());\r\n                    configProperties = (_b = {},\r\n                        // guard against developers accidentally setting properties with prefix `firebase_`\r\n                        _b[ORIGIN_KEY] = 'firebase',\r\n                        _b.update = true,\r\n                        _b);\r\n                    if (fid != null) {\r\n                        configProperties[GA_FID_KEY] = fid;\r\n                    }\r\n                    // It should be the first config command called on this GA-ID\r\n                    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n                    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\r\n                    // `configProperties`.\r\n                    gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\r\n                    return [2 /*return*/, dynamicConfig.measurementId];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nvar initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nvar dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nvar measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nvar dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nvar gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nvar gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nvar wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nvar globalInitDone = false;\r\n/**\r\n * For testing\r\n */\r\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\r\n    if (newGlobalInitDone === void 0) { newGlobalInitDone = false; }\r\n    if (newInitializationPromisesMap === void 0) { newInitializationPromisesMap = {}; }\r\n    if (newDynamicPromises === void 0) { newDynamicPromises = []; }\r\n    globalInitDone = newGlobalInitDone;\r\n    initializationPromisesMap = newInitializationPromisesMap;\r\n    dynamicConfigPromisesList = newDynamicPromises;\r\n    dataLayerName = 'dataLayer';\r\n    gtagName = 'gtag';\r\n}\r\n/**\r\n * For testing\r\n */\r\nfunction getGlobalVars() {\r\n    return {\r\n        initializationPromisesMap: initializationPromisesMap,\r\n        dynamicConfigPromisesList: dynamicConfigPromisesList\r\n    };\r\n}\r\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    var mismatchedEnvMessages = [];\r\n    if (util.isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!util.areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        var details = mismatchedEnvMessages\r\n            .map(function (message, index) { return \"(\" + (index + 1) + \") \" + message; })\r\n            .join(' ');\r\n        var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\nfunction factory(app, installations) {\r\n    warnOnBrowserContextMismatch();\r\n    var appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" +\r\n                (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) +\r\n                \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        getOrCreateDataLayer(dataLayerName);\r\n        var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);\r\n    var analyticsInstance = {\r\n        app: app,\r\n        // Public methods return void for API simplicity and to better match gtag,\r\n        // while internal implementations return promises.\r\n        logEvent: function (eventName, eventParams, options) {\r\n            logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setCurrentScreen: function (screenName, options) {\r\n            setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserId: function (id, options) {\r\n            setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserProperties: function (properties, options) {\r\n            setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setAnalyticsCollectionEnabled: function (enabled) {\r\n            setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) { return logger.error(e); });\r\n        },\r\n        INTERNAL: {\r\n            delete: function () {\r\n                delete initializationPromisesMap[appId];\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    };\r\n    return analyticsInstance;\r\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.16\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nvar ANALYTICS_TYPE = 'analytics';\r\nfunction registerAnalytics(instance) {\r\n    instance.INTERNAL.registerComponent(new component.Component(ANALYTICS_TYPE, function (container) {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var installations = container\r\n            .getProvider('installations')\r\n            .getImmediate();\r\n        return factory(app, installations);\r\n    }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\r\n        settings: settings,\r\n        EventName: EventName,\r\n        isSupported: isSupported\r\n    }));\r\n    instance.INTERNAL.registerComponent(new component.Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n    instance.registerVersion(name, version);\r\n    function internalFactory(container) {\r\n        try {\r\n            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: analytics.logEvent\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics(firebase__default['default']);\r\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\r\nfunction isSupported() {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var isDBOpenable;\r\n        return tslib.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (util.isBrowserExtension()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!util.areCookiesEnabled()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!util.isIndexedDBAvailable()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, util.validateIndexedDBOpenable()];\r\n                case 2:\r\n                    isDBOpenable = _a.sent();\r\n                    return [2 /*return*/, isDBOpenable];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\nexports.factory = factory;\nexports.getGlobalVars = getGlobalVars;\nexports.registerAnalytics = registerAnalytics;\nexports.resetGlobalVars = resetGlobalVars;\nexports.settings = settings;\n//# sourceMappingURL=index.cjs.js.map\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$firebase$util$dist$index_esm","~$module$node_modules$tslib$tslib","~$shadow.js","~$module$node_modules$$firebase$installations$dist$index_cjs","~$module$node_modules$$firebase$app$dist$index_esm","~$module$node_modules$$firebase$component$dist$index_esm","~$module$node_modules$$firebase$logger$dist$index_cjs"]],"~:properties",["^5",["setThrottleMetadata","initializationPromisesMap","factory","wrappedGtag","dynamicConfigPromisesList","delete","registerAnalytics","settings","setCurrentScreen","logEvent","httpStatus","deleteThrottleMetadata","throttleMetadata","label","method","errorInfo","__esModule","intervalMillis","gtagCore","setUserProperties","id","update","src","async","EventName","value","setAnalyticsCollectionEnabled","apiKey","responseMessage","measurementId","resetGlobalVars","setUserId","appId","app","INTERNAL","throttleEndTimeMillis","isSupported","getThrottleMetadata","reason","abort","Accept","addEventListener","listeners","getGlobalVars","backoffCount","headers"]],"~:compiled-at",1627830407990,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$firebase$analytics$dist$index_cjs.js\",\n\"lineCount\":45,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@firebase/analytics/dist/index.cjs.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$firebase$analytics$dist$index_cjs\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\nObject.defineProperty(exports, '__esModule', { value: true });\\n\\nvar tslib = require('tslib');\\nvar firebase = require('@firebase/app');\\nrequire('@firebase/installations');\\nvar logger$1 = require('@firebase/logger');\\nvar util = require('@firebase/util');\\nvar component = require('@firebase/component');\\n\\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\\n\\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n// Key to attach FID to in gtag params.\\r\\nvar GA_FID_KEY = 'firebase_id';\\r\\nvar ORIGIN_KEY = 'origin';\\r\\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\\r\\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\\r\\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\\r\\nvar GtagCommand;\\r\\n(function (GtagCommand) {\\r\\n    GtagCommand[\\\"EVENT\\\"] = \\\"event\\\";\\r\\n    GtagCommand[\\\"SET\\\"] = \\\"set\\\";\\r\\n    GtagCommand[\\\"CONFIG\\\"] = \\\"config\\\";\\r\\n})(GtagCommand || (GtagCommand = {}));\\r\\n/**\\r\\n * Officially recommended event names for gtag.js\\r\\n * Any other string is also allowed.\\r\\n *\\r\\n * @public\\r\\n */\\r\\nvar EventName;\\r\\n(function (EventName) {\\r\\n    EventName[\\\"ADD_SHIPPING_INFO\\\"] = \\\"add_shipping_info\\\";\\r\\n    EventName[\\\"ADD_PAYMENT_INFO\\\"] = \\\"add_payment_info\\\";\\r\\n    EventName[\\\"ADD_TO_CART\\\"] = \\\"add_to_cart\\\";\\r\\n    EventName[\\\"ADD_TO_WISHLIST\\\"] = \\\"add_to_wishlist\\\";\\r\\n    EventName[\\\"BEGIN_CHECKOUT\\\"] = \\\"begin_checkout\\\";\\r\\n    /**\\r\\n     * @deprecated\\r\\n     * This event name is deprecated and is unsupported in updated\\r\\n     * Enhanced Ecommerce reports.\\r\\n     */\\r\\n    EventName[\\\"CHECKOUT_PROGRESS\\\"] = \\\"checkout_progress\\\";\\r\\n    EventName[\\\"EXCEPTION\\\"] = \\\"exception\\\";\\r\\n    EventName[\\\"GENERATE_LEAD\\\"] = \\\"generate_lead\\\";\\r\\n    EventName[\\\"LOGIN\\\"] = \\\"login\\\";\\r\\n    EventName[\\\"PAGE_VIEW\\\"] = \\\"page_view\\\";\\r\\n    EventName[\\\"PURCHASE\\\"] = \\\"purchase\\\";\\r\\n    EventName[\\\"REFUND\\\"] = \\\"refund\\\";\\r\\n    EventName[\\\"REMOVE_FROM_CART\\\"] = \\\"remove_from_cart\\\";\\r\\n    EventName[\\\"SCREEN_VIEW\\\"] = \\\"screen_view\\\";\\r\\n    EventName[\\\"SEARCH\\\"] = \\\"search\\\";\\r\\n    EventName[\\\"SELECT_CONTENT\\\"] = \\\"select_content\\\";\\r\\n    EventName[\\\"SELECT_ITEM\\\"] = \\\"select_item\\\";\\r\\n    EventName[\\\"SELECT_PROMOTION\\\"] = \\\"select_promotion\\\";\\r\\n    /** @deprecated */\\r\\n    EventName[\\\"SET_CHECKOUT_OPTION\\\"] = \\\"set_checkout_option\\\";\\r\\n    EventName[\\\"SHARE\\\"] = \\\"share\\\";\\r\\n    EventName[\\\"SIGN_UP\\\"] = \\\"sign_up\\\";\\r\\n    EventName[\\\"TIMING_COMPLETE\\\"] = \\\"timing_complete\\\";\\r\\n    EventName[\\\"VIEW_CART\\\"] = \\\"view_cart\\\";\\r\\n    EventName[\\\"VIEW_ITEM\\\"] = \\\"view_item\\\";\\r\\n    EventName[\\\"VIEW_ITEM_LIST\\\"] = \\\"view_item_list\\\";\\r\\n    EventName[\\\"VIEW_PROMOTION\\\"] = \\\"view_promotion\\\";\\r\\n    EventName[\\\"VIEW_SEARCH_RESULTS\\\"] = \\\"view_search_results\\\";\\r\\n})(EventName || (EventName = {}));\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Logs an analytics event through the Firebase SDK.\\r\\n *\\r\\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\\r\\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\\r\\n * @param eventParams Analytics event parameters.\\r\\n */\\r\\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var measurementId, params;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    if (!(options && options.global)) return [3 /*break*/, 1];\\r\\n                    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\\r\\n                    return [2 /*return*/];\\r\\n                case 1: return [4 /*yield*/, initializationPromise];\\r\\n                case 2:\\r\\n                    measurementId = _a.sent();\\r\\n                    params = tslib.__assign(tslib.__assign({}, eventParams), { 'send_to': measurementId });\\r\\n                    gtagFunction(GtagCommand.EVENT, eventName, params);\\r\\n                    _a.label = 3;\\r\\n                case 3: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Set screen_name parameter for this Google Analytics ID.\\r\\n *\\r\\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\\r\\n * @param screenName Screen name string to set.\\r\\n */\\r\\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var measurementId;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    if (!(options && options.global)) return [3 /*break*/, 1];\\r\\n                    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\\r\\n                    return [2 /*return*/, Promise.resolve()];\\r\\n                case 1: return [4 /*yield*/, initializationPromise];\\r\\n                case 2:\\r\\n                    measurementId = _a.sent();\\r\\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\\r\\n                        update: true,\\r\\n                        'screen_name': screenName\\r\\n                    });\\r\\n                    _a.label = 3;\\r\\n                case 3: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Set user_id parameter for this Google Analytics ID.\\r\\n *\\r\\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\\r\\n * @param id User ID string to set\\r\\n */\\r\\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var measurementId;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    if (!(options && options.global)) return [3 /*break*/, 1];\\r\\n                    gtagFunction(GtagCommand.SET, { 'user_id': id });\\r\\n                    return [2 /*return*/, Promise.resolve()];\\r\\n                case 1: return [4 /*yield*/, initializationPromise];\\r\\n                case 2:\\r\\n                    measurementId = _a.sent();\\r\\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\\r\\n                        update: true,\\r\\n                        'user_id': id\\r\\n                    });\\r\\n                    _a.label = 3;\\r\\n                case 3: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Set all other user properties other than user_id and screen_name.\\r\\n *\\r\\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\\r\\n * @param properties Map of user properties to set\\r\\n */\\r\\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var flatProperties, _i, _a, key, measurementId;\\r\\n        return tslib.__generator(this, function (_b) {\\r\\n            switch (_b.label) {\\r\\n                case 0:\\r\\n                    if (!(options && options.global)) return [3 /*break*/, 1];\\r\\n                    flatProperties = {};\\r\\n                    for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\\r\\n                        key = _a[_i];\\r\\n                        // use dot notation for merge behavior in gtag.js\\r\\n                        flatProperties[\\\"user_properties.\\\" + key] = properties[key];\\r\\n                    }\\r\\n                    gtagFunction(GtagCommand.SET, flatProperties);\\r\\n                    return [2 /*return*/, Promise.resolve()];\\r\\n                case 1: return [4 /*yield*/, initializationPromise];\\r\\n                case 2:\\r\\n                    measurementId = _b.sent();\\r\\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\\r\\n                        update: true,\\r\\n                        'user_properties': properties\\r\\n                    });\\r\\n                    _b.label = 3;\\r\\n                case 3: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Set whether collection is enabled for this ID.\\r\\n *\\r\\n * @param enabled If true, collection is enabled for this ID.\\r\\n */\\r\\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var measurementId;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0: return [4 /*yield*/, initializationPromise];\\r\\n                case 1:\\r\\n                    measurementId = _a.sent();\\r\\n                    window[\\\"ga-disable-\\\" + measurementId] = !enabled;\\r\\n                    return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar logger = new logger$1.Logger('@firebase/analytics');\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Inserts gtag script tag into the page to asynchronously download gtag.\\r\\n * @param dataLayerName Name of datalayer (most often the default, \\\"_dataLayer\\\").\\r\\n */\\r\\nfunction insertScriptTag(dataLayerName, measurementId) {\\r\\n    var script = document.createElement('script');\\r\\n    script.src = GTAG_URL + \\\"?l=\\\" + dataLayerName + \\\"&id=\\\" + measurementId;\\r\\n    script.async = true;\\r\\n    document.head.appendChild(script);\\r\\n}\\r\\n/**\\r\\n * Get reference to, or create, global datalayer.\\r\\n * @param dataLayerName Name of datalayer (most often the default, \\\"_dataLayer\\\").\\r\\n */\\r\\nfunction getOrCreateDataLayer(dataLayerName) {\\r\\n    // Check for existing dataLayer and create if needed.\\r\\n    var dataLayer = [];\\r\\n    if (Array.isArray(window[dataLayerName])) {\\r\\n        dataLayer = window[dataLayerName];\\r\\n    }\\r\\n    else {\\r\\n        window[dataLayerName] = dataLayer;\\r\\n    }\\r\\n    return dataLayer;\\r\\n}\\r\\n/**\\r\\n * Wrapped gtag logic when gtag is called with 'config' command.\\r\\n *\\r\\n * @param gtagCore Basic gtag function that just appends to dataLayer.\\r\\n * @param initializationPromisesMap Map of appIds to their initialization promises.\\r\\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\\r\\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\\r\\n * @param measurementId GA Measurement ID to set config for.\\r\\n * @param gtagParams Gtag config params to set.\\r\\n */\\r\\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    correspondingAppId = measurementIdToAppId[measurementId];\\r\\n                    _a.label = 1;\\r\\n                case 1:\\r\\n                    _a.trys.push([1, 7, , 8]);\\r\\n                    if (!correspondingAppId) return [3 /*break*/, 3];\\r\\n                    return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\\r\\n                case 2:\\r\\n                    _a.sent();\\r\\n                    return [3 /*break*/, 6];\\r\\n                case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\\r\\n                case 4:\\r\\n                    dynamicConfigResults = _a.sent();\\r\\n                    foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });\\r\\n                    if (!foundConfig) return [3 /*break*/, 6];\\r\\n                    return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\\r\\n                case 5:\\r\\n                    _a.sent();\\r\\n                    _a.label = 6;\\r\\n                case 6: return [3 /*break*/, 8];\\r\\n                case 7:\\r\\n                    e_1 = _a.sent();\\r\\n                    logger.error(e_1);\\r\\n                    return [3 /*break*/, 8];\\r\\n                case 8:\\r\\n                    gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\\r\\n                    return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Wrapped gtag logic when gtag is called with 'event' command.\\r\\n *\\r\\n * @param gtagCore Basic gtag function that just appends to dataLayer.\\r\\n * @param initializationPromisesMap Map of appIds to their initialization promises.\\r\\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\\r\\n * @param measurementId GA Measurement ID to log event to.\\r\\n * @param gtagParams Params to log with this event.\\r\\n */\\r\\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    _a.trys.push([0, 4, , 5]);\\r\\n                    initializationPromisesToWaitFor = [];\\r\\n                    if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\\r\\n                    gaSendToList = gtagParams['send_to'];\\r\\n                    // Make it an array if is isn't, so it can be dealt with the same way.\\r\\n                    if (!Array.isArray(gaSendToList)) {\\r\\n                        gaSendToList = [gaSendToList];\\r\\n                    }\\r\\n                    return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\\r\\n                case 1:\\r\\n                    dynamicConfigResults = _a.sent();\\r\\n                    _loop_1 = function (sendToId) {\\r\\n                        // Any fetched dynamic measurement ID that matches this 'send_to' ID\\r\\n                        var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });\\r\\n                        var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\\r\\n                        if (initializationPromise) {\\r\\n                            initializationPromisesToWaitFor.push(initializationPromise);\\r\\n                        }\\r\\n                        else {\\r\\n                            // Found an item in 'send_to' that is not associated\\r\\n                            // directly with an FID, possibly a group.  Empty this array,\\r\\n                            // exit the loop early, and let it get populated below.\\r\\n                            initializationPromisesToWaitFor = [];\\r\\n                            return \\\"break\\\";\\r\\n                        }\\r\\n                    };\\r\\n                    for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\\r\\n                        sendToId = gaSendToList_1[_i];\\r\\n                        state_1 = _loop_1(sendToId);\\r\\n                        if (state_1 === \\\"break\\\")\\r\\n                            break;\\r\\n                    }\\r\\n                    _a.label = 2;\\r\\n                case 2:\\r\\n                    // This will be unpopulated if there was no 'send_to' field , or\\r\\n                    // if not all entries in the 'send_to' field could be mapped to\\r\\n                    // a FID. In these cases, wait on all pending initialization promises.\\r\\n                    if (initializationPromisesToWaitFor.length === 0) {\\r\\n                        initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\\r\\n                    }\\r\\n                    // Run core gtag function with args after all relevant initialization\\r\\n                    // promises have been resolved.\\r\\n                    return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\\r\\n                case 3:\\r\\n                    // Run core gtag function with args after all relevant initialization\\r\\n                    // promises have been resolved.\\r\\n                    _a.sent();\\r\\n                    // Workaround for http://b/141370449 - third argument cannot be undefined.\\r\\n                    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\\r\\n                    return [3 /*break*/, 5];\\r\\n                case 4:\\r\\n                    e_2 = _a.sent();\\r\\n                    logger.error(e_2);\\r\\n                    return [3 /*break*/, 5];\\r\\n                case 5: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Wraps a standard gtag function with extra code to wait for completion of\\r\\n * relevant initialization promises before sending requests.\\r\\n *\\r\\n * @param gtagCore Basic gtag function that just appends to dataLayer.\\r\\n * @param initializationPromisesMap Map of appIds to their initialization promises.\\r\\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\\r\\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\\r\\n */\\r\\nfunction wrapGtag(gtagCore, \\r\\n/**\\r\\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\\r\\n * depending on the contents of the gtag params' `send_to` field, if any.\\r\\n */\\r\\ninitializationPromisesMap, \\r\\n/**\\r\\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\\r\\n * before determining what initialization promises (which include FIDs) to wait for.\\r\\n */\\r\\ndynamicConfigPromisesList, \\r\\n/**\\r\\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\\r\\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\\r\\n * which is the key for the initialization promises map.\\r\\n */\\r\\nmeasurementIdToAppId) {\\r\\n    /**\\r\\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\\r\\n     * @param command Gtag command type.\\r\\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\\r\\n     * @param gtagParams Params if event is EVENT/CONFIG.\\r\\n     */\\r\\n    function gtagWrapper(command, idOrNameOrParams, gtagParams) {\\r\\n        return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n            var e_3;\\r\\n            return tslib.__generator(this, function (_a) {\\r\\n                switch (_a.label) {\\r\\n                    case 0:\\r\\n                        _a.trys.push([0, 6, , 7]);\\r\\n                        if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\\r\\n                        // If EVENT, second arg must be measurementId.\\r\\n                        return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\\r\\n                    case 1:\\r\\n                        // If EVENT, second arg must be measurementId.\\r\\n                        _a.sent();\\r\\n                        return [3 /*break*/, 5];\\r\\n                    case 2:\\r\\n                        if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\\r\\n                        // If CONFIG, second arg must be measurementId.\\r\\n                        return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\\r\\n                    case 3:\\r\\n                        // If CONFIG, second arg must be measurementId.\\r\\n                        _a.sent();\\r\\n                        return [3 /*break*/, 5];\\r\\n                    case 4:\\r\\n                        // If SET, second arg must be params.\\r\\n                        gtagCore(GtagCommand.SET, idOrNameOrParams);\\r\\n                        _a.label = 5;\\r\\n                    case 5: return [3 /*break*/, 7];\\r\\n                    case 6:\\r\\n                        e_3 = _a.sent();\\r\\n                        logger.error(e_3);\\r\\n                        return [3 /*break*/, 7];\\r\\n                    case 7: return [2 /*return*/];\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n    }\\r\\n    return gtagWrapper;\\r\\n}\\r\\n/**\\r\\n * Creates global gtag function or wraps existing one if found.\\r\\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\\r\\n * 'event' calls that belong to the GAID associated with this Firebase instance.\\r\\n *\\r\\n * @param initializationPromisesMap Map of appIds to their initialization promises.\\r\\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\\r\\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\\r\\n * @param dataLayerName Name of global GA datalayer array.\\r\\n * @param gtagFunctionName Name of global gtag function (\\\"gtag\\\" if not user-specified).\\r\\n */\\r\\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\\r\\n    // Create a basic core gtag function\\r\\n    var gtagCore = function () {\\r\\n        var _args = [];\\r\\n        for (var _i = 0; _i < arguments.length; _i++) {\\r\\n            _args[_i] = arguments[_i];\\r\\n        }\\r\\n        // Must push IArguments object, not an array.\\r\\n        window[dataLayerName].push(arguments);\\r\\n    };\\r\\n    // Replace it with existing one if found\\r\\n    if (window[gtagFunctionName] &&\\r\\n        typeof window[gtagFunctionName] === 'function') {\\r\\n        // @ts-ignore\\r\\n        gtagCore = window[gtagFunctionName];\\r\\n    }\\r\\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\\r\\n    return {\\r\\n        gtagCore: gtagCore,\\r\\n        wrappedGtag: window[gtagFunctionName]\\r\\n    };\\r\\n}\\r\\n/**\\r\\n * Returns first script tag in DOM matching our gtag url pattern.\\r\\n */\\r\\nfunction findGtagScriptOnPage() {\\r\\n    var scriptTags = window.document.getElementsByTagName('script');\\r\\n    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\\r\\n        var tag = _a[_i];\\r\\n        if (tag.src && tag.src.includes(GTAG_URL)) {\\r\\n            return tag;\\r\\n        }\\r\\n    }\\r\\n    return null;\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nvar _a;\\r\\nvar ERRORS = (_a = {},\\r\\n    _a[\\\"already-exists\\\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +\\r\\n        ' already exists. ' +\\r\\n        'Only one Firebase Analytics instance can be created for each appId.',\\r\\n    _a[\\\"already-initialized\\\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +\\r\\n        'settings() must be called before initializing any Analytics instance' +\\r\\n        'or it will have no effect.',\\r\\n    _a[\\\"interop-component-reg-failed\\\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\\r\\n    _a[\\\"invalid-analytics-context\\\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +\\r\\n        'Wrap initialization of analytics in analytics.isSupported() ' +\\r\\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\\r\\n    _a[\\\"indexeddb-unavailable\\\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +\\r\\n        'Wrap initialization of analytics in analytics.isSupported() ' +\\r\\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\\r\\n    _a[\\\"fetch-throttle\\\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +\\r\\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\\r\\n    _a[\\\"config-fetch-failed\\\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\\r\\n    _a[\\\"no-api-key\\\" /* NO_API_KEY */] = 'The \\\"apiKey\\\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\\r\\n        'contain a valid API key.',\\r\\n    _a[\\\"no-app-id\\\" /* NO_APP_ID */] = 'The \\\"appId\\\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\\r\\n        'contain a valid app ID.',\\r\\n    _a);\\r\\nvar ERROR_FACTORY = new util.ErrorFactory('analytics', 'Analytics', ERRORS);\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Backoff factor for 503 errors, which we want to be conservative about\\r\\n * to avoid overloading servers. Each retry interval will be\\r\\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\\r\\n * will be ~30 seconds (with fuzzing).\\r\\n */\\r\\nvar LONG_RETRY_FACTOR = 30;\\r\\n/**\\r\\n * Base wait interval to multiplied by backoffFactor^backoffCount.\\r\\n */\\r\\nvar BASE_INTERVAL_MILLIS = 1000;\\r\\n/**\\r\\n * Stubbable retry data storage class.\\r\\n */\\r\\nvar RetryData = /** @class */ (function () {\\r\\n    function RetryData(throttleMetadata, intervalMillis) {\\r\\n        if (throttleMetadata === void 0) { throttleMetadata = {}; }\\r\\n        if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }\\r\\n        this.throttleMetadata = throttleMetadata;\\r\\n        this.intervalMillis = intervalMillis;\\r\\n    }\\r\\n    RetryData.prototype.getThrottleMetadata = function (appId) {\\r\\n        return this.throttleMetadata[appId];\\r\\n    };\\r\\n    RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\\r\\n        this.throttleMetadata[appId] = metadata;\\r\\n    };\\r\\n    RetryData.prototype.deleteThrottleMetadata = function (appId) {\\r\\n        delete this.throttleMetadata[appId];\\r\\n    };\\r\\n    return RetryData;\\r\\n}());\\r\\nvar defaultRetryData = new RetryData();\\r\\n/**\\r\\n * Set GET request headers.\\r\\n * @param apiKey App API key.\\r\\n */\\r\\nfunction getHeaders(apiKey) {\\r\\n    return new Headers({\\r\\n        Accept: 'application/json',\\r\\n        'x-goog-api-key': apiKey\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Fetches dynamic config from backend.\\r\\n * @param app Firebase app to fetch config for.\\r\\n */\\r\\nfunction fetchDynamicConfig(appFields) {\\r\\n    var _a;\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\\r\\n        return tslib.__generator(this, function (_b) {\\r\\n            switch (_b.label) {\\r\\n                case 0:\\r\\n                    appId = appFields.appId, apiKey = appFields.apiKey;\\r\\n                    request = {\\r\\n                        method: 'GET',\\r\\n                        headers: getHeaders(apiKey)\\r\\n                    };\\r\\n                    appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\\r\\n                    return [4 /*yield*/, fetch(appUrl, request)];\\r\\n                case 1:\\r\\n                    response = _b.sent();\\r\\n                    if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\\r\\n                    errorMessage = '';\\r\\n                    _b.label = 2;\\r\\n                case 2:\\r\\n                    _b.trys.push([2, 4, , 5]);\\r\\n                    return [4 /*yield*/, response.json()];\\r\\n                case 3:\\r\\n                    jsonResponse = (_b.sent());\\r\\n                    if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\\r\\n                        errorMessage = jsonResponse.error.message;\\r\\n                    }\\r\\n                    return [3 /*break*/, 5];\\r\\n                case 4:\\r\\n                    _b.sent();\\r\\n                    return [3 /*break*/, 5];\\r\\n                case 5: throw ERROR_FACTORY.create(\\\"config-fetch-failed\\\" /* CONFIG_FETCH_FAILED */, {\\r\\n                    httpStatus: response.status,\\r\\n                    responseMessage: errorMessage\\r\\n                });\\r\\n                case 6: return [2 /*return*/, response.json()];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Fetches dynamic config from backend, retrying if failed.\\r\\n * @param app Firebase app to fetch config for.\\r\\n */\\r\\nfunction fetchDynamicConfigWithRetry(app, \\r\\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\\r\\nretryData, timeoutMillis) {\\r\\n    if (retryData === void 0) { retryData = defaultRetryData; }\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var _a, appId, apiKey, measurementId, throttleMetadata, signal;\\r\\n        var _this = this;\\r\\n        return tslib.__generator(this, function (_b) {\\r\\n            _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\\r\\n            if (!appId) {\\r\\n                throw ERROR_FACTORY.create(\\\"no-app-id\\\" /* NO_APP_ID */);\\r\\n            }\\r\\n            if (!apiKey) {\\r\\n                if (measurementId) {\\r\\n                    return [2 /*return*/, {\\r\\n                            measurementId: measurementId,\\r\\n                            appId: appId\\r\\n                        }];\\r\\n                }\\r\\n                throw ERROR_FACTORY.create(\\\"no-api-key\\\" /* NO_API_KEY */);\\r\\n            }\\r\\n            throttleMetadata = retryData.getThrottleMetadata(appId) || {\\r\\n                backoffCount: 0,\\r\\n                throttleEndTimeMillis: Date.now()\\r\\n            };\\r\\n            signal = new AnalyticsAbortSignal();\\r\\n            setTimeout(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\\r\\n                return tslib.__generator(this, function (_a) {\\r\\n                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\\r\\n                    signal.abort();\\r\\n                    return [2 /*return*/];\\r\\n                });\\r\\n            }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\\r\\n            return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Runs one retry attempt.\\r\\n * @param appFields Necessary app config fields.\\r\\n * @param throttleMetadata Ongoing metadata to determine throttling times.\\r\\n * @param signal Abort signal.\\r\\n */\\r\\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\\r\\n) {\\r\\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;\\r\\n    if (retryData === void 0) { retryData = defaultRetryData; }\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\\r\\n        return tslib.__generator(this, function (_b) {\\r\\n            switch (_b.label) {\\r\\n                case 0:\\r\\n                    appId = appFields.appId, measurementId = appFields.measurementId;\\r\\n                    _b.label = 1;\\r\\n                case 1:\\r\\n                    _b.trys.push([1, 3, , 4]);\\r\\n                    return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\\r\\n                case 2:\\r\\n                    _b.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 3:\\r\\n                    e_1 = _b.sent();\\r\\n                    if (measurementId) {\\r\\n                        logger.warn(\\\"Timed out fetching this Firebase app's measurement ID from the server.\\\" +\\r\\n                            (\\\" Falling back to the measurement ID \\\" + measurementId) +\\r\\n                            (\\\" provided in the \\\\\\\"measurementId\\\\\\\" field in the local Firebase config. [\\\" + e_1.message + \\\"]\\\"));\\r\\n                        return [2 /*return*/, { appId: appId, measurementId: measurementId }];\\r\\n                    }\\r\\n                    throw e_1;\\r\\n                case 4:\\r\\n                    _b.trys.push([4, 6, , 7]);\\r\\n                    return [4 /*yield*/, fetchDynamicConfig(appFields)];\\r\\n                case 5:\\r\\n                    response = _b.sent();\\r\\n                    // Note the SDK only clears throttle state if response is success or non-retriable.\\r\\n                    retryData.deleteThrottleMetadata(appId);\\r\\n                    return [2 /*return*/, response];\\r\\n                case 6:\\r\\n                    e_2 = _b.sent();\\r\\n                    if (!isRetriableError(e_2)) {\\r\\n                        retryData.deleteThrottleMetadata(appId);\\r\\n                        if (measurementId) {\\r\\n                            logger.warn(\\\"Failed to fetch this Firebase app's measurement ID from the server.\\\" +\\r\\n                                (\\\" Falling back to the measurement ID \\\" + measurementId) +\\r\\n                                (\\\" provided in the \\\\\\\"measurementId\\\\\\\" field in the local Firebase config. [\\\" + e_2.message + \\\"]\\\"));\\r\\n                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];\\r\\n                        }\\r\\n                        else {\\r\\n                            throw e_2;\\r\\n                        }\\r\\n                    }\\r\\n                    backoffMillis = Number(e_2.customData.httpStatus) === 503\\r\\n                        ? util.calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\\r\\n                        : util.calculateBackoffMillis(backoffCount, retryData.intervalMillis);\\r\\n                    throttleMetadata = {\\r\\n                        throttleEndTimeMillis: Date.now() + backoffMillis,\\r\\n                        backoffCount: backoffCount + 1\\r\\n                    };\\r\\n                    // Persists state.\\r\\n                    retryData.setThrottleMetadata(appId, throttleMetadata);\\r\\n                    logger.debug(\\\"Calling attemptFetch again in \\\" + backoffMillis + \\\" millis\\\");\\r\\n                    return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\\r\\n                case 7: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Supports waiting on a backoff by:\\r\\n *\\r\\n * <ul>\\r\\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\\r\\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\\r\\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\\r\\n *       request appear the same.</li>\\r\\n * </ul>\\r\\n *\\r\\n * <p>Visible for testing.\\r\\n */\\r\\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\\r\\n    return new Promise(function (resolve, reject) {\\r\\n        // Derives backoff from given end time, normalizing negative numbers to zero.\\r\\n        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\\r\\n        var timeout = setTimeout(resolve, backoffMillis);\\r\\n        // Adds listener, rather than sets onabort, because signal is a shared object.\\r\\n        signal.addEventListener(function () {\\r\\n            clearTimeout(timeout);\\r\\n            // If the request completes before this timeout, the rejection has no effect.\\r\\n            reject(ERROR_FACTORY.create(\\\"fetch-throttle\\\" /* FETCH_THROTTLE */, {\\r\\n                throttleEndTimeMillis: throttleEndTimeMillis\\r\\n            }));\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\\r\\n */\\r\\nfunction isRetriableError(e) {\\r\\n    if (!(e instanceof util.FirebaseError) || !e.customData) {\\r\\n        return false;\\r\\n    }\\r\\n    // Uses string index defined by ErrorData, which FirebaseError implements.\\r\\n    var httpStatus = Number(e.customData['httpStatus']);\\r\\n    return (httpStatus === 429 ||\\r\\n        httpStatus === 500 ||\\r\\n        httpStatus === 503 ||\\r\\n        httpStatus === 504);\\r\\n}\\r\\n/**\\r\\n * Shims a minimal AbortSignal (copied from Remote Config).\\r\\n *\\r\\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\\r\\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\\r\\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\\r\\n * swapped out if/when we do.\\r\\n */\\r\\nvar AnalyticsAbortSignal = /** @class */ (function () {\\r\\n    function AnalyticsAbortSignal() {\\r\\n        this.listeners = [];\\r\\n    }\\r\\n    AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\\r\\n        this.listeners.push(listener);\\r\\n    };\\r\\n    AnalyticsAbortSignal.prototype.abort = function () {\\r\\n        this.listeners.forEach(function (listener) { return listener(); });\\r\\n    };\\r\\n    return AnalyticsAbortSignal;\\r\\n}());\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2020 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\nfunction validateIndexedDB() {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var e_1;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    if (!!util.isIndexedDBAvailable()) return [3 /*break*/, 1];\\r\\n                    logger.warn(ERROR_FACTORY.create(\\\"indexeddb-unavailable\\\" /* INDEXEDDB_UNAVAILABLE */, {\\r\\n                        errorInfo: 'IndexedDB is not available in this environment.'\\r\\n                    }).message);\\r\\n                    return [2 /*return*/, false];\\r\\n                case 1:\\r\\n                    _a.trys.push([1, 3, , 4]);\\r\\n                    return [4 /*yield*/, util.validateIndexedDBOpenable()];\\r\\n                case 2:\\r\\n                    _a.sent();\\r\\n                    return [3 /*break*/, 4];\\r\\n                case 3:\\r\\n                    e_1 = _a.sent();\\r\\n                    logger.warn(ERROR_FACTORY.create(\\\"indexeddb-unavailable\\\" /* INDEXEDDB_UNAVAILABLE */, {\\r\\n                        errorInfo: e_1\\r\\n                    }).message);\\r\\n                    return [2 /*return*/, false];\\r\\n                case 4: return [2 /*return*/, true];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Initialize the analytics instance in gtag.js by calling config command with fid.\\r\\n *\\r\\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\\r\\n * part of the `page_view` event that's sent during the initialization\\r\\n * @param app Firebase app\\r\\n * @param gtagCore The gtag function that's not wrapped.\\r\\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\\r\\n * @param measurementIdToAppId Maps measurementID to appID.\\r\\n * @param installations FirebaseInstallations instance.\\r\\n *\\r\\n * @returns Measurement ID.\\r\\n */\\r\\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName) {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\\r\\n        var _b;\\r\\n        return tslib.__generator(this, function (_c) {\\r\\n            switch (_c.label) {\\r\\n                case 0:\\r\\n                    dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\\r\\n                    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\\r\\n                    dynamicConfigPromise\\r\\n                        .then(function (config) {\\r\\n                        measurementIdToAppId[config.measurementId] = config.appId;\\r\\n                        if (app.options.measurementId &&\\r\\n                            config.measurementId !== app.options.measurementId) {\\r\\n                            logger.warn(\\\"The measurement ID in the local Firebase config (\\\" + app.options.measurementId + \\\")\\\" +\\r\\n                                (\\\" does not match the measurement ID fetched from the server (\\\" + config.measurementId + \\\").\\\") +\\r\\n                                \\\" To ensure analytics events are always sent to the correct Analytics property,\\\" +\\r\\n                                \\\" update the\\\" +\\r\\n                                \\\" measurement ID field in the local config or remove it from the local config.\\\");\\r\\n                        }\\r\\n                    })\\r\\n                        .catch(function (e) { return logger.error(e); });\\r\\n                    // Add to list to track state of all dynamic config promises.\\r\\n                    dynamicConfigPromisesList.push(dynamicConfigPromise);\\r\\n                    fidPromise = validateIndexedDB().then(function (envIsValid) {\\r\\n                        if (envIsValid) {\\r\\n                            return installations.getId();\\r\\n                        }\\r\\n                        else {\\r\\n                            return undefined;\\r\\n                        }\\r\\n                    });\\r\\n                    return [4 /*yield*/, Promise.all([\\r\\n                            dynamicConfigPromise,\\r\\n                            fidPromise\\r\\n                        ])];\\r\\n                case 1:\\r\\n                    _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\\r\\n                    // Detect if user has already put the gtag <script> tag on this page.\\r\\n                    if (!findGtagScriptOnPage()) {\\r\\n                        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\\r\\n                    }\\r\\n                    // This command initializes gtag.js and only needs to be called once for the entire web app,\\r\\n                    // but since it is idempotent, we can call it multiple times.\\r\\n                    // We keep it together with other initialization logic for better code structure.\\r\\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\\r\\n                    gtagCore('js', new Date());\\r\\n                    configProperties = (_b = {},\\r\\n                        // guard against developers accidentally setting properties with prefix `firebase_`\\r\\n                        _b[ORIGIN_KEY] = 'firebase',\\r\\n                        _b.update = true,\\r\\n                        _b);\\r\\n                    if (fid != null) {\\r\\n                        configProperties[GA_FID_KEY] = fid;\\r\\n                    }\\r\\n                    // It should be the first config command called on this GA-ID\\r\\n                    // Initialize this GA-ID and set FID on it using the gtag config API.\\r\\n                    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\\r\\n                    // `configProperties`.\\r\\n                    gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\\r\\n                    return [2 /*return*/, dynamicConfig.measurementId];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\n\\n/**\\r\\n * @license\\r\\n * Copyright 2019 Google LLC\\r\\n *\\r\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n * you may not use this file except in compliance with the License.\\r\\n * You may obtain a copy of the License at\\r\\n *\\r\\n *   http://www.apache.org/licenses/LICENSE-2.0\\r\\n *\\r\\n * Unless required by applicable law or agreed to in writing, software\\r\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n * See the License for the specific language governing permissions and\\r\\n * limitations under the License.\\r\\n */\\r\\n/**\\r\\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\\r\\n * all or some of these, depending on the call's `send_to` param and the status\\r\\n * of the dynamic config fetches (see below).\\r\\n */\\r\\nvar initializationPromisesMap = {};\\r\\n/**\\r\\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\\r\\n * wait on all these to be complete in order to determine if it can selectively\\r\\n * wait for only certain initialization (FID) promises or if it must wait for all.\\r\\n */\\r\\nvar dynamicConfigPromisesList = [];\\r\\n/**\\r\\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\\r\\n * fetch completes. If already populated, gtag config calls can use this to\\r\\n * selectively wait for only this app's initialization promise (FID) instead of all\\r\\n * initialization promises.\\r\\n */\\r\\nvar measurementIdToAppId = {};\\r\\n/**\\r\\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\\r\\n */\\r\\nvar dataLayerName = 'dataLayer';\\r\\n/**\\r\\n * Name for window global gtag function used by GA: defaults to 'gtag'.\\r\\n */\\r\\nvar gtagName = 'gtag';\\r\\n/**\\r\\n * Reproduction of standard gtag function or reference to existing\\r\\n * gtag function on window object.\\r\\n */\\r\\nvar gtagCoreFunction;\\r\\n/**\\r\\n * Wrapper around gtag function that ensures FID is sent with all\\r\\n * relevant event and config calls.\\r\\n */\\r\\nvar wrappedGtagFunction;\\r\\n/**\\r\\n * Flag to ensure page initialization steps (creation or wrapping of\\r\\n * dataLayer and gtag script) are only run once per page load.\\r\\n */\\r\\nvar globalInitDone = false;\\r\\n/**\\r\\n * For testing\\r\\n */\\r\\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\\r\\n    if (newGlobalInitDone === void 0) { newGlobalInitDone = false; }\\r\\n    if (newInitializationPromisesMap === void 0) { newInitializationPromisesMap = {}; }\\r\\n    if (newDynamicPromises === void 0) { newDynamicPromises = []; }\\r\\n    globalInitDone = newGlobalInitDone;\\r\\n    initializationPromisesMap = newInitializationPromisesMap;\\r\\n    dynamicConfigPromisesList = newDynamicPromises;\\r\\n    dataLayerName = 'dataLayer';\\r\\n    gtagName = 'gtag';\\r\\n}\\r\\n/**\\r\\n * For testing\\r\\n */\\r\\nfunction getGlobalVars() {\\r\\n    return {\\r\\n        initializationPromisesMap: initializationPromisesMap,\\r\\n        dynamicConfigPromisesList: dynamicConfigPromisesList\\r\\n    };\\r\\n}\\r\\n/**\\r\\n * This must be run before calling firebase.analytics() or it won't\\r\\n * have any effect.\\r\\n * @param options Custom gtag and dataLayer names.\\r\\n */\\r\\nfunction settings(options) {\\r\\n    if (globalInitDone) {\\r\\n        throw ERROR_FACTORY.create(\\\"already-initialized\\\" /* ALREADY_INITIALIZED */);\\r\\n    }\\r\\n    if (options.dataLayerName) {\\r\\n        dataLayerName = options.dataLayerName;\\r\\n    }\\r\\n    if (options.gtagName) {\\r\\n        gtagName = options.gtagName;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Returns true if no environment mismatch is found.\\r\\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\\r\\n * error that also lists details for each mismatch found.\\r\\n */\\r\\nfunction warnOnBrowserContextMismatch() {\\r\\n    var mismatchedEnvMessages = [];\\r\\n    if (util.isBrowserExtension()) {\\r\\n        mismatchedEnvMessages.push('This is a browser extension environment.');\\r\\n    }\\r\\n    if (!util.areCookiesEnabled()) {\\r\\n        mismatchedEnvMessages.push('Cookies are not available.');\\r\\n    }\\r\\n    if (mismatchedEnvMessages.length > 0) {\\r\\n        var details = mismatchedEnvMessages\\r\\n            .map(function (message, index) { return \\\"(\\\" + (index + 1) + \\\") \\\" + message; })\\r\\n            .join(' ');\\r\\n        var err = ERROR_FACTORY.create(\\\"invalid-analytics-context\\\" /* INVALID_ANALYTICS_CONTEXT */, {\\r\\n            errorInfo: details\\r\\n        });\\r\\n        logger.warn(err.message);\\r\\n    }\\r\\n}\\r\\nfunction factory(app, installations) {\\r\\n    warnOnBrowserContextMismatch();\\r\\n    var appId = app.options.appId;\\r\\n    if (!appId) {\\r\\n        throw ERROR_FACTORY.create(\\\"no-app-id\\\" /* NO_APP_ID */);\\r\\n    }\\r\\n    if (!app.options.apiKey) {\\r\\n        if (app.options.measurementId) {\\r\\n            logger.warn(\\\"The \\\\\\\"apiKey\\\\\\\" field is empty in the local Firebase config. This is needed to fetch the latest\\\" +\\r\\n                (\\\" measurement ID for this Firebase app. Falling back to the measurement ID \\\" + app.options.measurementId) +\\r\\n                \\\" provided in the \\\\\\\"measurementId\\\\\\\" field in the local Firebase config.\\\");\\r\\n        }\\r\\n        else {\\r\\n            throw ERROR_FACTORY.create(\\\"no-api-key\\\" /* NO_API_KEY */);\\r\\n        }\\r\\n    }\\r\\n    if (initializationPromisesMap[appId] != null) {\\r\\n        throw ERROR_FACTORY.create(\\\"already-exists\\\" /* ALREADY_EXISTS */, {\\r\\n            id: appId\\r\\n        });\\r\\n    }\\r\\n    if (!globalInitDone) {\\r\\n        // Steps here should only be done once per page: creation or wrapping\\r\\n        // of dataLayer and global gtag function.\\r\\n        getOrCreateDataLayer(dataLayerName);\\r\\n        var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;\\r\\n        wrappedGtagFunction = wrappedGtag;\\r\\n        gtagCoreFunction = gtagCore;\\r\\n        globalInitDone = true;\\r\\n    }\\r\\n    // Async but non-blocking.\\r\\n    // This map reflects the completion state of all promises for each appId.\\r\\n    initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);\\r\\n    var analyticsInstance = {\\r\\n        app: app,\\r\\n        // Public methods return void for API simplicity and to better match gtag,\\r\\n        // while internal implementations return promises.\\r\\n        logEvent: function (eventName, eventParams, options) {\\r\\n            logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });\\r\\n        },\\r\\n        setCurrentScreen: function (screenName, options) {\\r\\n            setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger.error(e); });\\r\\n        },\\r\\n        setUserId: function (id, options) {\\r\\n            setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) { return logger.error(e); });\\r\\n        },\\r\\n        setUserProperties: function (properties, options) {\\r\\n            setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) { return logger.error(e); });\\r\\n        },\\r\\n        setAnalyticsCollectionEnabled: function (enabled) {\\r\\n            setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) { return logger.error(e); });\\r\\n        },\\r\\n        INTERNAL: {\\r\\n            delete: function () {\\r\\n                delete initializationPromisesMap[appId];\\r\\n                return Promise.resolve();\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n    return analyticsInstance;\\r\\n}\\n\\nvar name = \\\"@firebase/analytics\\\";\\nvar version = \\\"0.6.16\\\";\\n\\n/**\\r\\n * Type constant for Firebase Analytics.\\r\\n */\\r\\nvar ANALYTICS_TYPE = 'analytics';\\r\\nfunction registerAnalytics(instance) {\\r\\n    instance.INTERNAL.registerComponent(new component.Component(ANALYTICS_TYPE, function (container) {\\r\\n        // getImmediate for FirebaseApp will always succeed\\r\\n        var app = container.getProvider('app').getImmediate();\\r\\n        var installations = container\\r\\n            .getProvider('installations')\\r\\n            .getImmediate();\\r\\n        return factory(app, installations);\\r\\n    }, \\\"PUBLIC\\\" /* PUBLIC */).setServiceProps({\\r\\n        settings: settings,\\r\\n        EventName: EventName,\\r\\n        isSupported: isSupported\\r\\n    }));\\r\\n    instance.INTERNAL.registerComponent(new component.Component('analytics-internal', internalFactory, \\\"PRIVATE\\\" /* PRIVATE */));\\r\\n    instance.registerVersion(name, version);\\r\\n    function internalFactory(container) {\\r\\n        try {\\r\\n            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\\r\\n            return {\\r\\n                logEvent: analytics.logEvent\\r\\n            };\\r\\n        }\\r\\n        catch (e) {\\r\\n            throw ERROR_FACTORY.create(\\\"interop-component-reg-failed\\\" /* INTEROP_COMPONENT_REG_FAILED */, {\\r\\n                reason: e\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n}\\r\\nregisterAnalytics(firebase__default['default']);\\r\\n/**\\r\\n * this is a public static method provided to users that wraps four different checks:\\r\\n *\\r\\n * 1. check if it's not a browser extension environment.\\r\\n * 1. check if cookie is enabled in current browser.\\r\\n * 3. check if IndexedDB is supported by the browser environment.\\r\\n * 4. check if the current browser context is valid for using IndexedDB.\\r\\n *\\r\\n */\\r\\nfunction isSupported() {\\r\\n    return tslib.__awaiter(this, void 0, void 0, function () {\\r\\n        var isDBOpenable;\\r\\n        return tslib.__generator(this, function (_a) {\\r\\n            switch (_a.label) {\\r\\n                case 0:\\r\\n                    if (util.isBrowserExtension()) {\\r\\n                        return [2 /*return*/, false];\\r\\n                    }\\r\\n                    if (!util.areCookiesEnabled()) {\\r\\n                        return [2 /*return*/, false];\\r\\n                    }\\r\\n                    if (!util.isIndexedDBAvailable()) {\\r\\n                        return [2 /*return*/, false];\\r\\n                    }\\r\\n                    _a.label = 1;\\r\\n                case 1:\\r\\n                    _a.trys.push([1, 3, , 4]);\\r\\n                    return [4 /*yield*/, util.validateIndexedDBOpenable()];\\r\\n                case 2:\\r\\n                    isDBOpenable = _a.sent();\\r\\n                    return [2 /*return*/, isDBOpenable];\\r\\n                case 3:\\r\\n                    _a.sent();\\r\\n                    return [2 /*return*/, false];\\r\\n                case 4: return [2 /*return*/];\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\\n\\nexports.factory = factory;\\nexports.getGlobalVars = getGlobalVars;\\nexports.registerAnalytics = registerAnalytics;\\nexports.resetGlobalVars = resetGlobalVars;\\nexports.settings = settings;\\n//# sourceMappingURL=index.cjs.js.map\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"logEvent\",\"gtagFunction\",\"initializationPromise\",\"eventName\",\"eventParams\",\"options\",\"tslib\",\"__awaiter\",\"measurementId\",\"params\",\"__generator\",\"_a\",\"label\",\"GtagCommand\",\"EVENT\",\"sent\",\"__assign\",\"setCurrentScreen\",\"screenName\",\"SET\",\"Promise\",\"resolve\",\"CONFIG\",\"update\",\"setUserId\",\"id\",\"setUserProperties\",\"properties\",\"flatProperties\",\"_i\",\"key\",\"_b\",\"Object\",\"keys\",\"length\",\"setAnalyticsCollectionEnabled\",\"enabled\",\"window\",\"insertScriptTag\",\"dataLayerName\",\"script\",\"document\",\"createElement\",\"src\",\"async\",\"head\",\"appendChild\",\"getOrCreateDataLayer\",\"dataLayer\",\"Array\",\"isArray\",\"gtagOnConfig\",\"gtagCore\",\"initializationPromisesMap\",\"dynamicConfigPromisesList\",\"measurementIdToAppId\",\"gtagParams\",\"correspondingAppId\",\"dynamicConfigResults\",\"foundConfig\",\"e_1\",\"trys\",\"push\",\"all\",\"find\",\"config\",\"appId\",\"logger\",\"error\",\"gtagOnEvent\",\"initializationPromisesToWaitFor\",\"gaSendToList\",\"_loop_1\",\"gaSendToList_1\",\"sendToId\",\"state_1\",\"e_2\",\"values\",\"wrapGtag\",\"gtagWrapper\",\"command\",\"idOrNameOrParams\",\"e_3\",\"wrapOrCreateGtag\",\"gtagFunctionName\",\"arguments\",\"wrappedGtag\",\"findGtagScriptOnPage\",\"scriptTags\",\"getElementsByTagName\",\"tag\",\"includes\",\"GTAG_URL\",\"fetchDynamicConfig\",\"appFields\",\"apiKey\",\"request\",\"appUrl\",\"response\",\"errorMessage\",\"jsonResponse\",\"method\",\"headers\",\"Headers\",\"Accept\",\"DYNAMIC_CONFIG_URL\",\"replace\",\"fetch\",\"status\",\"json\",\"message\",\"ERROR_FACTORY\",\"create\",\"httpStatus\",\"responseMessage\",\"fetchDynamicConfigWithRetry\",\"app\",\"retryData\",\"timeoutMillis\",\"defaultRetryData\",\"throttleMetadata\",\"signal\",\"_this\",\"getThrottleMetadata\",\"backoffCount\",\"throttleEndTimeMillis\",\"Date\",\"now\",\"AnalyticsAbortSignal\",\"setTimeout\",\"abort\",\"undefined\",\"FETCH_TIMEOUT_MILLIS\",\"attemptFetchDynamicConfigWithRetry\",\"backoffMillis\",\"setAbortableTimeout\",\"warn\",\"deleteThrottleMetadata\",\"util\",\"FirebaseError\",\"customData\",\"Number\",\"calculateBackoffMillis\",\"intervalMillis\",\"LONG_RETRY_FACTOR\",\"setThrottleMetadata\",\"debug\",\"reject\",\"Math\",\"max\",\"timeout\",\"addEventListener\",\"clearTimeout\",\"validateIndexedDB\",\"isIndexedDBAvailable\",\"errorInfo\",\"validateIndexedDBOpenable\",\"initializeIds\",\"installations\",\"dynamicConfigPromise\",\"fidPromise\",\"dynamicConfig\",\"fid\",\"configProperties\",\"_c\",\"then\",\"catch\",\"e\",\"envIsValid\",\"getId\",\"settings\",\"globalInitDone\",\"gtagName\",\"warnOnBrowserContextMismatch\",\"mismatchedEnvMessages\",\"isBrowserExtension\",\"areCookiesEnabled\",\"details\",\"map\",\"index\",\"join\",\"err\",\"factory\",\"wrappedGtagFunction\",\"gtagCoreFunction\",\"analyticsInstance\",\"INTERNAL\",\"delete\",\"registerAnalytics\",\"instance\",\"registerComponent\",\"setServiceProps\",\"component\",\"Component\",\"ANALYTICS_TYPE\",\"container\",\"getProvider\",\"getImmediate\",\"EventName\",\"isSupported\",\"internalFactory\",\"analytics\",\"reason\",\"registerVersion\",\"name\",\"version\",\"isDBOpenable\",\"defineProperty\",\"value\",\"firebase\",\"logger$1\",\"firebase__default\",\"Logger\",\"ERRORS\",\"ErrorFactory\",\"RetryData\",\"BASE_INTERVAL_MILLIS\",\"prototype\",\"RetryData.prototype.getThrottleMetadata\",\"RetryData.prototype.setThrottleMetadata\",\"metadata\",\"RetryData.prototype.deleteThrottleMetadata\",\"listeners\",\"AnalyticsAbortSignal.prototype.addEventListener\",\"listener\",\"AnalyticsAbortSignal.prototype.abort\",\"forEach\",\"getGlobalVars\",\"resetGlobalVars\",\"newGlobalInitDone\",\"newInitializationPromisesMap\",\"newDynamicPromises\"]\n}\n"]