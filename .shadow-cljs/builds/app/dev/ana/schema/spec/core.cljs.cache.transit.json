["^ ","~:output",["^ ","~:js","goog.provide('schema.spec.core');\n\n/**\n * Specs are a common language for Schemas to express their structure.\n * These two use-cases aren't priveledged, just the two that are considered core\n * to being a Spec.\n * @interface\n */\nschema.spec.core.CoreSpec = function(){};\n\nvar schema$spec$core$CoreSpec$subschemas$dyn_32581 = (function (this$){\nvar x__4509__auto__ = (((this$ == null))?null:this$);\nvar m__4510__auto__ = (schema.spec.core.subschemas[goog.typeOf(x__4509__auto__)]);\nif((!((m__4510__auto__ == null)))){\nreturn (m__4510__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4510__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4510__auto__.call(null,this$));\n} else {\nvar m__4508__auto__ = (schema.spec.core.subschemas[\"_\"]);\nif((!((m__4508__auto__ == null)))){\nreturn (m__4508__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4508__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__4508__auto__.call(null,this$));\n} else {\nthrow cljs.core.missing_protocol(\"CoreSpec.subschemas\",this$);\n}\n}\n});\n/**\n * List all subschemas\n */\nschema.spec.core.subschemas = (function schema$spec$core$subschemas(this$){\nif((((!((this$ == null)))) && ((!((this$.schema$spec$core$CoreSpec$subschemas$arity$1 == null)))))){\nreturn this$.schema$spec$core$CoreSpec$subschemas$arity$1(this$);\n} else {\nreturn schema$spec$core$CoreSpec$subschemas$dyn_32581(this$);\n}\n});\n\nvar schema$spec$core$CoreSpec$checker$dyn_32582 = (function (this$,params){\nvar x__4509__auto__ = (((this$ == null))?null:this$);\nvar m__4510__auto__ = (schema.spec.core.checker[goog.typeOf(x__4509__auto__)]);\nif((!((m__4510__auto__ == null)))){\nreturn (m__4510__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4510__auto__.cljs$core$IFn$_invoke$arity$2(this$,params) : m__4510__auto__.call(null,this$,params));\n} else {\nvar m__4508__auto__ = (schema.spec.core.checker[\"_\"]);\nif((!((m__4508__auto__ == null)))){\nreturn (m__4508__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4508__auto__.cljs$core$IFn$_invoke$arity$2(this$,params) : m__4508__auto__.call(null,this$,params));\n} else {\nthrow cljs.core.missing_protocol(\"CoreSpec.checker\",this$);\n}\n}\n});\n/**\n * Create a function that takes [data], and either returns a walked version of data\n *   (by default, usually just data), or a utils/ErrorContainer containing value that looks\n *   like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n * \n *   params are: subschema-checker, return-walked?, and cache.\n * \n *   params is a map specifying:\n *    - subschema-checker - a function for checking subschemas\n *    - returned-walked? - a boolean specifying whether to return a walked version of the data\n *      (otherwise, nil is returned which increases performance)\n *    - cache - a map structure from schema to checker, which speeds up checker creation\n *      when the same subschema appears multiple times, and also facilitates handling\n *      recursive schemas.\n */\nschema.spec.core.checker = (function schema$spec$core$checker(this$,params){\nif((((!((this$ == null)))) && ((!((this$.schema$spec$core$CoreSpec$checker$arity$2 == null)))))){\nreturn this$.schema$spec$core$CoreSpec$checker$arity$2(this$,params);\n} else {\nreturn schema$spec$core$CoreSpec$checker$dyn_32582(this$,params);\n}\n});\n\nschema.spec.core._PLUS_no_precondition_PLUS_ = (function schema$spec$core$_PLUS_no_precondition_PLUS_(_){\nreturn null;\n});\n/**\n * Helper for making preconditions.\n * Takes a schema, predicate p, and error function err-f.\n * If the datum passes the predicate, returns nil.\n * Otherwise, returns a validation error with description (err-f datum-description),\n * where datum-description is a (short) printable standin for the datum.\n */\nschema.spec.core.precondition = (function schema$spec$core$precondition(s,p,err_f){\nreturn (function (x){\nvar temp__5753__auto__ = (function (){try{if(cljs.core.truth_((p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x)))){\nreturn null;\n} else {\nreturn new cljs.core.Symbol(null,\"not\",\"not\",1044554643,null);\n}\n}catch (e32569){if((e32569 instanceof Object)){\nvar e_SHARP_ = e32569;\nreturn new cljs.core.Symbol(null,\"throws?\",\"throws?\",789734533,null);\n} else {\nthrow e32569;\n\n}\n}})();\nif(cljs.core.truth_(temp__5753__auto__)){\nvar reason = temp__5753__auto__;\nreturn schema.utils.error(schema.utils.make_ValidationError(s,x,(new cljs.core.Delay((function (){\nvar G__32570 = schema.utils.value_name(x);\nreturn (err_f.cljs$core$IFn$_invoke$arity$1 ? err_f.cljs$core$IFn$_invoke$arity$1(G__32570) : err_f.call(null,G__32570));\n}),null)),reason));\n} else {\nreturn null;\n}\n});\n});\n/**\n * A helper to start a checking run, by setting the appropriate params.\n * For examples, see schema.core/checker or schema.coerce/coercer.\n */\nschema.spec.core.run_checker = (function schema$spec$core$run_checker(f,return_walked_QMARK_,s){\nvar G__32571 = s;\nvar G__32572 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"subschema-checker\",\"subschema-checker\",1137701360),f,new cljs.core.Keyword(null,\"return-walked?\",\"return-walked?\",-1684646015),return_walked_QMARK_,new cljs.core.Keyword(null,\"cache\",\"cache\",-1237023054),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY)], null);\nreturn (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32571,G__32572) : f.call(null,G__32571,G__32572));\n});\nschema.spec.core.with_cache = (function schema$spec$core$with_cache(cache,cache_key,wrap_recursive_delay,result_fn){\nvar temp__5751__auto__ = (function (){var fexpr__32573 = cljs.core.deref(cache);\nreturn (fexpr__32573.cljs$core$IFn$_invoke$arity$1 ? fexpr__32573.cljs$core$IFn$_invoke$arity$1(cache_key) : fexpr__32573.call(null,cache_key));\n})();\nif(cljs.core.truth_(temp__5751__auto__)){\nvar w = temp__5751__auto__;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"schema.spec.core\",\"in-progress\",\"schema.spec.core/in-progress\",-1604867615),w)){\nvar G__32574 = (new cljs.core.Delay((function (){\nvar fexpr__32575 = cljs.core.deref(cache);\nreturn (fexpr__32575.cljs$core$IFn$_invoke$arity$1 ? fexpr__32575.cljs$core$IFn$_invoke$arity$1(cache_key) : fexpr__32575.call(null,cache_key));\n}),null));\nreturn (wrap_recursive_delay.cljs$core$IFn$_invoke$arity$1 ? wrap_recursive_delay.cljs$core$IFn$_invoke$arity$1(G__32574) : wrap_recursive_delay.call(null,G__32574));\n} else {\nreturn w;\n}\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cache,cljs.core.assoc,cache_key,new cljs.core.Keyword(\"schema.spec.core\",\"in-progress\",\"schema.spec.core/in-progress\",-1604867615));\n\nvar res = (result_fn.cljs$core$IFn$_invoke$arity$0 ? result_fn.cljs$core$IFn$_invoke$arity$0() : result_fn.call(null));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cache,cljs.core.assoc,cache_key,res);\n\nreturn res;\n}\n});\n/**\n * Should be called recursively on each subschema in the 'checker' method of a spec.\n * Handles caching and error wrapping behavior.\n */\nschema.spec.core.sub_checker = (function schema$spec$core$sub_checker(p__32576,p__32577){\nvar map__32578 = p__32576;\nvar map__32578__$1 = cljs.core.__destructure_map(map__32578);\nvar schema__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32578__$1,new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791));\nvar error_wrap = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32578__$1,new cljs.core.Keyword(null,\"error-wrap\",\"error-wrap\",-1295833514));\nvar map__32579 = p__32577;\nvar map__32579__$1 = cljs.core.__destructure_map(map__32579);\nvar params = map__32579__$1;\nvar subschema_checker = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32579__$1,new cljs.core.Keyword(null,\"subschema-checker\",\"subschema-checker\",1137701360));\nvar cache = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__32579__$1,new cljs.core.Keyword(null,\"cache\",\"cache\",-1237023054));\nvar sub = schema.spec.core.with_cache(cache,schema__$1,(function (d){\nreturn (function (x){\nvar fexpr__32580 = cljs.core.deref(d);\nreturn (fexpr__32580.cljs$core$IFn$_invoke$arity$1 ? fexpr__32580.cljs$core$IFn$_invoke$arity$1(x) : fexpr__32580.call(null,x));\n});\n}),(function (){\nreturn (subschema_checker.cljs$core$IFn$_invoke$arity$2 ? subschema_checker.cljs$core$IFn$_invoke$arity$2(schema__$1,params) : subschema_checker.call(null,schema__$1,params));\n}));\nif(cljs.core.truth_(error_wrap)){\nreturn (function (x){\nvar res = (sub.cljs$core$IFn$_invoke$arity$1 ? sub.cljs$core$IFn$_invoke$arity$1(x) : sub.call(null,x));\nvar temp__5751__auto__ = schema.utils.error_val(res);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar e = temp__5751__auto__;\nreturn schema.utils.error((error_wrap.cljs$core$IFn$_invoke$arity$1 ? error_wrap.cljs$core$IFn$_invoke$arity$1(res) : error_wrap.call(null,res)));\n} else {\nreturn res;\n}\n});\n} else {\nreturn sub;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure.","~:file","schema/spec/core.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$schema.spec.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$schema.utils","^P","~$utils","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^I",["~:require","~:require-macros"]],"~:uses",null,"^V",["^ ","~$schema.macros","^X","~$macros","^X","^R","^R","^P","^P","^Q","^P"],"~:form",["~#list",["~$ns","^K","Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure.",["^[",["^U",["^P","~:as","^Q"]]],["^[",["^V",["^X","^11","^Y"]]]]],"~:flags",["^ ","^U",["^I",[]],"^V",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","schema/spec/core.cljs"],"~:compiled-at",1629317116107,"~:resource-name","schema/spec/core.cljs","~:warnings",[],"~:source","(ns schema.spec.core\n  \"Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure.\"\n  (:require\n                                   \n   [schema.utils :as utils])\n         (:require-macros [schema.macros :as macros]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Core spec protocol\n\n(defprotocol CoreSpec\n  \"Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.\"\n  (subschemas [this]\n    \"List all subschemas\")\n  (checker [this params]\n    \"Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.\"))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Preconditions\n\n;; A Precondition is a function of a value that returns a\n;; ValidationError if the value does not satisfy the precondition,\n;; and otherwise returns nil.\n;; e.g., (s/defschema Precondition (s/=> (s/maybe schema.utils.ValidationError) s/Any))\n;; as such, a precondition is essentially a very simple checker.\n\n(def +no-precondition+ (fn [_] nil))\n\n(defn precondition\n  \"Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum.\"\n  [s p err-f]\n  (fn [x]\n    (when-let [reason (macros/try-catchall (when-not (p x) 'not) (catch e# 'throws?))]\n      (macros/validation-error s x (err-f (utils/value-name x)) reason))))\n\n                             \n                                                                                           \n           \n                                                     \n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;; Helpers\n\n(defn run-checker\n  \"A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer.\"\n  [f return-walked? s]\n  (f\n   s\n   {:subschema-checker f\n    :return-walked? return-walked?\n    :cache                                           (atom {})}))\n\n(defn with-cache [cache cache-key wrap-recursive-delay result-fn]\n  (if-let [w                                                    (@cache cache-key)]\n    (if (= ::in-progress w) ;; recursive\n      (wrap-recursive-delay (delay                                                    (@cache cache-key)))\n      w)\n    (do                                                                  (swap! cache assoc cache-key ::in-progress)\n        (let [res (result-fn)]\n                                                                 (swap! cache assoc cache-key res)\n          res))))\n\n(defn sub-checker\n  \"Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior.\"\n  [{:keys [schema error-wrap]}\n   {:keys [subschema-checker cache] :as params}]\n  (let [sub (with-cache cache schema\n              (fn [d] (fn [x] (@d x)))\n              (fn [] (subschema-checker schema params)))]\n    (if error-wrap\n      (fn [x]\n        (let [res (sub x)]\n          (if-let [e (utils/error-val res)]\n            (utils/error (error-wrap res))\n            res)))\n      sub)))\n\n;;;;;;;;;;;; This file autogenerated from src/cljx/schema/spec/core.cljx\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["schema$spec$core$CoreSpec$subschemas$dyn","x__4509__auto__","m__4510__auto__","schema.spec.core/subschemas","goog/typeOf","m__4508__auto__","cljs.core/missing-protocol","schema$spec$core$CoreSpec$checker$dyn","schema.spec.core/checker","schema.spec.core/CoreSpec","this","params","schema.spec.core/+no-precondition+","_","schema.spec.core/precondition","s","p","err-f","x","temp__5753__auto__","reason","e32569","js/Object","e#","schema.utils/error","schema.utils/make-ValidationError","cljs.core/Delay","G__32570","schema.utils/value-name","schema.spec.core/run-checker","f","return-walked?","G__32571","G__32572","cljs.core.atom","schema.spec.core/with-cache","cache","cache-key","wrap-recursive-delay","result-fn","temp__5751__auto__","w","fexpr__32573","cljs.core/deref","cljs.core._EQ_","G__32574","fexpr__32575","cljs.core.swap_BANG_","cljs.core/assoc","res","p__32576","p__32577","map__32578","cljs.core/--destructure-map","cljs.core.get","map__32579","schema.spec.core/sub-checker","schema","error-wrap","subschema-checker","sub","d","fexpr__32580","e","schema.utils/error-val"]],"~:used-vars",["^I",["~$cljs.core/--destructure-map","~$schema.utils/error","~$schema.spec.core/precondition","~$cljs.core/=","~$schema.spec.core/with-cache","~$cljs.core/deref","~$goog/typeOf","~$cljs.core/Delay","~$cljs.core/atom","~$schema.utils/make-ValidationError","~$schema.utils/value-name","~$schema.spec.core/run-checker","~$schema.spec.core/CoreSpec","~$schema.utils/error-val","~$cljs.core/swap!","~$cljs.core/get","~$schema.spec.core/sub-checker","~$schema.spec.core/checker","~$cljs.core/missing-protocol","~$schema.spec.core/subschemas","~$cljs.core/not","~$schema.spec.core/+no-precondition+","~$cljs.core/assoc","~$js/Object"]]],"~:cache-keys",["~#cmap",[["^16","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^S","~$goog.dom.HtmlElement"]]],["^16","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","~$goog.array","~$goog.asserts"]]],["^16","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/string/stringformat.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","~$goog.string"]]],["^16","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^16","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2:"]]],["^16","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26"]]],["^16","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26"]]],"~:SHADOW-TIMESTAMP",[1627822722000,1627822722000,1627822708000],["^16","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","~$goog.reflect"]]],["^16","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","~$goog.fs.blob","^2;","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2=","^2>","^2?","^2@"]]],["^16","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25","^26","~$goog.html.SafeUrl","^2?","^2@","^2:"]]],["^16","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2D","~$goog.html.SafeStyle","^2F","^2<","~$goog.html.uncheckedconversions","^2?","^2:"]]],["^16","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^16","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25","^26","~$goog.dom.TagName","~$goog.dom.tags","^2D","^2J","~$goog.html.SafeStyleSheet","^2F","^2<","^2E","^2=","^2>","~$goog.labs.userAgent.browser","^29","^2?","^2@","^2:"]]],["^16","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^29"]]],["^16","schema/utils.cljs"],["304476e51665a95795c5bbd3b35ba7be1aaabad5","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^R","~$goog.string.format","^29","^27","~$clojure.string"]]],["^16","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25"]]],["^16","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^16","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25","^26","^27","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^16","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",[]]],["^16","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25","^29"]]],["^16","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^R","^27","~$goog.string.StringBuffer"]]],["^16","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","~$goog.dom.safe","^2K","^2?","^2:"]]],["^16","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^2:"]]],["^16","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^25","^26","^2H","~$goog.math"]]],["^16","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","^2I","^2D","^2J","^2P","^2F","^2<","^2?","^2:","^2="]]],["^16","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S"]]],["^16","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","~$goog.math.Long","~$goog.math.Integer","^27","^29","^25","~$goog.Uri","^2["]]],["^16","schema/spec/core.cljs"],["304476e51665a95795c5bbd3b35ba7be1aaabad5","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^R","^P"]]],["^16","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^2?","^2@","^2E","^26"]]],["^16","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^2?","^2J","^2@","^25","^29","^26","^2:"]]],["^16","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^2B"]]],["^16","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","^27"]]],["^16","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^20",["^ ","^21",null,"^22",["^I",[]],"^23",["^S","^26","^2@"]]]]],"~:clj-info",["^ ","jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1617974188000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/prismatic/schema/1.1.12/schema-1.1.12.jar!/schema/utils.clj",1619897329000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/prismatic/schema/1.1.12/schema-1.1.12.jar!/schema/macros.clj",1619897329000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1620039399000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1627822699000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1627822708000,"jar:file:/Users/margoobraztsova/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1627822708000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure.","^7","schema/spec/core.cljs","^8",1,"^9",5,"^:",1,"^;",21],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"~:shadow/protocol-prefixes",["^I",["schema$spec$core$CoreSpec$"]],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^I",["^U","^V"]],"~:shadow/js-access-global",["^I",["Object"]],"^W",null,"~:defs",["^ ","~$CoreSpec",["^ ","^5",["^ ","~:protocol-symbol",true,"^7","schema/spec/core.cljs","^;",22,"^9",14,"^8",12,"~:protocol-info",["^ ","~:methods",["^ ","~$subschemas",[["~$this"]],"~$checker",[["^41","~$params"]]]],"^:",12,"~:sigs",["^ ","~:subschemas",["^ ","^J","^40","~:arglists",["^[",[["^41"]]],"^6","List all subschemas"],"~:checker",["^ ","^J","^42","^46",["^[",[["^41","^43"]]],"^6","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas."]],"^6","Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.","~:jsdoc",["^[",["@interface"]]],"^3Y",true,"^J","^1N","^7","schema/spec/core.cljs","^;",22,"^9",1,"^8",12,"^3Z",["^ ","^3[",["^ ","^40",[["^41"]],"^42",[["^41","^43"]]]],"~:info",null,"^:",12,"~:tag","~$any","^44",["^ ","^45",["^ ","^J","^40","^46",["^[",[["^41"]]],"^6","List all subschemas"],"^47",["^ ","^J","^42","^46",["^[",[["^41","^43"]]],"^6","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas."]],"~:impls",["^I",["~$schema.spec.leaf/LeafSpec"]],"^6","Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.","^48",["^[",["@interface"]]],"^40",["^ ","~:protocol-inline",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",16,"^9",4,"^:",16,"^;",14,"~:protocol","^1N","^6","List all subschemas","^46",["^[",["~$quote",["^[",[["^41"]]]]]],"^4?","^1N","^J","^1U","^7","schema/spec/core.cljs","^;",14,"~:method-params",["^[",[["^41"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^9",1,"~:variadic?",false,"^8",12,"~:ret-tag","^4;","^:",16,"~:max-fixed-arity",1,"~:fn-var",true,"^46",["^[",["^4@",["^[",[["^41"]]]]],"^6","List all subschemas"],"^42",["^ ","^4>",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",18,"^9",4,"^:",18,"^;",11,"^4?","^1N","^6","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.","^46",["^[",["^4@",["^[",[["^41","^43"]]]]]],"^4?","^1N","^J","^1S","^7","schema/spec/core.cljs","^;",11,"^4A",["^[",[["^41","^43"]]],"^4B",null,"^4C",["^[",[null,null]],"^9",1,"^4D",false,"^8",12,"^4E","^4;","^:",18,"^4F",2,"^4G",true,"^46",["^[",["^4@",["^[",[["^41","^43"]]]]],"^6","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas."],"~$+no-precondition+",["^ ","^4>",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",43,"^9",6,"^:",43,"^;",23],"^J","^1W","^7","schema/spec/core.cljs","^;",23,"^4A",["^[",[["~$_"]]],"^4B",null,"^4C",["^[",[]],"^9",1,"^4D",false,"^8",43,"^4E","~$clj-nil","^:",43,"^4F",1,"^4G",true,"^46",null],"~$precondition",["^ ","^4>",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",45,"^9",7,"^:",45,"^;",19,"^46",["^[",["^4@",["^[",[["~$s","~$p","~$err-f"]]]]],"^6","Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."],"^J","^1D","^7","schema/spec/core.cljs","^;",19,"^4A",["^[",[["~$s","~$p","^4K"]]],"^4B",null,"^4C",["^[",[null,null]],"^9",1,"^4D",false,"^8",45,"^4E","~$function","^:",45,"^4F",3,"^4G",true,"^46",["^[",["^4@",["^[",[["~$s","~$p","^4K"]]]]],"^6","Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."],"~$run-checker",["^ ","^4>",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",65,"^9",7,"^:",65,"^;",18,"^46",["^[",["^4@",["^[",[["~$f","~$return-walked?","~$s"]]]]],"^6","A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."],"^J","^1M","^7","schema/spec/core.cljs","^;",18,"^4A",["^[",[["~$f","^4N","~$s"]]],"^4B",null,"^4C",["^[",[null,null]],"^9",1,"^4D",false,"^8",65,"^4E","^4;","^:",65,"^4F",3,"^4G",true,"^46",["^[",["^4@",["^[",[["~$f","^4N","~$s"]]]]],"^6","A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."],"~$with-cache",["^ ","^4>",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",75,"^9",7,"^:",75,"^;",17,"^46",["^[",["^4@",["^[",[["~$cache","~$cache-key","~$wrap-recursive-delay","~$result-fn"]]]]]],"^J","^1F","^7","schema/spec/core.cljs","^;",17,"^4A",["^[",[["^4P","^4Q","^4R","^4S"]]],"^4B",null,"^4C",["^[",[null,null]],"^9",1,"^4D",false,"^8",75,"^4E","^4;","^:",75,"^4F",4,"^4G",true,"^46",["^[",["^4@",["^[",[["^4P","^4Q","^4R","^4S"]]]]]],"~$sub-checker",["^ ","^4>",null,"^5",["^ ","^7","schema/spec/core.cljs","^8",85,"^9",7,"^:",85,"^;",18,"^46",["^[",["^4@",["^[",[[["^ ","~:keys",["~$schema","~$error-wrap"]],["^ ","^4U",["~$subschema-checker","^4P"],"^11","^43"]]]]]],"^6","Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."],"^J","^1R","^7","schema/spec/core.cljs","^;",18,"^4A",["^[",[["~$p__32576","~$p__32577"]]],"^4B",null,"^4C",["^[",[null,null]],"^9",1,"^4D",false,"^8",85,"^4E",["^I",["^4;","^4L"]],"^:",85,"^4F",2,"^4G",true,"^46",["^[",["^4@",["^[",[[["^ ","^4U",["^4V","^4W"]],["^ ","^4U",["^4X","^4P"],"^11","^43"]]]]]],"^6","Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."]],"^V",["^ ","^X","^X","^Y","^X","^R","^R","^P","^P","^Q","^P"],"~:cljs.analyzer/constants",["^ ","^T",["^I",["~:schema","~:schema.spec.core/in-progress","~:return-walked?","~$throws?","~:else","~:subschema-checker","~:cache","~$not","~:error-wrap"]],"~:order",["^53","^54","^57","^55","^52","^56","^51","^50","^58"]],"^12",["^ ","^U",["^I",[]],"^V",["^I",[]]],"^13",["^ "],"^14",["^S","^R","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^1[",[["^5<","~:static-fns"],true,["^5<","~:shadow-tweaks"],null,["^5<","~:source-map-inline"],null,["^5<","~:elide-asserts"],false,["^5<","~:optimize-constants"],null,["^5<","^19"],null,["^5<","~:external-config"],null,["^5<","~:tooling-config"],null,["^5<","~:emit-constants"],null,["^5<","~:load-tests"],null,["^5<","~:form-size-threshold"],null,["^5<","~:data-readers"],null,["^5<","~:infer-externs"],"~:auto",["^5<","^1;"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5<","~:fn-invoke-direct"],null,["^5<","~:source-map"],"/dev/null"]]]